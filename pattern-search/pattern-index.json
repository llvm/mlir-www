{
  "operations": {
    "memref.alloca": [
      {
        "className": "AllocaScopeHoister",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "AllocaScopeHoister",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "AllocaScopeHoister",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::RelaxScalableVectorAllocaAlignment",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.alloca"
        ]
      }
    ],
    "test.use": [
      {
        "className": "AllocaScopeHoister",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileCmpCond",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileConditionTruth",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.use"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.use"
        ]
      }
    ],
    "memref.alloca_scope": [
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "memref.alloca_scope"
        ]
      },
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "memref.alloca_scope"
        ]
      },
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca_scope"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca_scope"
        ]
      }
    ],
    "memref.alloca_scope.return": [
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "memref.alloca_scope.return"
        ]
      },
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.alloca_scope.return"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca_scope.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloca_scope.return"
        ]
      }
    ],
    "affine.parallel": [
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.parallel"
        ]
      }
    ],
    "memref.store": [
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::AffineStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ConditionPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskStoreConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskStoreConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskStoreConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::StoreOp, {anonymous}::getStoreOpSrcMemRef, {anonymous}::rebuildStoreOp, {anonymous}::getStoreOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::StoreOp, {anonymous}::getStoreOpSrcMemRef, {anonymous}::rebuildStoreOp, {anonymous}::getStoreOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::StoreOp, {anonymous}::getStoreOpSrcMemRef, {anonymous}::rebuildStoreOp, {anonymous}::getStoreOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::ReallocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpFromSplatOrBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "modify op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "memref.store"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.store"
        ]
      }
    ],
    "test.count": [
      {
        "className": "AllocaScopeInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.count"
        ]
      }
    ],
    "arith.constant": [
      {
        "className": "AssertOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "CmpFIntToFPConst",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "FoldLaunchArguments",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "StorageSpecifierInitOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineDmaStartLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineDmaWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineMaxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineMinLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffinePrefetchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AffineVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BFloat16ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConcatConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CondBranchTruthPropagation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConditionPropagation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstShapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstSizeOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpExtractSliceFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessMultiIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpGetGlobalFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpReinterpretCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldLessThanOpF32ToI1",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldSignOpF32ToSI32",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldTransferWriteOfExtractTileSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FolderInsertBeforePreviouslyFoldedConstantPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForallLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForallOpReplaceConstantInductionVar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FuseExtractSliceWithConcat",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GPULaneIdOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GPURotateConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GenerateToConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOfTransferWriteOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::InsertStridedSliceConstantFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::InsertTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeArithConstantOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinearizeConstantLike",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::StoreOp, {anonymous}::getStoreOpSrcMemRef, {anonymous}::rebuildStoreOp, {anonymous}::getStoreOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MulIMulIConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::NumElementsOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMopa2WayOp, mlir::arm_sme::aarch64_sme_mopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMops2WayOp, mlir::arm_sme::aarch64_sme_mops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa2WayOp, mlir::arm_sme::aarch64_sme_smopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa4WayOp, mlir::arm_sme::aarch64_sme_smopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops2WayOp, mlir::arm_sme::aarch64_sme_smops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops4WayOp, mlir::arm_sme::aarch64_sme_smops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMopa4WayOp, mlir::arm_sme::aarch64_sme_sumopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMops4WayOp, mlir::arm_sme::aarch64_sme_sumops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa2WayOp, mlir::arm_sme::aarch64_sme_umopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa4WayOp, mlir::arm_sme::aarch64_sme_umopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops2WayOp, mlir::arm_sme::aarch64_sme_umops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops4WayOp, mlir::arm_sme::aarch64_sme_umops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMopa4WayOp, mlir::arm_sme::aarch64_sme_usmopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMops4WayOp, mlir::arm_sme::aarch64_sme_usmops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ReciprocalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowiOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PowiOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToPermlanePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToSwizzlePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RankShapeOfCanonicalizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RemoveOutsDependency",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferLoads<mlir::amdgpu::RawBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAddRefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::RuntimeDropRefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseExtractSliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseNumberOfEntriesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLvlOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorToPositionsConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::StreamingVLOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubILHSAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubISubILHSRHSLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertFromSvboolOp, mlir::arm_sve::ConvertFromSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertToSvboolOp, mlir::arm_sve::ConvertToSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::bufferization::AllocTensorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TestCreateUnregisteredOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransposeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStorePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::IPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgArithConstantOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WhileCmpCond",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::WhileConditionTruth",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "arith.constant"
        ]
      }
    ],
    "async.return": [
      {
        "className": "AssertOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "async.return"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.return"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.return"
        ]
      }
    ],
    "async.yield": [
      {
        "className": "AssertOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "async.yield"
        ]
      }
    ],
    "cf.assert": [
      {
        "className": "AssertOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::ConvertCstrRequireOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "cf.assert"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.assert"
        ]
      }
    ],
    "cf.cond_br": [
      {
        "className": "AssertOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::CondBranchTruthPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::DoWhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyCondBranchIdenticalSuccessors",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyCondBranchIdenticalSuccessors",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyConstCondBranchPred",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyConstCondBranchPred",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyPassThroughCondBranch",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyPassThroughCondBranch",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyPassThroughCondBranch",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "cf.cond_br"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.cond_br"
        ]
      }
    ],
    "vector.mask": [
      {
        "className": "CanonializeEmptyMaskOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "CanonializeEmptyMaskOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.mask"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.mask"
        ]
      }
    ],
    "vector.yield": [
      {
        "className": "CanonializeEmptyMaskOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.yield"
        ]
      }
    ],
    "arith.select": [
      {
        "className": "CanonializeEmptyMaskOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MaxSIOp, mlir::arith::CmpIPredicate::sgt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MaxUIOp, mlir::arith::CmpIPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MinSIOp, mlir::arith::CmpIPredicate::slt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MinUIOp, mlir::arith::CmpIPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::FoldI1Select",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::FoldI1Select",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MaxSIOp, mlir::arith::CmpIPredicate::sgt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MaxUIOp, mlir::arith::CmpIPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MinSIOp, mlir::arith::CmpIPredicate::slt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MinUIOp, mlir::arith::CmpIPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxNumMinNumFOpConverter<mlir::arith::MaxNumFOp, mlir::arith::CmpFPredicate::UGT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxNumMinNumFOpConverter<mlir::arith::MinNumFOp, mlir::arith::CmpFPredicate::ULT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaximumMinimumFOpConverter<mlir::arith::MaximumFOp, mlir::arith::CmpFPredicate::UGT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::MaximumMinimumFOpConverter<mlir::arith::MinimumFOp, mlir::arith::CmpFPredicate::ULT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectFalse",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectFalse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectFalse",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectTrue",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectTrue",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectTrue",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectNotCond",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectNotCond",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectNotCond",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SelectOpOneToNLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SimplifyCondBranchIdenticalSuccessors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.select"
        ]
      }
    ],
    "func.return": [
      {
        "className": "CanonializeEmptyMaskOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddFOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddIOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ClampClampOptimization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ClampIsNoOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CmpFIntToFPConst",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ConcatOptimization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ConcatSliceOptimization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ConsolidateTransposeOptimization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FoldAddIntoDest",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "FromElementsToShapeCast",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MaxPool2dIsNoOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MergeArithBitcast",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MergeComplexBitcast",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "SliceDynamicSizeCanonicalization",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "TransposeIsReshape",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "UModSimplification",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "UMulExtendedOpXOne",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, mlir::tensor::CollapseShapeOp>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithUnPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldPadWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldUnpackWithExtractSliceOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyPackToExpandShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyUnPackToCollapseShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::ConvertGenericOpwithSubChannelType",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::ProcessMultiIndexOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneLhs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneRhs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantLHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedToAddI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AffineForEmptyLoopFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOneOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllToCstrEqCanonicalization",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BitcastOfBitcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BroadcastConcretizeResultTypePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFoldConstantOperandsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BroadcastForwardSingleOperandPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownBitCastForStridedSliceExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForInsert",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CancelDelinearizeOfLinearizeDisjointExactTail",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Canonicalize0DShuffleOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorBitcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CombineContractResultTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ComposeSubViewOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpExtractSliceFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ContractionLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpIToUnsigned",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertCstrRequireOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::CeilDivSIOp, mlir::arith::CeilDivUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::DivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::ExtSIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::FloorDivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MaxSIOp, mlir::arith::MaxUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MinSIOp, mlir::arith::MinUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::RemSIOp, mlir::arith::RemUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableToRequire",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::CstrEqToRequire",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DeleteTrivialRem<mlir::arith::RemSIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfMemRefReshape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::memref::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DimOfToTensorFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DivFOfNegF",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DoWhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeLeadingZero",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeUnitComponentsIfDisjointOrZero",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnExtractSliceOfInsertSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnInsertSliceOfExtractSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromTransposeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllGatherOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllReduceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllToAllOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::GatherOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::RecvOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ReduceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ReduceScatterOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ScatterOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::SendOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExecuteRegionLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExpandLoadFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtSIOfExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractElementFromIndexCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCollapseShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromShapeOfExtentTensor",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorGenerate",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpGetGlobalFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpMemorySpaceCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpReinterpretCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ImOp, 1>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ReOp, 0>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldConsecutiveConstantPadding",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousGather",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldConvertIntoProducer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldDuplicateShardOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldExpandOfRankReducingExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldI1Select",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceOfExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceSplat",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldLessThanOpF32ToI1",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldOrthogonalPaddings",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::AvgPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::AvgPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::Conv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::Conv2DOp> >",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::DepthwiseConv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::DepthwiseConv2DOp> >",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::MaxPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::MaxPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldSignOpF32ToSI32",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticZeroPadding",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeSplat",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldUnPaddingCollapseIntoExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FolderInsertBeforePreviouslyFoldedConstantPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FoldingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FuseExtractSliceWithConcat",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GatherFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GenerateToConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert13",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert14",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert15",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert16",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert17",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert18",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert19",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert2",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert23",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert24",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert25",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert26",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert27",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert28",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert29",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert30",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert31",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert32",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert34",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert36",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert37",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert4",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert52",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert53",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert55",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert56",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert57",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert8",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert9",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GenericOpReinterpretMap",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfIndexCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IndexCastUIOfExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IndexSwitchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::IndexToSizeToIndexCanonicalization",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InferConcatResultType",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOfTransferWriteOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertSplatToSplat",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertStridedSliceConstantFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InsertToBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::InterleaveToShuffle",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskLoadConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaLoadMatrixOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::nvgpu::LdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MixedSizeInputShuffleOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MulFOfNegF",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MulIMulIConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MulUIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::complex::PowiOp, mlir::complex::DivOp, mlir::complex::MulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToPermlanePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToSwizzlePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RankShapeOfCanonicalizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReduceRedundantZero",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectFalse",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RedundantSelectTrue",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::AssumingAllOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::IsBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferLoads<mlir::amdgpu::RawBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RetainedMemrefAliasingAlwaysDeallocatedMemref",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpTypeConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SelectNotCond",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastBroadcastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfCastExtentTensor",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShuffleInterleave",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ShuffleSplat",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDimOfAllocOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SingleInputConcatOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SizeToIndexToSizeCanonicalization",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseReturnConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SplitDelinearizeSpanningLastLinearizeArg",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceConstantMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubILHSAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubISubILHSRHSLHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorScalableExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TensorCastExtractSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TestNestedSameOpAndSameArgEqualityPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ToBufferOfCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::ToFromElementsToShuffleTreeRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantReciprocal",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadAfterWriteToBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransferWritePermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::Transpose2DWithUnitDimToShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvNonStridedConverter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToMatrixTransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncFSIToFPToSIToFP",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtSIToExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtUIToExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollToElements",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UpliftFma",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtSI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtUI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::XegpuCreateNdDescOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "func.return"
        ]
      }
    ],
    "affine.max": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefAllocation<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMaxOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.max"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.max"
        ]
      }
    ],
    "affine.apply": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ComposeSubViewOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldConsecutiveConstantPadding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ForallOpReplaceConstantInductionVar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaLoadMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaStoreMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::XegpuCreateNdDescOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "affine.apply"
        ]
      }
    ],
    "affine.min": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ForallOpReplaceConstantInductionVar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineMinOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.min"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.min"
        ]
      }
    ],
    "arith.cmpi": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "CmpFIntToFPConst",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpBooleanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpIToUnsigned",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpIToUnsigned",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpIToUnsigned",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MaxSIOp, mlir::arith::CmpIPredicate::sgt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MaxUIOp, mlir::arith::CmpIPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MinSIOp, mlir::arith::CmpIPredicate::slt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMaxMin<mlir::arith::MinUIOp, mlir::arith::CmpIPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::GPURotateConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MaxSIOp, mlir::arith::CmpIPredicate::sgt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MaxUIOp, mlir::arith::CmpIPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MinSIOp, mlir::arith::CmpIPredicate::slt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MaxMinIOpConverter<mlir::arith::MinUIOp, mlir::arith::CmpIPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterEqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WhileCmpCond",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WhileCmpCond",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "arith.cmpi"
        ]
      }
    ],
    "scf.for": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "replace op with values",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ConvertForOpTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ReducChainInsertRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.for"
        ]
      }
    ],
    "tensor.extract_slice": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldUnpackWithExtractSliceOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldUnpackWithExtractSliceOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpExtractSliceFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpExtractSliceFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnExtractSliceOfInsertSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnExtractSliceOfInsertSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnExtractSliceOfInsertSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnInsertSliceOfExtractSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnInsertSliceOfExtractSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldExpandOfRankReducingExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldOrthogonalPaddings",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldUnPaddingCollapseIntoExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpReplaceConstantInductionVar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FuseExtractSliceWithConcat",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FuseExtractSliceWithConcat",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::SwapExtractSliceOfTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      },
      {
        "className": "{anonymous}::TensorCastExtractSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract_slice"
        ]
      }
    ],
    "tensor.pad": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldConsecutiveConstantPadding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldConsecutiveConstantPadding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldConsecutiveConstantPadding",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldOrthogonalPaddings",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldOrthogonalPaddings",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldOrthogonalPaddings",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticZeroPadding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticZeroPadding",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.pad"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.pad"
        ]
      }
    ],
    "arith.index_cast": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "StorageSpecifierGetOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "StorageSpecifierSetOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMaxOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIndexToInt<mlir::arith::IndexCastOp, mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessLinearIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DimOfMemRefReshape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractElementFromIndexCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfIndexCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOfIndexCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::IndexSwitchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorizable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::PselOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::StreamingVLOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_cast"
        ]
      }
    ],
    "consumer": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "consumer"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consumer"
        ]
      }
    ],
    "memref.subview": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "MergeAffineMinMaxOp<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ComposeSubViewOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ComposeSubViewOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ComposeSubViewOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::StoreOp, {anonymous}::getStoreOpSrcMemRef, {anonymous}::rebuildStoreOp, {anonymous}::getStoreOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesBufferConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SparseToPositionsConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SparseToValuesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOfSubViewFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.subview"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.subview"
        ]
      }
    ],
    "tensor.insert_slice": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ConcatConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnExtractSliceOfInsertSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnInsertSliceOfExtractSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DropRedundantRankExpansionOnInsertSliceOfExtractSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldPaddingExpandIntoInsert<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOfTransferWriteOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOfTransferWriteOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::SwapExtractSliceOfTransferWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert_slice"
        ]
      }
    ],
    "vector.create_mask": [
      {
        "className": "CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.create_mask"
        ]
      }
    ],
    "arith.addf": [
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddFOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddFOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::AddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::EmulateFloatPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldDuplicateInputBbArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorizable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReduceRedundantZero",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UpliftFma",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::UpliftFma",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addf"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addf"
        ]
      }
    ],
    "vector.contract": [
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddFOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddIOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineContractResultTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.contract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.contract"
        ]
      }
    ],
    "arith.addi": [
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddIOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "CanonicalizeContractAdd<mlir::arith::AddIOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "SortCommutativeOperands",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneLhs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneLhs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneRhs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneRhs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantLHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantLHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedToAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineDmaStartLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineDmaWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineMaxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineMinLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffinePrefetchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AffineVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::BinaryOpConversion<mlir::shape::AddOp, mlir::arith::AddIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConcatConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::RemSIOp, mlir::arith::RemUIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorGenerate",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorizable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TestSelectiveOpReplacementPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollStorePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.addi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.addi"
        ]
      }
    ],
    "tosa.clamp": [
      {
        "className": "ClampClampOptimization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.clamp"
        ]
      },
      {
        "className": "ClampClampOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.clamp"
        ]
      },
      {
        "className": "ClampClampOptimization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.clamp"
        ]
      },
      {
        "className": "ClampIsNoOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.clamp"
        ]
      },
      {
        "className": "ClampIsNoOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.clamp"
        ]
      }
    ],
    "arith.cmpf": [
      {
        "className": "CmpFIntToFPConst",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "CmpFIntToFPConst",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::EqualOp, mlir::arith::CmpFPredicate::OEQ>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::NotEqualOp, mlir::arith::CmpFPredicate::UNE>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::EmulateFloatPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::MaxNumMinNumFOpConverter<mlir::arith::MaxNumFOp, mlir::arith::CmpFPredicate::UGT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::MaxNumMinNumFOpConverter<mlir::arith::MinNumFOp, mlir::arith::CmpFPredicate::ULT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::MaximumMinimumFOpConverter<mlir::arith::MaximumFOp, mlir::arith::CmpFPredicate::UGT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::MaximumMinimumFOpConverter<mlir::arith::MinimumFOp, mlir::arith::CmpFPredicate::ULT>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::EqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterEqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.cmpf"
        ]
      }
    ],
    "memref.collapse_shape": [
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.collapse_shape"
        ]
      }
    ],
    "memref.cast": [
      {
        "className": "CollapseShapeOpMemRefCastFolder",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "mlir::linalg::LinalgOpToLibraryCallRewrite",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ToBufferOfCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ViewOpMemrefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.cast"
        ]
      }
    ],
    "tosa.concat": [
      {
        "className": "ConcatOptimization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.concat"
        ]
      },
      {
        "className": "ConcatOptimization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.concat"
        ]
      }
    ],
    "tensor.cast": [
      {
        "className": "ConcatOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastConcretizeResultTypePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ConstShapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldCollapseOfCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldCollapseOfCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithCastOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithCastOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticZeroPadding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InferConcatOperandTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InferConcatResultType",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfCastExtentTensor",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfCastExtentTensor",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::SingleInputConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::TensorCastExtractSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::TensorCastExtractSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::ToExtentTensorOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.cast"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.cast"
        ]
      }
    ],
    "tosa.slice": [
      {
        "className": "ConcatSliceOptimization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "ConcatSliceOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "ConcatSliceOptimization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "SliceDynamicSizeCanonicalization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "SliceDynamicSizeCanonicalization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "SliceDynamicSizeCanonicalization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.slice"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.slice"
        ]
      }
    ],
    "tosa.const_shape": [
      {
        "className": "ConcatSliceOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "SliceDynamicSizeCanonicalization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "TransposeIsReshape",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const_shape"
        ]
      }
    ],
    "tosa.transpose": [
      {
        "className": "ConsolidateTransposeOptimization",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "ConsolidateTransposeOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "ConsolidateTransposeOptimization",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "TransposeIsReshape",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "TransposeIsReshape",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.transpose"
        ]
      }
    ],
    "vector.extract_strided_slice": [
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoShuffle",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoShuffle",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownBitCastForStridedSliceExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownBitCastForStridedSliceExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownBitCastForStridedSliceExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertLayoutOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::PackScales",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceConstantMaskFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceConstantMaskFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStorePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract_strided_slice"
        ]
      }
    ],
    "vector.extract": [
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "FromElementsToShapeCast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromCreateMask",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromCreateMask",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldExtractFromVectorOfSMELikeCreateMasks",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertFromSvboolOp, mlir::arm_sve::ConvertFromSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertToSvboolOp, mlir::arm_sve::ConvertToSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::Transpose2DWithUnitDimToShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollToElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::IPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "vector.extract"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.extract"
        ]
      }
    ],
    "vector.insert": [
      {
        "className": "Convert1DExtractStridedSliceIntoExtractInsertChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "Convert1DExtractStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertSplatToSplat",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertSplatToSplat",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertToBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::InsertToBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ReducChainInsertRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ReducChainInsertRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertFromSvboolOp, mlir::arm_sve::ConvertFromSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertToSvboolOp, mlir::arm_sve::ConvertToSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::IPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "erase op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "vector.insert"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "replace op with values",
        "operations": [
          "vector.insert"
        ]
      }
    ],
    "vector.shuffle": [
      {
        "className": "Convert1DExtractStridedSliceIntoShuffle",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::Canonicalize0DShuffleOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::Canonicalize0DShuffleOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::InterleaveToShuffle",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorShuffle",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::MixedSizeInputShuffleOpRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::MixedSizeInputShuffleOpRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::MixedSizeInputShuffleOpRewrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ShuffleInterleave",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ShuffleInterleave",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ShuffleSplat",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ShuffleSplat",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ToFromElementsToShuffleTreeRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shuffle"
        ]
      }
    ],
    "spirv.AccessChain": [
      {
        "className": "ConvertAccessChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "mlir::khr::{anonymous}::WmmaLoadOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "mlir::khr::{anonymous}::WmmaStoreOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::CombineChainedAccessChain",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::CombineChainedAccessChain",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::CombineChainedAccessChain",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::CombineChainedAccessChain",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::LoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::ProcessInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::StoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AccessChain"
        ]
      }
    ],
    "spirv.Constant": [
      {
        "className": "ConvertAccessChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "UMulExtendedOpXOne",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::khr::{anonymous}::WmmaLoadOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::khr::{anonymous}::WmmaStoreOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ConstantOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ConstantOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsInfPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsNanPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpNanNonePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantCompositeOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantScalarOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexConstantBoolOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexConstantOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexSizeOf",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::CopySignPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::CountLeadingZerosPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::CLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::GLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExtSII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExtSIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExtUII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ExtUIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::GPURotateConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::IndexCastI1IndexPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::IndexCastIndexI1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::LoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ProcessInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::SelectionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::StoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::TruncII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::TruncIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::UIToFPI1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToFPDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorStepOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      },
      {
        "className": "{anonymous}::WorkGroupSizeConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Constant"
        ]
      }
    ],
    "spirv.IMul": [
      {
        "className": "ConvertAccessChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::MulOp, mlir::spirv::IMulOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::ElementwiseArithOpPattern<mlir::arith::MulIOp, mlir::spirv::IMulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::LoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::StoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IMul"
        ]
      }
    ],
    "spirv.SDiv": [
      {
        "className": "ConvertAccessChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::DivSIOp, mlir::spirv::SDivOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::DivSOp, mlir::spirv::SDivOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDiv"
        ]
      }
    ],
    "spirv.SMod": [
      {
        "className": "ConvertAccessChain",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.SMod"
        ]
      }
    ],
    "spirv.mlir.addressof": [
      {
        "className": "ConvertAddressOf",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::AllocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockDimOp, mlir::spirv::BuiltIn::WorkgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockIdOp, mlir::spirv::BuiltIn::WorkgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GlobalIdOp, mlir::spirv::BuiltIn::GlobalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GridDimOp, mlir::spirv::BuiltIn::NumWorkgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::ThreadIdOp, mlir::spirv::BuiltIn::LocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::ProcessInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SPIRVAddressOfOpLayoutInfoDecoration",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::LaneIdOp, mlir::spirv::BuiltIn::SubgroupLocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::NumSubgroupsOp, mlir::spirv::BuiltIn::NumSubgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupIdOp, mlir::spirv::BuiltIn::SubgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupSizeOp, mlir::spirv::BuiltIn::SubgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.addressof"
        ]
      }
    ],
    "spirv.Bitcast": [
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "ConvertStore",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::CopySignPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::BitcastOp, mlir::spirv::BitcastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Bitcast"
        ]
      }
    ],
    "spirv.CompositeConstruct": [
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "UMulExtendedOpXOne",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaConstantOpToSPIRVLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::CopySignPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::CreateOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::ImageLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorFromElementsOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorInterleaveOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorScalarBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      },
      {
        "className": "{anonymous}::VectorStepOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeConstruct"
        ]
      }
    ],
    "spirv.IAdd": [
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::AddOp, mlir::spirv::IAddOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::ElementwiseArithOpPattern<mlir::arith::AddIOp, mlir::spirv::IAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::LoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::StoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAdd"
        ]
      }
    ],
    "spirv.Load": [
      {
        "className": "ConvertLoad",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::CombineChainedAccessChain",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::ImageLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockDimOp, mlir::spirv::BuiltIn::WorkgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockIdOp, mlir::spirv::BuiltIn::WorkgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GlobalIdOp, mlir::spirv::BuiltIn::GlobalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GridDimOp, mlir::spirv::BuiltIn::NumWorkgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::ThreadIdOp, mlir::spirv::BuiltIn::LocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::ProcessInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::LaneIdOp, mlir::spirv::BuiltIn::SubgroupLocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::NumSubgroupsOp, mlir::spirv::BuiltIn::NumSubgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupIdOp, mlir::spirv::BuiltIn::SubgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupSizeOp, mlir::spirv::BuiltIn::SubgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Load"
        ]
      }
    ],
    "vector.insert_strided_slice": [
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "DecomposeDifferentRankInsertStridedSlice",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceOfExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceOfExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceSplat",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertStridedSliceSplat",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertStridedSliceConstantFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertStridedSliceConstantFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.insert_strided_slice"
        ]
      }
    ],
    "llvm.intr.matrix.multiply": [
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "llvm.intr.matrix.multiply"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.matrix.multiply"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "llvm.intr.matrix.multiply"
        ]
      }
    ],
    "llvm.intr.matrix.transpose": [
      {
        "className": "ConvertSameRankInsertStridedSliceIntoShuffle",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "llvm.intr.matrix.transpose"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "llvm.intr.matrix.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToMatrixTransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.matrix.transpose"
        ]
      }
    ],
    "spirv.Store": [
      {
        "className": "ConvertStore",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::TerminatorOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Store"
        ]
      }
    ],
    "tosa.conv2d": [
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::Conv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::Conv2DOp> >",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::Conv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::Conv2DOp> >",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::Conv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::Conv2DOp> >",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvNonStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.conv2d"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.conv2d"
        ]
      }
    ],
    "tosa.const": [
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "mlir::tosa::{anonymous}::ConvertTosaConstWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantReciprocal",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.const"
        ]
      }
    ],
    "tosa.rescale": [
      {
        "className": "ConvertTosaConv2DOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.rescale"
        ]
      },
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.rescale"
        ]
      }
    ],
    "vector.broadcast": [
      {
        "className": "DecomposeNDExtractStridedSlice",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::Canonicalize0DShuffleOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayExtractStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayInsertStridedSliceLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertSplatToBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::FoldI1Select",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeSplat",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::InsertSplatToSplat",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::InsertTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::InsertToBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastBroadcastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ShuffleSplat",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::StoreOpFromSplatOrBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadAfterWriteToBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBroadcastPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorSplatToBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpStep",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorBroadcastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.broadcast"
        ]
      }
    ],
    "linalg.generic": [
      {
        "className": "FoldAddIntoDest",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldConvertIntoProducer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldConvertIntoProducer",
        "namespace": "{anonymous}",
        "method": "replace op with new op",
        "operations": [
          "sparse_tensor.convert",
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldDuplicateInputBbArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GenericOpReinterpretMap",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GenericOpScheduler",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::MaterializeResizeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClzOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::EqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterEqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::IntDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ReciprocalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::RemoveOutsDependency",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.generic"
        ]
      }
    ],
    "linalg.matmul": [
      {
        "className": "FoldAddIntoDest",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::TensorCastExtractSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matmul"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.matmul"
        ]
      }
    ],
    "linalg.add": [
      {
        "className": "FoldAddIntoDest",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveExtractSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.add"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.add"
        ]
      }
    ],
    "linalg.broadcast": [
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.broadcast"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.broadcast"
        ]
      }
    ],
    "linalg.yield": [
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "FoldBroadcasts",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::EraseIdentityLinalgOp<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::EraseSelfCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::MaterializeResizeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClzOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::EqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterEqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::IntDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ReciprocalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::TransposeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.yield"
        ]
      }
    ],
    "scf.index_switch": [
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.index_switch"
        ]
      },
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "scf.index_switch"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexSwitchOpTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.index_switch"
        ]
      },
      {
        "className": "{anonymous}::IndexSwitchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.index_switch"
        ]
      }
    ],
    "scf.yield": [
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AddIAddConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AffineYieldOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConditionPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvertYieldOpTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::EnterDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::ExitDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::UpdateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldTargetTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedStoreToConditionalStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::IfOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyElseBranch",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "scf.yield"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "scf.yield"
        ]
      }
    ],
    "test.op": [
      {
        "className": "FoldConstantCase",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.op"
        ]
      }
    ],
    "arith.muli": [
      {
        "className": "FoldLaunchArguments",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "SortCommutativeOperands",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineMaxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineMinLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AffineVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::BinaryOpConversion<mlir::shape::MulOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorizable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MulIMulIConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MulIMulIConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MulIMulIConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::MulUIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::StreamingVLOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.muli"
        ]
      }
    ],
    "arith.mulf": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::CastAwayElementwiseLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::EmulateFloatPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MulFOfNegF",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MulFOfNegF",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MulFOfNegF",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TestMultiUseProducerFusion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulf"
        ]
      }
    ],
    "func.call": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "mlir::linalg::LinalgOpToLibraryCallRewrite",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::ConvertGenericOpwithSubChannelType",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AffineOpSCFCanonicalizationPattern<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AsyncCallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::CallOpSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::AbsOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::AbsOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::CosOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::CosOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::ExpOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::ExpOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::LogOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::LogOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SinOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SinOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SqrtOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SqrtOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanhOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanhOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::CtlzOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::FPowIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::FoldToCallOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::IPowIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedCycleInGenericOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAddRefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAddToGroupOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAwaitAndResumeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAwaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeCreateGroupOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeCreateOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeDropRefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeIsErrorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeResumeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeSetAvailableOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeSetErrorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::RuntimeStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::AbsOp, {anonymous}::FloatTypeResolver>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::AngleOp, {anonymous}::FloatTypeResolver>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::ConjOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseCallConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseNumberOfEntriesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDeallocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLvlOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorToPositionsConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorToValuesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "func.call"
        ]
      }
    ],
    "linalg.conv_2d_nhwc_hwcf": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf"
        ]
      }
    ],
    "linalg.exp": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.exp"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.exp"
        ]
      }
    ],
    "linalg.fill": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "SwapExtractSliceOfFill",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::SparseExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.fill"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.fill"
        ]
      }
    ],
    "linalg.index": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.index"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.index"
        ]
      }
    ],
    "math.exp": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp"
        ]
      }
    ],
    "test.destination_style_op": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "test.destination_style_op"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.destination_style_op"
        ]
      },
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "test.destination_style_op"
        ]
      }
    ],
    "tensor.extract": [
      {
        "className": "FoldTensorCastProducerOp",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractElementFromIndexCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractElementFromIndexCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractElementFromIndexCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCollapseShape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCollapseShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCollapseShape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromShapeOfExtentTensor",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromShapeOfExtentTensor",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorGenerate",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorGenerate",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::GetExtentOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::IfOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::PadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ScatterOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.extract"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.extract"
        ]
      }
    ],
    "linalg.transpose": [
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "FoldTransposeWithTranspose",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::ExtractSliceOpCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldConstantTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.transpose"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.transpose"
        ]
      }
    ],
    "vector.from_elements": [
      {
        "className": "FromElementsToShapeCast",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "FromElementsToShapeCast",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorFromElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ToFromElementsToShuffleTreeRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ToFromElementsToShuffleTreeRewrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.from_elements"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.from_elements"
        ]
      }
    ],
    "vector.shape_cast": [
      {
        "className": "FromElementsToShapeCast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ContiguousExtractStridedSliceToExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToMatmulOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromTransposeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorToElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::PackScales",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastBroadcastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastBroadcastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastBroadcastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::Transpose2DWithUnitDimToShapeCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToMatrixTransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorShapeCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.shape_cast"
        ]
      }
    ],
    "spirv.GroupFAdd": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFAdd"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFAdd"
        ]
      }
    ],
    "spirv.GroupFMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFMax"
        ]
      }
    ],
    "spirv.GroupFMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupFMin"
        ]
      }
    ],
    "spirv.GroupIAdd": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupIAdd"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupIAdd"
        ]
      }
    ],
    "spirv.GroupNonUniformFAdd": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFAdd"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFAdd"
        ]
      }
    ],
    "spirv.GroupNonUniformFMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMax"
        ]
      }
    ],
    "spirv.GroupNonUniformFMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMin"
        ]
      }
    ],
    "spirv.GroupNonUniformFMul": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMul"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformFMul"
        ]
      }
    ],
    "spirv.GroupNonUniformIAdd": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformIAdd"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformIAdd"
        ]
      }
    ],
    "spirv.GroupNonUniformIMul": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformIMul"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformIMul"
        ]
      }
    ],
    "spirv.GroupNonUniformSMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformSMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformSMax"
        ]
      }
    ],
    "spirv.GroupNonUniformSMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformSMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformSMin"
        ]
      }
    ],
    "spirv.GroupNonUniformUMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformUMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformUMax"
        ]
      }
    ],
    "spirv.GroupNonUniformUMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformUMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformUMin"
        ]
      }
    ],
    "spirv.GroupSMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupSMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupSMax"
        ]
      }
    ],
    "spirv.GroupSMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupSMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupSMin"
        ]
      }
    ],
    "spirv.GroupUMax": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupUMax"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupUMax"
        ]
      }
    ],
    "spirv.GroupUMin": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupUMin"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.GroupUMin"
        ]
      }
    ],
    "spirv.KHR.GroupFMul": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.KHR.GroupFMul"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.KHR.GroupFMul"
        ]
      }
    ],
    "spirv.KHR.GroupIMul": [
      {
        "className": "GPUAllReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.KHR.GroupIMul"
        ]
      },
      {
        "className": "GPUSubgroupReduceConversion",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.KHR.GroupIMul"
        ]
      }
    ],
    "spirv.IAddCarry": [
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "spirv.IAddCarry"
        ]
      },
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "spirv.IAddCarry"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.IAddCarry"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.IAddCarry"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IAddCarry"
        ]
      }
    ],
    "spirv.CompositeInsert": [
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaInsertOpToSPIRVLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertStridedSliceOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeInsert"
        ]
      }
    ],
    "spirv.Undef": [
      {
        "className": "IAddCarryFold",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Undef"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Undef"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.Undef"
        ]
      },
      {
        "className": "{anonymous}::PoisonOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Undef"
        ]
      }
    ],
    "emitc.assign": [
      {
        "className": "IndexSwitchOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.assign"
        ]
      },
      {
        "className": "{anonymous}::ConvertStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.assign"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.assign"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.assign"
        ]
      }
    ],
    "emitc.load": [
      {
        "className": "IndexSwitchOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.load"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.load"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.load"
        ]
      }
    ],
    "emitc.switch": [
      {
        "className": "IndexSwitchOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.switch"
        ]
      }
    ],
    "emitc.variable": [
      {
        "className": "IndexSwitchOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.variable"
        ]
      },
      {
        "className": "{anonymous}::ConvertAlloca",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.variable"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.variable"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.variable"
        ]
      }
    ],
    "emitc.yield": [
      {
        "className": "IndexSwitchOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.yield"
        ]
      }
    ],
    "tensor.parallel_insert_slice": [
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "InsertSliceOfInsertSliceFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertOfRankReducingInsert<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldPaddingExpandIntoInsert<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpReplaceConstantInductionVar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpCastFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOpConstantArgumentFolder<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::MergeConsecutiveInsertSlice<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineMinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.parallel_insert_slice"
        ]
      }
    ],
    "tosa.max_pool2d": [
      {
        "className": "MaxPool2dIsNoOp",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "tosa.max_pool2d"
        ]
      },
      {
        "className": "MaxPool2dIsNoOp",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "tosa.max_pool2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::MaxPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::MaxPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.max_pool2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::MaxPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::MaxPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.max_pool2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::MaxPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::MaxPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.max_pool2d"
        ]
      }
    ],
    "arith.bitcast": [
      {
        "className": "MergeArithBitcast",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "MergeArithBitcast",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "MergeComplexBitcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BFloat16ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BitcastOfBitcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BitcastOfBitcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BitcastOfBitcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BitcastOfBitcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.bitcast"
        ]
      }
    ],
    "complex.bitcast": [
      {
        "className": "MergeArithBitcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "complex.bitcast"
        ]
      },
      {
        "className": "MergeComplexBitcast",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "complex.bitcast"
        ]
      },
      {
        "className": "MergeComplexBitcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "complex.bitcast"
        ]
      },
      {
        "className": "MergeComplexBitcast",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "complex.bitcast"
        ]
      }
    ],
    "spirv.SMulExtended": [
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "spirv.SMulExtended"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "spirv.SMulExtended"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.SMulExtended"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.SMulExtended"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpPattern<mlir::arith::MulSIExtendedOp, mlir::spirv::SMulExtendedOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SMulExtended"
        ]
      }
    ],
    "spirv.UMulExtended": [
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "MulExtendedFold<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "UMulExtendedOpXOne",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "UMulExtendedOpXOne",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.UMulExtended"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpPattern<mlir::arith::MulUIExtendedOp, mlir::spirv::UMulExtendedOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UMulExtended"
        ]
      }
    ],
    "scf.execute_region": [
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "{anonymous}::ExecuteRegionLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.execute_region"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.execute_region"
        ]
      }
    ],
    "cf.br": [
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "YieldOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::AsyncReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::DoWhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::ExecuteRegionLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::IndexSwitchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyCondBranchIdenticalSuccessors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::SimplifyConstCondBranchPred",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::TestRegionRewriteBlockMovement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "cf.br"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.br"
        ]
      }
    ],
    "test.bar": [
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "MultiBlockExecuteInliner",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "{anonymous}::CloneOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "{anonymous}::ExecuteRegionLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.bar"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.bar"
        ]
      }
    ],
    "vector.transfer_read": [
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferReadPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferReadLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferRead",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadAfterWriteToBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadAfterWriteToBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadOfExtractSliceOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferReadPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "erase op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.transfer_read"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_read"
        ]
      }
    ],
    "vector.transfer_write": [
      {
        "className": "PadOpVectorizationWithInsertSlicePattern",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "PadOpVectorizationWithTransferWritePattern",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTWForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTWForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CastAwayTransferWriteLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CombineContractABTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CombineContractBroadcastMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FlattenContiguousRowMajorTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FoldArithExtIntoContractionOp<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FoldTransferWriteOfExtractTileSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FoldTransferWriteOfExtractTileSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::FoldWaw",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::InsertSliceOfTransferWriteOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferReadOpPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MaskedTransferWriteOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::SwapExtractSliceOfTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWritePermutationLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWritePermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWritePermutationLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::UnrollContractionPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransferWritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpStep",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "erase op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "vector.transfer_write"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "replace op with values",
        "operations": [
          "vector.transfer_write"
        ]
      }
    ],
    "tosa.pad": [
      {
        "className": "PadSliceOptimization",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.pad"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.pad"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.pad"
        ]
      }
    ],
    "sparse_tensor.iterate": [
      {
        "className": "RemoveUnusedLvlCrds",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "sparse_tensor.iterate"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.iterate"
        ]
      }
    ],
    "arith.extui": [
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::BFloat16ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpBooleanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIndexToInt<mlir::arith::IndexCastUIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::ExtSIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ExtSIOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtUIToExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extui"
        ]
      }
    ],
    "arith.xori": [
      {
        "className": "SelectToExtUI",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::XOrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.xori"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.xori"
        ]
      }
    ],
    "memref.alloc": [
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefAlloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefAllocation<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveAllocDeallocPairWhenNoOtherUsers",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.alloc"
        ]
      }
    ],
    "memref.copy": [
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTRForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::linalg::LinalgCopyVTWForwardingPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldSelfCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::TrivialSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.copy"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.copy"
        ]
      }
    ],
    "memref.dim": [
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfMemRefReshape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfMemRefReshape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::memref::DimOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::memref::DimOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfToTensorFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DropInnerMostUnitDimsTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDimOfAllocOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDimOfAllocOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SparseNumberOfEntriesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::TransferReadDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteDropUnitDimsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "memref.dim"
        ]
      }
    ],
    "test.val": [
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "test.val"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.val"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.val"
        ]
      }
    ],
    "memref.load": [
      {
        "className": "SingleBlockExecuteInliner",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantRHS",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::AffineLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::DimOfMemRefReshape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ExtractValOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskLoadConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskLoadConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskLoadConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskTypeCastConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::memref::LoadOp, {anonymous}::getLoadOpSrcMemRef, {anonymous}::rebuildLoadOp, {anonymous}::getLoadOpViewSizeForEachDim>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarExtractOfTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "memref.load"
        ]
      }
    ],
    "test.op_commutative": [
      {
        "className": "SortCommutativeOperands",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.op_commutative"
        ]
      }
    ],
    "test.op_large_commutative": [
      {
        "className": "SortCommutativeOperands",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.op_large_commutative"
        ]
      }
    ],
    "vector.splat": [
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.splat"
        ]
      },
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.splat"
        ]
      },
      {
        "className": "{anonymous}::ConvertSplatToBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.splat"
        ]
      },
      {
        "className": "{anonymous}::ConvertSplatToBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.splat"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorSplat",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.splat"
        ]
      }
    ],
    "test.reflect_bounds": [
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "test.reflect_bounds"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.reflect_bounds"
        ]
      }
    ],
    "vector.transpose": [
      {
        "className": "SplatToBroadcastPattern",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CastAwayContractionLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CombineContractResultTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CombineContractResultTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromTransposeOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromTransposeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromTransposeOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeSplat",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeSplat",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransferOpReduceRank",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransferReadAfterWriteToBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransferReadPermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteNonPermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransferWritePermutationLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::Transpose2DWithUnitDimToShapeCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::Transpose2DWithUnitDimToShapeCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToMatrixTransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToMatrixTransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::UnrollTransposePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "vector.transpose"
        ]
      }
    ],
    "llvm.extractvalue": [
      {
        "className": "StorageSpecifierGetOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::GPUReturnOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ZipX2Op, mlir::arm_sve::ZipX2IntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ZipX4Op, mlir::arm_sve::ZipX4IntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AddFOp, mlir::LLVM::FAddOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::BitcastOp, mlir::LLVM::BitcastOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtFOp, mlir::LLVM::FPExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtSIOp, mlir::LLVM::SExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToSIOp, mlir::LLVM::FPToSIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToUIOp, mlir::LLVM::FPToUIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SIToFPOp, mlir::LLVM::SIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SelectOp, mlir::LLVM::SelectOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShLIOp, mlir::LLVM::ShlOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRSIOp, mlir::LLVM::AShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRUIOp, mlir::LLVM::LShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::TruncIOp, mlir::LLVM::TruncOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::UIToFPOp, mlir::LLVM::UIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AddOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AssumeAlignmentOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::CompositeExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConstrainedVectorConvertToLLVMPattern<mlir::arith::TruncFOp, mlir::LLVM::FPTruncOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreate2To4SpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateBsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCooOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCscOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertDeallocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtractAlignedPointerAsIndex",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemsetOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertSDDMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertSetCsrPointersOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMWorkEstimationOrComputeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMVOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::FromPtrOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::GetMetadataOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ImOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::LegalizeLaunchFuncOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveExpectTxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveNoCompleteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierGetLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierInitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTestWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTryWaitParityLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaInitAccumulatorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::PrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::PtxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::ROCDL::RawPtrBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::ROCDL::RawPtrBufferAtomicFmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicSmaxOp, mlir::ROCDL::RawPtrBufferAtomicSmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicUminOp, mlir::ROCDL::RawPtrBufferAtomicUminOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ReOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::SubOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ToPtrOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorCompressStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorDeinterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorExpandLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorTypeCastOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaMmaOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      },
      {
        "className": "{anonymous}::X86IntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractvalue"
        ]
      }
    ],
    "llvm.insertvalue": [
      {
        "className": "StorageSpecifierInitOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "StorageSpecifierSetOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::GPUReturnOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AddFOp, mlir::LLVM::FAddOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::BitcastOp, mlir::LLVM::BitcastOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtFOp, mlir::LLVM::FPExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtSIOp, mlir::LLVM::SExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToSIOp, mlir::LLVM::FPToSIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToUIOp, mlir::LLVM::FPToUIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SIToFPOp, mlir::LLVM::SIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SelectOp, mlir::LLVM::SelectOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShLIOp, mlir::LLVM::ShlOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRSIOp, mlir::LLVM::AShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRUIOp, mlir::LLVM::LShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::TruncIOp, mlir::LLVM::TruncOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::UIToFPOp, mlir::LLVM::UIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::AddOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::AllocaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::CompositeInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ConstrainedVectorConvertToLLVMPattern<mlir::arith::TruncFOp, mlir::LLVM::FPTruncOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::CreateOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ExecutionModePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::FromPtrOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::GetMetadataOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaInitAccumulatorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::SubOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToNdLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::VectorTypeCastOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaConstantOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertvalue"
        ]
      }
    ],
    "llvm.mlir.poison": [
      {
        "className": "StorageSpecifierInitOpConverter",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::GPUReturnOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AddFOp, mlir::LLVM::FAddOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::BitcastOp, mlir::LLVM::BitcastOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtFOp, mlir::LLVM::FPExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtSIOp, mlir::LLVM::SExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToSIOp, mlir::LLVM::FPToSIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToUIOp, mlir::LLVM::FPToUIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SIToFPOp, mlir::LLVM::SIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SelectOp, mlir::LLVM::SelectOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShLIOp, mlir::LLVM::ShlOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRSIOp, mlir::LLVM::AShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRUIOp, mlir::LLVM::LShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::TruncIOp, mlir::LLVM::TruncOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::UIToFPOp, mlir::LLVM::UIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AddOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AllocaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ConstrainedVectorConvertToLLVMPattern<mlir::arith::TruncFOp, mlir::LLVM::FPTruncOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::CreateOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ExecutionModePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::FromPtrOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaInitAccumulatorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::PoisonOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::SubOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToLowRankLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToNdLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorDeinterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorFromElementsLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorShufflePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorTypeCastOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::WmmaConstantOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.poison"
        ]
      }
    ],
    "tensor.dim": [
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ConcatConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfDestStyleOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfIterArgFolder<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfLoopResultFolder<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfReshapeOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfToTensorFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DimOfToTensorFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromShapeOfExtentTensor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromTensorGenerate",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldInsertPadIntoFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::GetExtentOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::IterArgsToInitArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RankOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReduceOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RemoveOutsDependency",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::TransposeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.dim"
        ]
      }
    ],
    "tensor.empty": [
      {
        "className": "SwapTransposeWithBroadcast",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldUnpackWithExtractSliceOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConcatConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DecomposeProjectedPermutation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldConvertIntoProducer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithDimOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FoldInvariantYield",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ForOpTensorCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::GatherConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::MaterializeResizeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClzOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::EqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterEqualOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::GreaterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::IntDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ReciprocalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::RemoveOutsDependency",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      },
      {
        "className": "{anonymous}::TransposeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.empty"
        ]
      }
    ],
    "test.op_with_region_pattern": [
      {
        "className": "TestRemoveOpWithInnerOps",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "test.op_with_region_pattern"
        ]
      }
    ],
    "test.op_with_region_terminator": [
      {
        "className": "TestRemoveOpWithInnerOps",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "test.op_with_region_terminator"
        ]
      }
    ],
    "tosa.reshape": [
      {
        "className": "TransposeIsReshape",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "tosa.reshape"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.reshape"
        ]
      },
      {
        "className": "{anonymous}::TileConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.reshape"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.reshape"
        ]
      }
    ],
    "llvm.inline_asm": [
      {
        "className": "TransposeOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "llvm.inline_asm"
        ]
      },
      {
        "className": "{anonymous}::LDSBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inline_asm"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inline_asm"
        ]
      },
      {
        "className": "{anonymous}::PtxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inline_asm"
        ]
      }
    ],
    "spirv.UMod": [
      {
        "className": "UModSimplification",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "UModSimplification",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "UModSimplification",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::RemUIOp, mlir::spirv::UModOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::RemUOp, mlir::spirv::UModOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpGLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UMod"
        ]
      }
    ],
    "emitc.func": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "erase op",
        "operations": [
          "emitc.func"
        ]
      },
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.func"
        ]
      },
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "replace op with values",
        "operations": [
          "emitc.func"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.func"
        ]
      }
    ],
    "emitc.class": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.class"
        ]
      }
    ],
    "emitc.field": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.field"
        ]
      }
    ],
    "emitc.get_field": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "emitc.get_field"
        ]
      }
    ],
    "emitc.call_opaque": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::ConvertAlloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::ConvertCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::LowerToEmitCCallOpaque<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call_opaque"
        ]
      }
    ],
    "emitc.subscript": [
      {
        "className": "WrapFuncInClass",
        "namespace": "",
        "method": "modify op",
        "operations": [
          "emitc.subscript"
        ]
      },
      {
        "className": "{anonymous}::ConvertCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.subscript"
        ]
      },
      {
        "className": "{anonymous}::ConvertLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.subscript"
        ]
      },
      {
        "className": "{anonymous}::ConvertStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.subscript"
        ]
      }
    ],
    "async.runtime.set_available": [
      {
        "className": "YieldOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "async.runtime.set_available"
        ]
      },
      {
        "className": "{anonymous}::AsyncReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.set_available"
        ]
      }
    ],
    "async.runtime.store": [
      {
        "className": "YieldOpLowering",
        "namespace": "",
        "method": "insert op",
        "operations": [
          "async.runtime.store"
        ]
      },
      {
        "className": "{anonymous}::AsyncReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.store"
        ]
      }
    ],
    "memref.expand_shape": [
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp, mlir::memref::ExpandShapeOp, mlir::memref::CastOp, mlir::memref::DimOp, mlir::MemRefType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.expand_shape"
        ]
      }
    ],
    "tensor.collapse_shape": [
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, mlir::tensor::CollapseShapeOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyUnPackToCollapseShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughCollapseShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldCollapseOfCastOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldCollapseOfCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldCollapseOfCastOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithTensorReshape<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldUnPaddingCollapseIntoExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldUnPaddingCollapseIntoExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::MaterializeResizeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::InsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReducedInsertSliceOp<mlir::tensor::ParallelInsertSliceOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.collapse_shape"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.collapse_shape"
        ]
      }
    ],
    "tensor.expand_shape": [
      {
        "className": "mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp, mlir::tensor::ExpandShapeOp, mlir::tensor::CastOp, mlir::tensor::DimOp, mlir::RankedTensorType>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, mlir::tensor::CollapseShapeOp>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, mlir::tensor::CollapseShapeOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp, mlir::tensor::CollapseShapeOp>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp, mlir::ReshapeOpKind::kExpand>",
        "namespace": "mlir",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyPackToExpandShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExpandThroughParallelCollapse",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ConvertToStaticExpandShape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::DimOfReifyRankedShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldEmptyTensorWithReshapeOp<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldExpandOfRankReducingExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldExpandOfRankReducingExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::MoveInitOperandsToInput",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::RankReducedExtractSliceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.expand_shape"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.expand_shape"
        ]
      }
    ],
    "linalg.vecmat": [
      {
        "className": "mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp, mlir::ReshapeOpKind::kCollapse>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.vecmat"
        ]
      }
    ],
    "llvm.getelementptr": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToLLVMCallLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AccessChainPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AssumeAlignmentOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtractAlignedPointerAsIndex",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMatGetSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveExpectTxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveNoCompleteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierGetLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierInitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTestWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTryWaitParityLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::PrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::PtrAddOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::RuntimeCreateOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::TypeOffsetOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorCompressStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorExpandLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      },
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.getelementptr"
        ]
      }
    ],
    "llvm.mlir.addressof": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToLLVMCallLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::AddressOfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::CommWorldOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::RuntimeAwaitAndResumeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::RuntimeResumeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.addressof"
        ]
      }
    ],
    "llvm.mlir.constant": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::BoolConstantOp, mlir::LLVM::ConstantOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsFiniteOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsInfOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsNaNOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AccessChainPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AllocaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AssumeAlignmentOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::AtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CommWorldOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CompositeExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CompositeInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConstantScalarAndVectorPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::ControlBarrierOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::INTELControlBarrierArriveOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::INTELControlBarrierWaitOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreate2To4SpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateBsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCooOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCscOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexSizeOf",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemsetOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSDDMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSDDMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMCopyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMWorkEstimationOrComputeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMVBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMVOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMatGetSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CoroEndOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CoroIdOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::CoroSuspendOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ExecutionModePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::FromPtrOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUBarrierConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupIAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseAndOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseOrOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseXorOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFAddOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMaxOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMinOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMulOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformIAddOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformIMulOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalAndOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalOrOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalXorOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformSMaxOp, true, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformSMinOp, true, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformUMaxOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformUMinOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupSMaxOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupSMinOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupUMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupUMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::InverseSqrtPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::BlockDimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::BlockIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::GlobalIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::GridDimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::ThreadIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LegalizeLaunchFuncOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockPrefetch2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemfenceToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulSIExtendedOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulUIExtendedOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCreateGroupLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaFenceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaInitAccumulatorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NotPattern<mlir::spirv::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::NotPattern<mlir::spirv::NotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::PtxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::ROCDL::RawPtrBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::ROCDL::RawPtrBufferAtomicFmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicSmaxOp, mlir::ROCDL::RawPtrBufferAtomicSmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicUminOp, mlir::ROCDL::RawPtrBufferAtomicUminOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ScaledMFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VariablePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToLowRankLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToNdLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorFromElementsLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorShufflePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorToElementsLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::VectorTypeCastOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::WmmaConstantOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::X86IntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.constant"
        ]
      }
    ],
    "llvm.mlir.global": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToLLVMCallLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::CommWorldOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::ExecutionModePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::GlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::GlobalVariablePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.global"
        ]
      }
    ],
    "llvm.mlir.zero": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::CoroIdOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::InitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::RuntimeCreateOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::TestTypeProducerOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::TypeOffsetOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.zero"
        ]
      }
    ],
    "llvm.ptrtoint": [
      {
        "className": "mlir::GPUDynamicSharedMemoryOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::CommWorldOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtractAlignedPointerAsIndex",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierGetLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::RuntimeCreateOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      },
      {
        "className": "{anonymous}::TypeOffsetOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ptrtoint"
        ]
      }
    ],
    "llvm.alloca": [
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::AllocaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreate2To4SpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMatGetSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      },
      {
        "className": "{anonymous}::VariablePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.alloca"
        ]
      }
    ],
    "llvm.func": [
      {
        "className": "mlir::GPUFuncOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToLLVMCallLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::CoroFreeOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::FinalizeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::FuncConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::InitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockPrefetch2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::MMAToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::MemfenceToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.func"
        ]
      }
    ],
    "llvm.call": [
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToLLVMCallLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::arith::MaxNumFOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::arith::MinNumFOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::arith::RemFOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AbsFOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AbsIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AcosOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AcoshOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AsinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AsinhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Atan2Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::CbrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::CeilOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::CopySignOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::CosOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::CoshOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::ErfOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::ErfcOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Exp2Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::ExpM1Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::FPowIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::FloorOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::FmaOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsFiniteOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsInfOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsNaNOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Log10Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Log1pOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Log2Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::LogOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::PowFOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::RoundEvenOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::RoundOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::RsqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SinhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CallIndirectOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::ControlBarrierOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::INTELControlBarrierArriveOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ControlBarrierPattern<mlir::spirv::INTELControlBarrierWaitOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreate2To4SpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateBsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCooOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCscOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateCsrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertDeallocOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertDestroyDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertDestroySpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemsetOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSDDMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSDDMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSetCsrPointersOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSetDefaultDeviceOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMCopyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMCreateDescrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMDestroyDescrOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpGEMMWorkEstimationOrComputeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMVBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMVOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMatGetSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertWaitAsyncOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ConvertWaitOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::CoroFreeOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::FinalizeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::FunctionCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUBarrierConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::LaneIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::NumSubgroupsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::SubgroupIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::SubgroupSizeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupIAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseAndOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseOrOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformBitwiseXorOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFAddOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMaxOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMinOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformFMulOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformIAddOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformIMulOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalAndOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalOrOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformLogicalXorOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformSMaxOp, true, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformSMinOp, true, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformUMaxOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupNonUniformUMinOp, false, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupSMaxOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupSMinOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupUMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::GroupReducePattern<mlir::spirv::GroupUMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::InitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::BlockDimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::BlockIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::GlobalIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::GridDimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigOpConversion<mlir::gpu::ThreadIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockPrefetch2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::MMAToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::MemfenceToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToOCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call"
        ]
      }
    ],
    "llvm.zext": [
      {
        "className": "mlir::GPUPrintfOpToHIPLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastUOp, mlir::LLVM::ZExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::LaneIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::NumSubgroupsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::SubgroupIdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupOpConversion<mlir::gpu::SubgroupSizeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::UConvertOp, mlir::LLVM::ZExtOp, mlir::LLVM::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulUIExtendedOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTryWaitParityLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::ScaledMFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftLeftLogicalOp, mlir::LLVM::ShlOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightArithmeticOp, mlir::LLVM::AShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightLogicalOp, mlir::LLVM::LShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      },
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.zext"
        ]
      }
    ],
    "llvm.fpext": [
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Atan2Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::RsqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtFOp, mlir::LLVM::FPExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::FConvertOp, mlir::LLVM::FPExtOp, mlir::LLVM::FPTruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fpext"
        ]
      }
    ],
    "llvm.store": [
      {
        "className": "mlir::GPUPrintfOpToVPrintfLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePattern<mlir::spirv::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaCreateDescriptorOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::RuntimeStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::VariablePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.store"
        ]
      }
    ],
    "llvm.return": [
      {
        "className": "mlir::GPUReturnOpLowering",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ExecutionModePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::GlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      },
      {
        "className": "{anonymous}::ReturnValuePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.return"
        ]
      }
    ],
    "arm_sve.intr.dupq_lane": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::DupQLaneOp, mlir::arm_sve::DupQLaneIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.dupq_lane"
        ]
      }
    ],
    "arm_sve.intr.fadd": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedAddFOp, mlir::arm_sve::ScalableMaskedAddFIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.fadd"
        ]
      }
    ],
    "arm_sve.intr.add": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedAddIOp, mlir::arm_sve::ScalableMaskedAddIIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.add"
        ]
      }
    ],
    "arm_sve.intr.fdiv": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedDivFOp, mlir::arm_sve::ScalableMaskedDivFIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.fdiv"
        ]
      }
    ],
    "arm_sve.intr.fmul": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedMulFOp, mlir::arm_sve::ScalableMaskedMulFIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.fmul"
        ]
      }
    ],
    "arm_sve.intr.mul": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedMulIOp, mlir::arm_sve::ScalableMaskedMulIIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.mul"
        ]
      }
    ],
    "arm_sve.intr.sdiv": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedSDivIOp, mlir::arm_sve::ScalableMaskedSDivIIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.sdiv"
        ]
      }
    ],
    "arm_sve.intr.fsub": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedSubFOp, mlir::arm_sve::ScalableMaskedSubFIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.fsub"
        ]
      }
    ],
    "arm_sve.intr.sub": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedSubIOp, mlir::arm_sve::ScalableMaskedSubIIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.sub"
        ]
      }
    ],
    "arm_sve.intr.udiv": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ScalableMaskedUDivIOp, mlir::arm_sve::ScalableMaskedUDivIIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.udiv"
        ]
      }
    ],
    "arm_sve.intr.sdot": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::SdotOp, mlir::arm_sve::SdotIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.sdot"
        ]
      }
    ],
    "arm_sve.intr.smmla": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::SmmlaOp, mlir::arm_sve::SmmlaIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.smmla"
        ]
      }
    ],
    "arm_sve.intr.udot": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::UdotOp, mlir::arm_sve::UdotIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.udot"
        ]
      }
    ],
    "arm_sve.intr.ummla": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::UmmlaOp, mlir::arm_sve::UmmlaIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.ummla"
        ]
      }
    ],
    "arm_sve.intr.usmmla": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::UsmmlaOp, mlir::arm_sve::UsmmlaIntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.usmmla"
        ]
      }
    ],
    "arm_sve.intr.zip.x2": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ZipX2Op, mlir::arm_sve::ZipX2IntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.zip.x2"
        ]
      }
    ],
    "arm_sve.intr.zip.x4": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::arm_sve::ZipX4Op, mlir::arm_sve::ZipX4IntrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.zip.x4"
        ]
      }
    ],
    "llvm.add": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::AddOp, mlir::LLVM::AddOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AddIOp, mlir::LLVM::AddOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::IAddOp, mlir::LLVM::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::PrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      },
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.add"
        ]
      }
    ],
    "llvm.sdiv": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::DivSOp, mlir::LLVM::SDivOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sdiv"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::DivSIOp, mlir::LLVM::SDivOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sdiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sdiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sdiv"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::SDivOp, mlir::LLVM::SDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sdiv"
        ]
      }
    ],
    "llvm.udiv": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::DivUOp, mlir::LLVM::UDivOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.udiv"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::DivUIOp, mlir::LLVM::UDivOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.udiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.udiv"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::UDivOp, mlir::LLVM::UDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.udiv"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.udiv"
        ]
      }
    ],
    "llvm.intr.smax": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::MaxSOp, mlir::LLVM::SMaxOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.smax"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MaxSIOp, mlir::LLVM::SMaxOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.smax"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLSMaxOp, mlir::LLVM::SMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.smax"
        ]
      }
    ],
    "llvm.intr.umax": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::MaxUOp, mlir::LLVM::UMaxOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.umax"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MaxUIOp, mlir::LLVM::UMaxOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.umax"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.umax"
        ]
      }
    ],
    "llvm.intr.smin": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::MinSOp, mlir::LLVM::SMinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.smin"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MinSIOp, mlir::LLVM::SMinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.smin"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLSMinOp, mlir::LLVM::SMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.smin"
        ]
      }
    ],
    "llvm.intr.umin": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::MinUOp, mlir::LLVM::UMinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.umin"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MinUIOp, mlir::LLVM::UMinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.umin"
        ]
      }
    ],
    "llvm.mul": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::MulOp, mlir::LLVM::MulOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MulIOp, mlir::LLVM::MulOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::AllocaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::IMulOp, mlir::LLVM::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulSIExtendedOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulUIExtendedOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::PrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::ROCDL::RawPtrBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::ROCDL::RawPtrBufferAtomicFmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicSmaxOp, mlir::ROCDL::RawPtrBufferAtomicSmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicUminOp, mlir::ROCDL::RawPtrBufferAtomicUminOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::StoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::ViewOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      },
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mul"
        ]
      }
    ],
    "llvm.or": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::OrOp, mlir::LLVM::OrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::OrIOp, mlir::LLVM::OrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::BitwiseOrOp, mlir::LLVM::OrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::LogicalOrOp, mlir::LLVM::OrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.or"
        ]
      }
    ],
    "llvm.srem": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::RemSOp, mlir::LLVM::SRemOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.srem"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::RemSIOp, mlir::LLVM::SRemOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.srem"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::SRemOp, mlir::LLVM::SRemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.srem"
        ]
      }
    ],
    "llvm.urem": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::RemUOp, mlir::LLVM::URemOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::RemUIOp, mlir::LLVM::URemOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::UModOp, mlir::LLVM::URemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.urem"
        ]
      }
    ],
    "llvm.shl": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::ShlOp, mlir::LLVM::ShlOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShLIOp, mlir::LLVM::ShlOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftLeftLogicalOp, mlir::LLVM::ShlOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shl"
        ]
      }
    ],
    "llvm.ashr": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::ShrSOp, mlir::LLVM::AShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.ashr"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRSIOp, mlir::LLVM::AShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.ashr"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ashr"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightArithmeticOp, mlir::LLVM::AShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.ashr"
        ]
      }
    ],
    "llvm.lshr": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::ShrUOp, mlir::LLVM::LShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ShRUIOp, mlir::LLVM::LShrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulSIExtendedOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulUIExtendedOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::NVGPUGenerateWarpgroupDescriptorLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightLogicalOp, mlir::LLVM::LShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.lshr"
        ]
      }
    ],
    "llvm.sub": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::SubOp, mlir::LLVM::SubOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SubIOp, mlir::LLVM::SubOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::AlignedAllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::ISubOp, mlir::LLVM::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sub"
        ]
      }
    ],
    "llvm.xor": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::index::XOrOp, mlir::LLVM::XOrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::XOrIOp, mlir::LLVM::XOrOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::BitwiseXorOp, mlir::LLVM::XOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::NotPattern<mlir::spirv::LogicalNotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::NotPattern<mlir::spirv::NotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.xor"
        ]
      }
    ],
    "llvm.intr.vscale": [
      {
        "className": "mlir::OneToOneConvertToLLVMPattern<mlir::vector::VectorScaleOp, mlir::LLVM::vscale>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.vscale"
        ]
      }
    ],
    "llvm.fptrunc": [
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::Atan2Op>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::AtanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::RsqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::SqrtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::TanhOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "{anonymous}::ConstrainedVectorConvertToLLVMPattern<mlir::arith::TruncFOp, mlir::LLVM::FPTruncOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::FConvertOp, mlir::LLVM::FPExtOp, mlir::LLVM::FPTruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fptrunc"
        ]
      }
    ],
    "llvm.icmp": [
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsFiniteOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsInfOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "mlir::OpToFuncCallLowering<mlir::math::IsNaNOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::IEqualOp, mlir::LLVM::ICmpPredicate::eq>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::INotEqualOp, mlir::LLVM::ICmpPredicate::ne>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::LogicalEqualOp, mlir::LLVM::ICmpPredicate::eq>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::LogicalNotEqualOp, mlir::LLVM::ICmpPredicate::ne>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::SGreaterThanEqualOp, mlir::LLVM::ICmpPredicate::sge>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::SGreaterThanOp, mlir::LLVM::ICmpPredicate::sgt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::SLessThanEqualOp, mlir::LLVM::ICmpPredicate::sle>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::SLessThanOp, mlir::LLVM::ICmpPredicate::slt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::UGreaterThanEqualOp, mlir::LLVM::ICmpPredicate::uge>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::UGreaterThanOp, mlir::LLVM::ICmpPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::ULessThanEqualOp, mlir::LLVM::ICmpPredicate::ule>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::IComparePattern<mlir::spirv::ULessThanOp, mlir::LLVM::ICmpPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.icmp"
        ]
      }
    ],
    "linalg.softmax": [
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.softmax"
        ]
      },
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.softmax"
        ]
      }
    ],
    "memref.transpose": [
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "memref.transpose"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.transpose"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.transpose"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.transpose"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.transpose"
        ]
      }
    ],
    "some_use": [
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use"
        ]
      }
    ],
    "linalg.pack": [
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastPackOp",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldPadWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldPadWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldPadWithPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyPackToExpandShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyPackToExpandShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPack",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pack"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pack"
        ]
      }
    ],
    "linalg.unpack": [
      {
        "className": "mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp, SliceReturnTypeCanonicalizer, SliceCanonicalizer>",
        "namespace": "mlir",
        "method": "modify op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsUnPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::FoldTensorCastUnPackOp",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldConsumerUnPackWithProducerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithUnPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldEmptyTensorWithUnPackOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldProducerUnPackWithConsumerLinalgTransposeOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::FoldUnpackWithExtractSliceOp",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyUnPackToCollapseShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::SimplifyUnPackToCollapseShape",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::GenericOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.unpack"
        ]
      },
      {
        "className": "{anonymous}::ReplaceEmptyTensorStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.unpack"
        ]
      }
    ],
    "llvm.extractelement": [
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::CompositeExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::VectorShufflePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::VectorToElementsLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.extractelement"
        ]
      }
    ],
    "llvm.insertelement": [
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::ExpOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::CompositeInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockPrefetch2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToLowRankLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToNdLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorFromElementsLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::VectorShufflePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::WmmaConstantOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.insertelement"
        ]
      }
    ],
    "math.sin": [
      {
        "className": "mlir::ScalarizeVectorOpLowering<mlir::math::SinOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ExtendToSupportedTypesRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorizable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sin"
        ]
      }
    ],
    "llvm.fadd": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AddFOp, mlir::LLVM::FAddOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::AddOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FAddOp, mlir::LLVM::FAddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fadd"
        ]
      }
    ],
    "llvm.and": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::AndIOp, mlir::LLVM::AndOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::BitwiseAndOp, mlir::LLVM::AndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::LogicalAndOp, mlir::LLVM::AndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.and"
        ]
      }
    ],
    "llvm.bitcast": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::BitcastOp, mlir::LLVM::BitcastOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BitcastConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreate2To4SpMatOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertCreateDnTensorOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemsetOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMmaSparseSyncLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ScaledMFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorBitCastOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::X86IntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedStochRoundFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedTrunc2xFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.bitcast"
        ]
      }
    ],
    "llvm.fdiv": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::DivFOp, mlir::LLVM::FDivOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FDivOp, mlir::LLVM::FDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::InverseSqrtPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::TanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fdiv"
        ]
      }
    ],
    "llvm.sext": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::ExtSIOp, mlir::LLVM::SExtOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::NVVM::BlockDimXOp, mlir::NVVM::BlockDimYOp, mlir::NVVM::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::ROCDL::BlockDimXOp, mlir::ROCDL::BlockDimYOp, mlir::ROCDL::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::NVVM::BlockIdXOp, mlir::NVVM::BlockIdYOp, mlir::NVVM::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::ROCDL::BlockIdXOp, mlir::ROCDL::BlockIdYOp, mlir::ROCDL::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::NVVM::GridDimXOp, mlir::NVVM::GridDimYOp, mlir::NVVM::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::ROCDL::GridDimXOp, mlir::ROCDL::GridDimYOp, mlir::ROCDL::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::NVVM::ThreadIdXOp, mlir::NVVM::ThreadIdYOp, mlir::NVVM::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::ROCDL::ThreadIdXOp, mlir::ROCDL::ThreadIdYOp, mlir::ROCDL::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastSOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::CoroSuspendOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::GPULaneIdOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::GPULaneIdOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::GPUSubgroupSizeOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::SConvertOp, mlir::LLVM::SExtOp, mlir::LLVM::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulSIExtendedOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftLeftLogicalOp, mlir::LLVM::ShlOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightArithmeticOp, mlir::LLVM::AShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      },
      {
        "className": "{anonymous}::ShiftPattern<mlir::spirv::ShiftRightLogicalOp, mlir::LLVM::LShrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sext"
        ]
      }
    ],
    "llvm.fptosi": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToSIOp, mlir::LLVM::FPToSIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptosi"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::ConvertFToSOp, mlir::LLVM::FPToSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fptosi"
        ]
      }
    ],
    "llvm.fptoui": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::FPToUIOp, mlir::LLVM::FPToUIOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fptoui"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::ConvertFToUOp, mlir::LLVM::FPToUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fptoui"
        ]
      }
    ],
    "llvm.intr.maxnum": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MaxNumFOp, mlir::LLVM::MaxNumOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.maxnum"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLFMaxOp, mlir::LLVM::MaxNumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.maxnum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.maxnum"
        ]
      }
    ],
    "llvm.intr.maximum": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MaximumFOp, mlir::LLVM::MaximumOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.maximum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.maximum"
        ]
      }
    ],
    "llvm.intr.minnum": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MinNumFOp, mlir::LLVM::MinNumOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.minnum"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLFMinOp, mlir::LLVM::MinNumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.minnum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.minnum"
        ]
      }
    ],
    "llvm.intr.minimum": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MinimumFOp, mlir::LLVM::MinimumOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.minimum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.minimum"
        ]
      }
    ],
    "llvm.fmul": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::MulFOp, mlir::LLVM::FMulOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FMulOp, mlir::LLVM::FMulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fmul"
        ]
      }
    ],
    "llvm.fneg": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::NegFOp, mlir::LLVM::FNegOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fneg"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FNegateOp, mlir::LLVM::FNegOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fneg"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fneg"
        ]
      }
    ],
    "llvm.frem": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::RemFOp, mlir::LLVM::FRemOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.frem"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FRemOp, mlir::LLVM::FRemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.frem"
        ]
      }
    ],
    "llvm.sitofp": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SIToFPOp, mlir::LLVM::SIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::ConvertSToFOp, mlir::LLVM::SIToFPOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.sitofp"
        ]
      }
    ],
    "llvm.select": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SelectOp, mlir::LLVM::SelectOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivU",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::SelectOp, mlir::LLVM::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.select"
        ]
      }
    ],
    "llvm.fsub": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::SubFOp, mlir::LLVM::FSubOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::FSubOp, mlir::LLVM::FSubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::SubOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fsub"
        ]
      }
    ],
    "llvm.trunc": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::TruncIOp, mlir::LLVM::TruncOp, mlir::arith::AttrConvertOverflowToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::BitFieldInsertPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::BitFieldSExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::BitFieldUExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastSOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastUOp, mlir::LLVM::ZExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastOp, mlir::LLVM::SExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::IndexCastOpLowering<mlir::arith::IndexCastUIOp, mlir::LLVM::ZExtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::SConvertOp, mlir::LLVM::SExtOp, mlir::LLVM::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::IndirectCastPattern<mlir::spirv::UConvertOp, mlir::LLVM::ZExtOp, mlir::LLVM::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulSIExtendedOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpLowering<mlir::arith::MulUIExtendedOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveExpectTxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierArriveNoCompleteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierInitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUMBarrierTryWaitParityLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.trunc"
        ]
      }
    ],
    "llvm.uitofp": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::arith::UIToFPOp, mlir::LLVM::UIToFPOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.uitofp"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::ConvertUToFOp, mlir::LLVM::UIToFPOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.uitofp"
        ]
      }
    ],
    "llvm.intr.fabs": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::AbsFOp, mlir::LLVM::FAbsOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.fabs"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLFAbsOp, mlir::LLVM::FAbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.fabs"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.fabs"
        ]
      }
    ],
    "llvm.intr.acos": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::AcosOp, mlir::LLVM::ACosOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.acos"
        ]
      }
    ],
    "llvm.intr.asin": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::AsinOp, mlir::LLVM::ASinOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.asin"
        ]
      }
    ],
    "llvm.intr.atan2": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::Atan2Op, mlir::LLVM::ATan2Op, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.atan2"
        ]
      }
    ],
    "llvm.intr.atan": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::AtanOp, mlir::LLVM::ATanOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.atan"
        ]
      }
    ],
    "llvm.intr.ceil": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::CeilOp, mlir::LLVM::FCeilOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.ceil"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLCeilOp, mlir::LLVM::FCeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.ceil"
        ]
      }
    ],
    "llvm.intr.copysign": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::CopySignOp, mlir::LLVM::CopySignOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.copysign"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.copysign"
        ]
      }
    ],
    "llvm.intr.cos": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::CosOp, mlir::LLVM::CosOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.cos"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLCosOp, mlir::LLVM::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.cos"
        ]
      },
      {
        "className": "{anonymous}::TanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.cos"
        ]
      }
    ],
    "llvm.intr.cosh": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::CoshOp, mlir::LLVM::CoshOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.cosh"
        ]
      }
    ],
    "llvm.intr.ctpop": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::CtPopOp, mlir::LLVM::CtPopOp>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.ctpop"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::BitCountOp, mlir::LLVM::CtPopOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.ctpop"
        ]
      }
    ],
    "llvm.intr.exp2": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::Exp2Op, mlir::LLVM::Exp2Op, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.exp2"
        ]
      }
    ],
    "llvm.intr.exp": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::ExpOp, mlir::LLVM::ExpOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.exp"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLExpOp, mlir::LLVM::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.exp"
        ]
      },
      {
        "className": "{anonymous}::TanhPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.exp"
        ]
      }
    ],
    "llvm.intr.powi": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::FPowIOp, mlir::LLVM::PowIOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.powi"
        ]
      }
    ],
    "llvm.intr.floor": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::FloorOp, mlir::LLVM::FFloorOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.floor"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLFloorOp, mlir::LLVM::FFloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.floor"
        ]
      }
    ],
    "llvm.intr.fma": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::FmaOp, mlir::LLVM::FMAOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.fma"
        ]
      },
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.fma"
        ]
      }
    ],
    "llvm.intr.log": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::LogOp, mlir::LLVM::LogOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.log"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLLogOp, mlir::LLVM::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.log"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.log"
        ]
      }
    ],
    "llvm.intr.pow": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::PowFOp, mlir::LLVM::PowOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.pow"
        ]
      }
    ],
    "llvm.intr.roundeven": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::RoundEvenOp, mlir::LLVM::RoundEvenOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.roundeven"
        ]
      }
    ],
    "llvm.intr.round": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::RoundOp, mlir::LLVM::RoundOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.round"
        ]
      }
    ],
    "llvm.intr.sin": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::SinOp, mlir::LLVM::SinOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.sin"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLSinOp, mlir::LLVM::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sin"
        ]
      },
      {
        "className": "{anonymous}::TanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sin"
        ]
      }
    ],
    "llvm.intr.sinh": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::SinhOp, mlir::LLVM::SinhOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.sinh"
        ]
      }
    ],
    "llvm.intr.sqrt": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::SqrtOp, mlir::LLVM::SqrtOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.sqrt"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::GLSqrtOp, mlir::LLVM::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sqrt"
        ]
      },
      {
        "className": "{anonymous}::InverseSqrtPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sqrt"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.sqrt"
        ]
      }
    ],
    "llvm.intr.tan": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::TanOp, mlir::LLVM::TanOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.tan"
        ]
      }
    ],
    "llvm.intr.tanh": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::TanhOp, mlir::LLVM::TanhOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.tanh"
        ]
      }
    ],
    "llvm.intr.trunc": [
      {
        "className": "mlir::VectorConvertToLLVMPattern<mlir::math::TruncOp, mlir::LLVM::FTruncOp, mlir::arith::AttrConvertFastMathToLLVM>",
        "namespace": "mlir",
        "method": "insert op",
        "operations": [
          "llvm.intr.trunc"
        ]
      }
    ],
    "amdgpu.gather_to_lds": [
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "erase op",
        "operations": [
          "amdgpu.gather_to_lds"
        ]
      },
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "insert op",
        "operations": [
          "amdgpu.gather_to_lds"
        ]
      },
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "replace op with values",
        "operations": [
          "amdgpu.gather_to_lds"
        ]
      },
      {
        "className": "{anonymous}::FoldGatherToLDSOfCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "amdgpu.gather_to_lds"
        ]
      }
    ],
    "affine.delinearize_index": [
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::ProcessMultiIndexOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelDelinearizeOfLinearizeDisjointExactTail",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelDelinearizeOfLinearizeDisjointExactTail",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelDelinearizeOfLinearizeDisjointExactTail",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropUnitExtentBasis",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::ExtractFromCollapseShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfFor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::SplitDelinearizeSpanningLastLinearizeArg",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::SplitDelinearizeSpanningLastLinearizeArg",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::SplitDelinearizeSpanningLastLinearizeArg",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.delinearize_index"
        ]
      }
    ],
    "affine.linearize_index": [
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpExtractSliceThroughExpandShape",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelDelinearizeOfLinearizeDisjointExactTail",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::CancelLinearizeOfDelinearizePortion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeLeadingZero",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeLeadingZero",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeLeadingZero",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeUnitComponentsIfDisjointOrZero",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeUnitComponentsIfDisjointOrZero",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::DropLinearizeUnitComponentsIfDisjointOrZero",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::LowerLinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::SplitDelinearizeSpanningLastLinearizeArg",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.linearize_index"
        ]
      }
    ],
    "memref.extract_strided_metadata": [
      {
        "className": "mlir::amdgpu::FoldMemRefOpsIntoGatherToLDSOp",
        "namespace": "mlir::amdgpu",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAssumeAlignmentFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpCollapseShapeFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExpandShapeFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpGetGlobalFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpGetGlobalFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpMemorySpaceCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpMemorySpaceCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpMemorySpaceCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpReinterpretCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpReinterpretCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpReinterpretCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpSubviewFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferReadOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferReadOp>, {anonymous}::rebuildTransferReadOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::vector::TransferWriteOp, {anonymous}::getTransferLikeOpSrcMemRef<mlir::vector::TransferWriteOp>, {anonymous}::rebuildTransferWriteOp>",
        "namespace": "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_strided_metadata"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ntid.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::NVVM::BlockDimXOp, mlir::NVVM::BlockDimYOp, mlir::NVVM::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ntid.x"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ntid.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::NVVM::BlockDimXOp, mlir::NVVM::BlockDimYOp, mlir::NVVM::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ntid.y"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ntid.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::NVVM::BlockDimXOp, mlir::NVVM::BlockDimYOp, mlir::NVVM::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ntid.z"
        ]
      }
    ],
    "rocdl.workgroup.dim.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::ROCDL::BlockDimXOp, mlir::ROCDL::BlockDimYOp, mlir::ROCDL::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.dim.x"
        ]
      }
    ],
    "rocdl.workgroup.dim.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::ROCDL::BlockDimXOp, mlir::ROCDL::BlockDimYOp, mlir::ROCDL::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.dim.y"
        ]
      }
    ],
    "rocdl.workgroup.dim.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockDimOp, mlir::ROCDL::BlockDimXOp, mlir::ROCDL::BlockDimYOp, mlir::ROCDL::BlockDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.dim.z"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ctaid.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::NVVM::BlockIdXOp, mlir::NVVM::BlockIdYOp, mlir::NVVM::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ctaid.x"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ctaid.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::NVVM::BlockIdXOp, mlir::NVVM::BlockIdYOp, mlir::NVVM::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ctaid.y"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.ctaid.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::NVVM::BlockIdXOp, mlir::NVVM::BlockIdYOp, mlir::NVVM::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.ctaid.z"
        ]
      }
    ],
    "rocdl.workgroup.id.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::ROCDL::BlockIdXOp, mlir::ROCDL::BlockIdYOp, mlir::ROCDL::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.id.x"
        ]
      }
    ],
    "rocdl.workgroup.id.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::ROCDL::BlockIdXOp, mlir::ROCDL::BlockIdYOp, mlir::ROCDL::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.id.y"
        ]
      }
    ],
    "rocdl.workgroup.id.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::BlockIdOp, mlir::ROCDL::BlockIdXOp, mlir::ROCDL::BlockIdYOp, mlir::ROCDL::BlockIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workgroup.id.z"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.nctaid.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::NVVM::GridDimXOp, mlir::NVVM::GridDimYOp, mlir::NVVM::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.nctaid.x"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.nctaid.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::NVVM::GridDimXOp, mlir::NVVM::GridDimYOp, mlir::NVVM::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.nctaid.y"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.nctaid.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::NVVM::GridDimXOp, mlir::NVVM::GridDimYOp, mlir::NVVM::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.nctaid.z"
        ]
      }
    ],
    "rocdl.grid.dim.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::ROCDL::GridDimXOp, mlir::ROCDL::GridDimYOp, mlir::ROCDL::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.grid.dim.x"
        ]
      }
    ],
    "rocdl.grid.dim.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::ROCDL::GridDimXOp, mlir::ROCDL::GridDimYOp, mlir::ROCDL::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.grid.dim.y"
        ]
      }
    ],
    "rocdl.grid.dim.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::GridDimOp, mlir::ROCDL::GridDimXOp, mlir::ROCDL::GridDimYOp, mlir::ROCDL::GridDimZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.grid.dim.z"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.tid.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::NVVM::ThreadIdXOp, mlir::NVVM::ThreadIdYOp, mlir::NVVM::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.tid.x"
        ]
      },
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.tid.x"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.tid.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::NVVM::ThreadIdXOp, mlir::NVVM::ThreadIdYOp, mlir::NVVM::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.tid.y"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.tid.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::NVVM::ThreadIdXOp, mlir::NVVM::ThreadIdYOp, mlir::NVVM::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.tid.z"
        ]
      }
    ],
    "rocdl.workitem.id.x": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::ROCDL::ThreadIdXOp, mlir::ROCDL::ThreadIdYOp, mlir::ROCDL::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workitem.id.x"
        ]
      }
    ],
    "rocdl.workitem.id.y": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::ROCDL::ThreadIdXOp, mlir::ROCDL::ThreadIdYOp, mlir::ROCDL::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workitem.id.y"
        ]
      }
    ],
    "rocdl.workitem.id.z": [
      {
        "className": "mlir::gpu::index_lowering::OpLowering<mlir::gpu::ThreadIdOp, mlir::ROCDL::ThreadIdXOp, mlir::ROCDL::ThreadIdYOp, mlir::ROCDL::ThreadIdZOp>",
        "namespace": "mlir::gpu::index_lowering",
        "method": "insert op",
        "operations": [
          "rocdl.workitem.id.z"
        ]
      }
    ],
    "spirv.KHR.CooperativeMatrixLoad": [
      {
        "className": "mlir::khr::{anonymous}::WmmaLoadOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.KHR.CooperativeMatrixLoad"
        ]
      }
    ],
    "spirv.KHR.CooperativeMatrixMulAdd": [
      {
        "className": "mlir::khr::{anonymous}::WmmaMmaOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.KHR.CooperativeMatrixMulAdd"
        ]
      }
    ],
    "spirv.KHR.CooperativeMatrixStore": [
      {
        "className": "mlir::khr::{anonymous}::WmmaStoreOpToSPIRVLowering",
        "namespace": "mlir::khr::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.KHR.CooperativeMatrixStore"
        ]
      }
    ],
    "ub.poison": [
      {
        "className": "mlir::linalg::CopyVectorizationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackOpThroughGenericOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::LinearizeConstantLike",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::TransposeOp2DToShuffleLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::UnrollFromElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ub.poison"
        ]
      }
    ],
    "tensor.yield": [
      {
        "className": "mlir::linalg::DecomposeOuterUnitDimsPackOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::DropPadUnitDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithPad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldPadWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldSourceTensorCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticPadding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FoldStaticZeroPadding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::FusePadOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::GenerateToConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::PadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::PadOpToConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackThroughPadOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.yield"
        ]
      }
    ],
    "arith.sitofp": [
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::PowiOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::PowiOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::TruncFSIToFPToSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.sitofp"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.sitofp"
        ]
      }
    ],
    "tensor.generate": [
      {
        "className": "mlir::linalg::DecomposePadOpPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::GenerateToConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::GenerateToConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.generate"
        ]
      },
      {
        "className": "{anonymous}::StaticTensorGenerate",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.generate"
        ]
      }
    ],
    "arith.ori": [
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::NotEqualOp, mlir::arith::CmpFPredicate::UNE>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::OrIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateDeallocMemrefs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ori"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ori"
        ]
      }
    ],
    "scf.if": [
      {
        "className": "mlir::linalg::ExtractSliceOfPadTensorSwapPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::CondBranchTruthPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConditionPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpIToUnsigned",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertIfOpTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::EnterDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::ExitDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::UpdateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedStoreToConditionalStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::IfOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyElseBranch",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyElseBranch",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SelectI1ToNot",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "insert op",
        "operations": [
          "scf.if"
        ]
      }
    ],
    "linalg.abs": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.abs"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.abs"
        ]
      }
    ],
    "linalg.batch_matmul": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::BlockPackMatmul<mlir::linalg::BatchMatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByExpansion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatmulOp, mlir::linalg::MatmulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matmul"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matmul"
        ]
      }
    ],
    "linalg.batch_matvec": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.batch_matvec"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_matvec"
        ]
      }
    ],
    "linalg.batch_reduce_matmul": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.batch_reduce_matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_reduce_matmul"
        ]
      }
    ],
    "linalg.batch_vecmat": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.batch_vecmat"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.batch_vecmat"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchVecmatOp, mlir::linalg::VecmatOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.batch_vecmat"
        ]
      }
    ],
    "linalg.ceil": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.ceil"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.ceil"
        ]
      }
    ],
    "linalg.contract": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.contract"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.contract"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.contract"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.contract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.contract"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.contract"
        ]
      }
    ],
    "linalg.conv_1d_ncw_fcw": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d_ncw_fcw"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_1d_ncw_fcw"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d_ncw_fcw"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_1d_ncw_fcw"
        ]
      }
    ],
    "linalg.conv_1d_nwc_wcf": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d_nwc_wcf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_1d_nwc_wcf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d_nwc_wcf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_1d_nwc_wcf"
        ]
      }
    ],
    "linalg.conv_2d": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_2d"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d"
        ]
      }
    ],
    "linalg.conv_2d_ngchw_gfchw_q": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d_ngchw_gfchw_q"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_2d_ngchw_gfchw_q"
        ]
      }
    ],
    "linalg.copy": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::CollapseLinalgDimensions<mlir::linalg::CopyOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::EraseSelfCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithCopy",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByExpansion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::SubViewOpMemRefCastFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.copy"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.copy"
        ]
      }
    ],
    "linalg.depthwise_conv_2d_nhwc_hwc": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwc"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwc"
        ]
      }
    ],
    "linalg.depthwise_conv_2d_nhwc_hwcm": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm"
        ]
      }
    ],
    "linalg.div": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.div"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.div"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "linalg.div"
        ]
      }
    ],
    "linalg.div_unsigned": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.div_unsigned"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.div_unsigned"
        ]
      }
    ],
    "linalg.dot": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.dot"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.dot"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.dot"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.dot"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.dot"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::VecmatOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.dot"
        ]
      }
    ],
    "linalg.elementwise": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.elementwise"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.elementwise"
        ]
      }
    ],
    "linalg.erf": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.erf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.erf"
        ]
      }
    ],
    "linalg.fill_rng_2d": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.fill_rng_2d"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.fill_rng_2d"
        ]
      }
    ],
    "linalg.floor": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.floor"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.floor"
        ]
      }
    ],
    "linalg.log": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.log"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.log"
        ]
      }
    ],
    "linalg.matvec": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatmulOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceMatmul<mlir::linalg::MatvecOp, mlir::linalg::DotOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::RankReduceToUnBatched<mlir::linalg::BatchMatvecOp, mlir::linalg::MatvecOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.matvec"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.matvec"
        ]
      }
    ],
    "linalg.max": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.max"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.max"
        ]
      }
    ],
    "linalg.min": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.min"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.min"
        ]
      }
    ],
    "linalg.mul": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.mul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.mul"
        ]
      }
    ],
    "linalg.negf": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.negf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.negf"
        ]
      }
    ],
    "linalg.pooling_nhwc_max": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nhwc_max"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nhwc_max"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pooling_nhwc_max"
        ]
      }
    ],
    "linalg.pooling_nhwc_max_unsigned": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nhwc_max_unsigned"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nhwc_max_unsigned"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pooling_nhwc_max_unsigned"
        ]
      }
    ],
    "linalg.pooling_nhwc_min": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nhwc_min"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nhwc_min"
        ]
      }
    ],
    "linalg.pooling_nhwc_min_unsigned": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nhwc_min_unsigned"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nhwc_min_unsigned"
        ]
      }
    ],
    "linalg.pooling_nhwc_sum": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nhwc_sum"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nhwc_sum"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.pooling_nhwc_sum"
        ]
      }
    ],
    "linalg.pooling_nwc_max": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_max"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_max"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_max"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_max"
        ]
      }
    ],
    "linalg.pooling_nwc_max_unsigned": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_max_unsigned"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_max_unsigned"
        ]
      }
    ],
    "linalg.pooling_nwc_min": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_min"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_min"
        ]
      }
    ],
    "linalg.pooling_nwc_min_unsigned": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_min_unsigned"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_min_unsigned"
        ]
      }
    ],
    "linalg.pooling_nwc_sum": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_sum"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_sum"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pooling_nwc_sum"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_nwc_sum"
        ]
      }
    ],
    "linalg.powf": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.powf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.powf"
        ]
      }
    ],
    "linalg.quantized_matmul": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.quantized_matmul"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.quantized_matmul"
        ]
      }
    ],
    "linalg.reciprocal": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.reciprocal"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.reciprocal"
        ]
      }
    ],
    "linalg.round": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.round"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.round"
        ]
      }
    ],
    "linalg.rsqrt": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.rsqrt"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.rsqrt"
        ]
      }
    ],
    "linalg.select": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.select"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.select"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.select"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SelectOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.select"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.select"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.select"
        ]
      }
    ],
    "linalg.sqrt": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.sqrt"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.sqrt"
        ]
      }
    ],
    "linalg.square": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.square"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.square"
        ]
      }
    ],
    "linalg.sub": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.sub"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.sub"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.sub"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.sub"
        ]
      }
    ],
    "linalg.tanh": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "linalg.tanh"
        ]
      },
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "replace op with values",
        "operations": [
          "linalg.tanh"
        ]
      }
    ],
    "arith.truncf": [
      {
        "className": "mlir::linalg::LinalgGeneralizationPattern",
        "namespace": "mlir::linalg",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::EmulateFloatPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ExtendToSupportedTypesRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PushDownExtractSliceOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncFSIToFPToSIToFP",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncFSIToFPToSIToFP",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.truncf"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.truncf"
        ]
      }
    ],
    "func.func": [
      {
        "className": "mlir::linalg::LinalgOpToLibraryCallRewrite",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::AsyncFuncOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::AbsOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::AbsOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::CosOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::CosOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::ExpOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::ExpOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::LogOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::LogOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SinOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SinOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SqrtOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::SqrtOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanhOp, mlir::Float32Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ComplexOpToROCDLLibraryCalls<mlir::complex::TanhOp, mlir::Float64Type>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::AbsOp, {anonymous}::FloatTypeResolver>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::AngleOp, {anonymous}::FloatTypeResolver>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::ConjOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::CoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::ScalarOpToLibmCall<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "func.func"
        ]
      }
    ],
    "arith.divf": [
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "erase op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "mlir::linalg::LinalgSpecializationPattern",
        "namespace": "mlir::linalg",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::DivFOfNegF",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::DivFOfNegF",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::DivFOfNegF",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::FoldFillWithGenericOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::InlineScalarOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ReciprocalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divf"
        ]
      }
    ],
    "linalg.winograd_filter_transform": [
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.winograd_filter_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradFilterTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.winograd_filter_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.winograd_filter_transform"
        ]
      }
    ],
    "linalg.winograd_input_transform": [
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.winograd_input_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradInputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.winograd_input_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.winograd_input_transform"
        ]
      }
    ],
    "linalg.winograd_output_transform": [
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.winograd_output_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::DecomposeWinogradOutputTransform",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.winograd_output_transform"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.winograd_output_transform"
        ]
      }
    ],
    "arith.extf": [
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::DecomposeLinalgOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PrepareContractToGPUMMA",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorScalableExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extf"
        ]
      }
    ],
    "linalg.conv_2d_nhwc_fhwc": [
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d_nhwc_fhwc"
        ]
      },
      {
        "className": "mlir::linalg::{anonymous}::WinogradConv2DNhwcFhwc",
        "namespace": "mlir::linalg::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_2d_nhwc_fhwc"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_fhwc"
        ]
      }
    ],
    "math.erf": [
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "erase op",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "replace op with values",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.erf"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.erf"
        ]
      }
    ],
    "arith.negf": [
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::ConjOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ImOp, 1>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ReOp, 0>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::NegOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SigmoidOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.negf"
        ]
      }
    ],
    "math.fma": [
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::UpliftFma",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fma"
        ]
      }
    ],
    "vector.print": [
      {
        "className": "mlir::math::ErfPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "erase op",
        "operations": [
          "vector.print"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.print"
        ]
      }
    ],
    "math.erfc": [
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "erase op",
        "operations": [
          "math.erfc"
        ]
      },
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "replace op with values",
        "operations": [
          "math.erfc"
        ]
      }
    ],
    "arith.subf": [
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::SubOp, mlir::arith::SubFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::InferStaticShapeOfOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::NamedToElementwisePattern<mlir::linalg::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subf"
        ]
      }
    ],
    "math.absf": [
      {
        "className": "mlir::math::ErfcPolynomialApproximation",
        "namespace": "mlir::math",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::ExtendToSupportedTypesRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AbsFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.absf"
        ]
      }
    ],
    "test.custom_op": [
      {
        "className": "mlir::quant::{anonymous}::ConvertGenericOpwithSubChannelType",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "test.custom_op"
        ]
      }
    ],
    "arith.uitofp": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ConvertUIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.uitofp"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.uitofp"
        ]
      }
    ],
    "quant.scast": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "quant.scast"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "quant.scast"
        ]
      }
    ],
    "shape.num_elements": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.num_elements"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.num_elements"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.num_elements"
        ]
      }
    ],
    "shape.shape_of": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::DimOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfCastExtentTensor",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.shape_of"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.shape_of"
        ]
      }
    ],
    "shape.split_at": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.split_at"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.split_at"
        ]
      }
    ],
    "tensor.from_elements": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ConstShapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::DimOfShapedTypeOpInterface<mlir::tensor::DimOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithFromElements<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.from_elements"
        ]
      }
    ],
    "tensor.reshape": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.reshape"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.reshape"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfFromReshape",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.reshape"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.reshape"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.reshape"
        ]
      }
    ],
    "tensor.splat": [
      {
        "className": "mlir::quant::{anonymous}::DequantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.splat"
        ]
      },
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.splat"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.splat"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.splat"
        ]
      }
    ],
    "arith.fptosi": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptosi"
        ]
      }
    ],
    "arith.fptoui": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptoui"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptoui"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.fptoui"
        ]
      }
    ],
    "arith.maxsi": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::AffineMaxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MaxSIOp, mlir::arith::MaxUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MaxSIOp, mlir::arith::MaxUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxsi"
        ]
      }
    ],
    "arith.maxui": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MaxSIOp, mlir::arith::MaxUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SelectOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxui"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxui"
        ]
      }
    ],
    "arith.minsi": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::AffineForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::AffineMinLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MinSIOp, mlir::arith::MinUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MinSIOp, mlir::arith::MinUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minsi"
        ]
      }
    ],
    "arith.minui": [
      {
        "className": "mlir::quant::{anonymous}::QuantizeCastOpConversion",
        "namespace": "mlir::quant::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minui"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::MinSIOp, mlir::arith::MinUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minui"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minui"
        ]
      }
    ],
    "arith.divsi": [
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::DivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::DivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessMultiIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::IntDivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::PushDownUnPackOpThroughReshapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::ReshapeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divsi"
        ]
      }
    ],
    "arith.subi": [
      {
        "className": "mlir::scf::ForLoopPipeliningPattern",
        "namespace": "mlir::scf",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneLhs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AddIMulNegativeOneRhs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AddISubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::BroadcastOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertFPToSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertNeighborsLinearIndicesOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertSIToFP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertSubI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::ReverseConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SplitAtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceCreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSAddConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSAddConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSAddConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubILHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSAddConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSAddConstant",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantLHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubIRHSSubConstantRHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubISubILHSRHSLHS",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubISubILHSRHSLHS",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::SubISubILHSRHSLHS",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "arith.subi"
        ]
      }
    ],
    "arith.divui": [
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::CeilDivUIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::DivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::FloorDivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.divui"
        ]
      }
    ],
    "arith.remui": [
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::RemSIOp, mlir::arith::RemUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remui"
        ]
      }
    ],
    "shard.grid_shape": [
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.grid_shape"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.grid_shape"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.grid_shape"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::GridShapeFolder",
        "namespace": "mlir::shard::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shard.grid_shape"
        ]
      },
      {
        "className": "mlir::shard::{anonymous}::ProcessMultiIndexOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.grid_shape"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.grid_shape"
        ]
      }
    ],
    "shard.process_multi_index": [
      {
        "className": "mlir::shard::{anonymous}::AllSliceOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.process_multi_index"
        ]
      },
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.process_multi_index"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.process_multi_index"
        ]
      }
    ],
    "shard.process_linear_index": [
      {
        "className": "mlir::shard::{anonymous}::ProcessMultiIndexOpLowering",
        "namespace": "mlir::shard::{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.process_linear_index"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessMultiIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.process_linear_index"
        ]
      }
    ],
    "spirv.FAdd": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::AddFOp, mlir::spirv::FAddOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVDefaultLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToFPDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FAdd"
        ]
      }
    ],
    "spirv.FDiv": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::DivFOp, mlir::spirv::FDivOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FDiv"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVDefaultLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FDiv"
        ]
      }
    ],
    "spirv.UDiv": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::DivUIOp, mlir::spirv::UDivOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.UDiv"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::DivUOp, mlir::spirv::UDivOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.UDiv"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UDiv"
        ]
      }
    ],
    "spirv.CL.s_max": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MaxSIOp, mlir::spirv::CLSMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_max"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_max"
        ]
      }
    ],
    "spirv.GL.SMax": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MaxSIOp, mlir::spirv::GLSMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMax"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::MaxSOp, mlir::spirv::GLSMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMax"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::GLUMaxOp, mlir::spirv::GLUMinOp, mlir::spirv::GLSMaxOp, mlir::spirv::GLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMax"
        ]
      }
    ],
    "spirv.CL.u_max": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MaxUIOp, mlir::spirv::CLUMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.CL.u_max"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.u_max"
        ]
      }
    ],
    "spirv.GL.UMax": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MaxUIOp, mlir::spirv::GLUMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMax"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::MaxUOp, mlir::spirv::GLUMaxOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMax"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::GLUMaxOp, mlir::spirv::GLUMinOp, mlir::spirv::GLSMaxOp, mlir::spirv::GLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMax"
        ]
      }
    ],
    "spirv.CL.s_min": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MinSIOp, mlir::spirv::CLSMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_min"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_min"
        ]
      }
    ],
    "spirv.GL.SMin": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MinSIOp, mlir::spirv::GLSMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMin"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::MinSOp, mlir::spirv::GLSMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMin"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::GLUMaxOp, mlir::spirv::GLUMinOp, mlir::spirv::GLSMaxOp, mlir::spirv::GLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SMin"
        ]
      }
    ],
    "spirv.CL.u_min": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MinUIOp, mlir::spirv::CLUMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.CL.u_min"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.u_min"
        ]
      }
    ],
    "spirv.GL.UMin": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MinUIOp, mlir::spirv::GLUMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMin"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::MinUOp, mlir::spirv::GLUMinOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMin"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::GLUMaxOp, mlir::spirv::GLUMinOp, mlir::spirv::GLSMaxOp, mlir::spirv::GLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UMin"
        ]
      }
    ],
    "spirv.FMul": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::MulFOp, mlir::spirv::FMulOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVDefaultLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FMul"
        ]
      }
    ],
    "spirv.FNegate": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::NegFOp, mlir::spirv::FNegateOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FNegate"
        ]
      },
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVDefaultLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FNegate"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FNegate"
        ]
      }
    ],
    "spirv.FRem": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::RemFOp, mlir::spirv::FRemOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FRem"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FRem"
        ]
      }
    ],
    "spirv.ShiftRightArithmetic": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::ShRSIOp, mlir::spirv::ShiftRightArithmeticOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightArithmetic"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::ShrSOp, mlir::spirv::ShiftRightArithmeticOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightArithmetic"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightArithmetic"
        ]
      },
      {
        "className": "{anonymous}::ExtSIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightArithmetic"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightArithmetic"
        ]
      }
    ],
    "spirv.ShiftRightLogical": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::ShRUIOp, mlir::spirv::ShiftRightLogicalOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightLogical"
        ]
      },
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::ShrUOp, mlir::spirv::ShiftRightLogicalOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightLogical"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightLogical"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftRightLogical"
        ]
      }
    ],
    "spirv.FSub": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::arith::SubFOp, mlir::spirv::FSubOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.FSub"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::CLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FSub"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::GLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FSub"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FSub"
        ]
      }
    ],
    "spirv.BitwiseAnd": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::AndOp, mlir::spirv::BitwiseAndOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::BitwiseOpPattern<mlir::arith::AndIOp, mlir::spirv::LogicalAndOp, mlir::spirv::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::CopySignPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::ExtUIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::TruncII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::TruncIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseAnd"
        ]
      }
    ],
    "spirv.BitwiseOr": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::OrOp, mlir::spirv::BitwiseOrOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseOr"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseOr"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseOr"
        ]
      },
      {
        "className": "{anonymous}::BitwiseOpPattern<mlir::arith::OrIOp, mlir::spirv::LogicalOrOp, mlir::spirv::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseOr"
        ]
      },
      {
        "className": "{anonymous}::CopySignPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseOr"
        ]
      }
    ],
    "spirv.SRem": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::RemSOp, mlir::spirv::SRemOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.SRem"
        ]
      }
    ],
    "spirv.ShiftLeftLogical": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::ShlOp, mlir::spirv::ShiftLeftLogicalOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "{anonymous}::ElementwiseArithOpPattern<mlir::arith::ShLIOp, mlir::spirv::ShiftLeftLogicalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "{anonymous}::ExtSIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ShiftLeftLogical"
        ]
      }
    ],
    "spirv.ISub": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::SubOp, mlir::spirv::ISubOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      },
      {
        "className": "{anonymous}::CountLeadingZerosPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      },
      {
        "className": "{anonymous}::ElementwiseArithOpPattern<mlir::arith::SubIOp, mlir::spirv::ISubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ISub"
        ]
      }
    ],
    "spirv.BitwiseXor": [
      {
        "className": "mlir::spirv::ElementwiseOpPattern<mlir::index::XOrOp, mlir::spirv::BitwiseXorOp>",
        "namespace": "mlir::spirv",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseXor"
        ]
      },
      {
        "className": "{anonymous}::XOrIOpLogicalPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitwiseXor"
        ]
      }
    ],
    "spirv.EXT.ConstantCompositeReplicate": [
      {
        "className": "mlir::spirv::{anonymous}::ConstantOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.EXT.ConstantCompositeReplicate"
        ]
      }
    ],
    "spirv.ReturnValue": [
      {
        "className": "mlir::spirv::{anonymous}::ConstantOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsInfPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsNanPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::SMulExtendedOp, true>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandMulExtendedPattern<mlir::spirv::UMulExtendedOp, false>",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertGLLengthToGLFAbs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfIEqual",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfINotEqual",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalEqual",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalNotEqual",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ReturnValue"
        ]
      },
      {
        "className": "{anonymous}::SelectionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ReturnValue"
        ]
      }
    ],
    "spirv.Select": [
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::CountLeadingZerosPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ExtSII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::ExtUII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::IndexCastI1IndexPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MaxNumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MinNumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::CLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpGLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::SelectOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::TruncII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::UIToFPI1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Select"
        ]
      }
    ],
    "spirv.ULessThan": [
      {
        "className": "mlir::spirv::{anonymous}::ExpandAddCarryPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThan"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThan"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThan"
        ]
      }
    ],
    "spirv.IsInf": [
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsInfPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.IsInf"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsInfPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.IsInf"
        ]
      },
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::IsInfOp, mlir::spirv::IsInfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsInf"
        ]
      }
    ],
    "spirv.IsNan": [
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsNanPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::ExpandIsNanPattern",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::IsNaNOp, mlir::spirv::IsNanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpNanNonePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MaxNumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MinNumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::CLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsNan"
        ]
      }
    ],
    "spirv.SpecConstantComposite": [
      {
        "className": "mlir::spirv::{anonymous}::SpecConstantCompositeOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.SpecConstantComposite"
        ]
      },
      {
        "className": "mlir::spirv::{anonymous}::SpecConstantCompositeOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.SpecConstantComposite"
        ]
      },
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SpecConstantComposite"
        ]
      }
    ],
    "spirv.EXT.SpecConstantCompositeReplicate": [
      {
        "className": "mlir::spirv::{anonymous}::SpecConstantCompositeOpConversion",
        "namespace": "mlir::spirv::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.EXT.SpecConstantCompositeReplicate"
        ]
      }
    ],
    "tosa.add": [
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.add"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.add"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tosa.add"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.add"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.add"
        ]
      }
    ],
    "tosa.cond_if": [
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cond_if"
        ]
      }
    ],
    "tosa.sub": [
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.sub"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.sub"
        ]
      }
    ],
    "tosa.yield": [
      {
        "className": "mlir::tosa::{anonymous}::ConvertGenericOpWithIntegerTensorType",
        "namespace": "mlir::tosa::{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.yield"
        ]
      },
      {
        "className": "{anonymous}::IfOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.yield"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.yield"
        ]
      }
    ],
    "builtin.unrealized_conversion_cast": [
      {
        "className": "mlir::xegpu::doSCFStructuralTypeConversionWithTensorType(mlir::Operation*, mlir::TypeConverter)::UnrealizedConversionCastOpPattern",
        "namespace": "mlir::xegpu::doSCFStructuralTypeConversionWithTensorType(mlir::Operation*, mlir::TypeConverter)",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardingOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskTypeCastConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "builtin.unrealized_conversion_cast"
        ]
      }
    ],
    "math.cos": [
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "erase op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cos"
        ]
      }
    ],
    "vcix.v.iv": [
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vcix.v.iv"
        ]
      }
    ],
    "vector.scalable.extract": [
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LegalizeVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorScalableExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorScalableExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.extract"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorScalableExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.scalable.extract"
        ]
      }
    ],
    "vector.scalable.insert": [
      {
        "className": "mlir::{anonymous}::MathCosToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      },
      {
        "className": "{anonymous}::ScalableShapeCastOpRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scalable.insert"
        ]
      }
    ],
    "math.log": [
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::LogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log"
        ]
      }
    ],
    "vcix.v.sv": [
      {
        "className": "mlir::{anonymous}::MathLogToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vcix.v.sv"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathSinToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vcix.v.sv"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "vcix.v.sv"
        ]
      }
    ],
    "math.tan": [
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "erase op",
        "operations": [
          "math.tan"
        ]
      },
      {
        "className": "mlir::{anonymous}::MathTanToVCIX",
        "namespace": "mlir::{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.tan"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tan"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tan"
        ]
      }
    ],
    "spirv.FConvert": [
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVDefaultLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FConvert"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::ExtFOp, mlir::spirv::FConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FConvert"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::TruncFOp, mlir::spirv::FConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FConvert"
        ]
      }
    ],
    "spirv.MatrixTimesScalar": [
      {
        "className": "mlir::{anonymous}::WmmaElementwiseOpToSPIRVScalarMulLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.MatrixTimesScalar"
        ]
      }
    ],
    "spirv.CompositeExtract": [
      {
        "className": "mlir::{anonymous}::WmmaExtractOpToSPIRVLowering",
        "namespace": "mlir::{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::ImOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::ImageLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockDimOp, mlir::spirv::BuiltIn::WorkgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockIdOp, mlir::spirv::BuiltIn::WorkgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GlobalIdOp, mlir::spirv::BuiltIn::GlobalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GridDimOp, mlir::spirv::BuiltIn::NumWorkgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::ThreadIdOp, mlir::spirv::BuiltIn::LocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpPattern<mlir::arith::MulSIExtendedOp, mlir::spirv::SMulExtendedOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::MulIExtendedOpPattern<mlir::arith::MulUIExtendedOp, mlir::spirv::UMulExtendedOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::ReOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorDeinterleaveOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractStridedSliceOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::CLFMaxOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::GLFMaxOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::CLUMaxOp, mlir::spirv::CLUMinOp, mlir::spirv::CLSMaxOp, mlir::spirv::CLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionPattern<mlir::spirv::GLUMaxOp, mlir::spirv::GLUMinOp, mlir::spirv::GLSMaxOp, mlir::spirv::GLSMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      },
      {
        "className": "{anonymous}::VectorToElementOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CompositeExtract"
        ]
      }
    ],
    "llvm.mlir.undef": [
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::UndefOp, mlir::LLVM::UndefOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::GetMetadataOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::GlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockPrefetch2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockStore2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedStochRoundFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      },
      {
        "className": "{anonymous}::{anonymous}::PackedTrunc2xFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.undef"
        ]
      }
    ],
    "rocdl.update.dpp": [
      {
        "className": "{anonymous}::AMDGPUDPPLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.update.dpp"
        ]
      }
    ],
    "rocdl.permlane16.swap": [
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.permlane16.swap"
        ]
      }
    ],
    "rocdl.permlane32.swap": [
      {
        "className": "{anonymous}::AMDGPUPermlaneLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.permlane32.swap"
        ]
      }
    ],
    "rocdl.ds_swizzle": [
      {
        "className": "{anonymous}::AMDGPUSwizzleBitModeLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds_swizzle"
        ]
      }
    ],
    "llvm.call_intrinsic": [
      {
        "className": "{anonymous}::AMXIntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call_intrinsic"
        ]
      },
      {
        "className": "{anonymous}::X86IntrinsicOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.call_intrinsic"
        ]
      }
    ],
    "arith.maximumf": [
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::MaxPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MaximumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maximumf"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.maximumf"
        ]
      }
    ],
    "arith.minimumf": [
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClampOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MinimumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minimumf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minimumf"
        ]
      }
    ],
    "complex.im": [
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::AngleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::AddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::SubOp, mlir::arith::SubFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::EqualOp, mlir::arith::CmpFPredicate::OEQ>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::NotEqualOp, mlir::arith::CmpFPredicate::UNE>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::ConjOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ImOp, 1>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ImOp, 1>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::NegOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.im"
        ]
      }
    ],
    "complex.re": [
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::AngleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::AddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::SubOp, mlir::arith::SubFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::EqualOp, mlir::arith::CmpFPredicate::OEQ>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::NotEqualOp, mlir::arith::CmpFPredicate::UNE>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::ConjOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ReOp, 0>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::FoldComponentNeg<mlir::complex::ReOp, 0>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::NegOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.re"
        ]
      }
    ],
    "math.sqrt": [
      {
        "className": "{anonymous}::AbsOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimFromElementwiseOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::DropUnitDimsFromScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::SqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.sqrt"
        ]
      }
    ],
    "math.acos": [
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.acos"
        ]
      },
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.acos"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.acos"
        ]
      }
    ],
    "arith.andi": [
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AffineIfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AndOfExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ArgMaxConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::CeilDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ComparisonOpConversion<mlir::complex::EqualOp, mlir::arith::CmpFPredicate::OEQ>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ConvertBitwiseBinary<mlir::arith::AndIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ConvertCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::FloorDivSIOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::FuseElementwiseOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::IsBroadcastableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::MaterializeTransferMask<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::ShapeEqOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.andi"
        ]
      },
      {
        "className": "{anonymous}::XOrINotCmpI",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.andi"
        ]
      }
    ],
    "math.asin": [
      {
        "className": "{anonymous}::AcosPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.asin"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.asin"
        ]
      },
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.asin"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.asin"
        ]
      }
    ],
    "async.runtime.add_to_group": [
      {
        "className": "{anonymous}::AddToGroupOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.add_to_group"
        ]
      }
    ],
    "llvm.intr.uadd.with.overflow": [
      {
        "className": "{anonymous}::AddUIExtendedOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.uadd.with.overflow"
        ]
      }
    ],
    "spirv.IEqual": [
      {
        "className": "{anonymous}::AddUIExtendedOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivUPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfINotEqual",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpGLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::TruncII1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IEqual"
        ]
      }
    ],
    "arith.addui_extended": [
      {
        "className": "{anonymous}::AddUIExtendedToAddI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.addui_extended"
        ]
      },
      {
        "className": "{anonymous}::AddUIExtendedToAddI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.addui_extended"
        ]
      },
      {
        "className": "{anonymous}::ConvertAddI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.addui_extended"
        ]
      }
    ],
    "arith.remsi": [
      {
        "className": "{anonymous}::AffineApplyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::RemSIOp, mlir::arith::RemUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::RemSIOp, mlir::arith::RemUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessMultiIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShardShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::DeleteTrivialRem<mlir::arith::RemSIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::DeleteTrivialRem<mlir::arith::RemSIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::FoldReshapeWithGenericOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::FoldWithProducerReshapeOpByCollapsing",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.remsi"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remsi"
        ]
      }
    ],
    "memref.dma_start": [
      {
        "className": "{anonymous}::AffineDmaStartLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dma_start"
        ]
      }
    ],
    "memref.dma_wait": [
      {
        "className": "{anonymous}::AffineDmaWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dma_wait"
        ]
      }
    ],
    "affine.for": [
      {
        "className": "{anonymous}::AffineForEmptyLoopFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.for"
        ]
      },
      {
        "className": "{anonymous}::AffineForEmptyLoopFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.for"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.for"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.for"
        ]
      }
    ],
    "affine.yield": [
      {
        "className": "{anonymous}::AffineForEmptyLoopFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.yield"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadElse",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.yield"
        ]
      }
    ],
    "scf.parallel": [
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ForallLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.parallel"
        ]
      }
    ],
    "scf.reduce": [
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ForallLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::MergeNestedParallelLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce"
        ]
      }
    ],
    "scf.reduce.return": [
      {
        "className": "{anonymous}::AffineParallelLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce.return"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce.return"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.reduce.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.reduce.return"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.reduce.return"
        ]
      }
    ],
    "memref.prefetch": [
      {
        "className": "{anonymous}::AffinePrefetchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.prefetch"
        ]
      }
    ],
    "vector.load": [
      {
        "className": "{anonymous}::AffineVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ExpandLoadFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ExtractOpFromLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.load"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.load"
        ]
      }
    ],
    "vector.store": [
      {
        "className": "{anonymous}::AffineVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::CompressStoreFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedStoreToConditionalStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::MaskedStoreFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpFromSplatOrBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpFromSplatOrBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpFromSplatOrBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStorePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStorePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.store"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.store"
        ]
      }
    ],
    "llvm.inttoptr": [
      {
        "className": "{anonymous}::AllReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::GetGlobalMemrefOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::StoreScatterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::PrefetchToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::RecvOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::SendOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.inttoptr"
        ]
      }
    ],
    "llvm.addrspacecast": [
      {
        "className": "{anonymous}::AllocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemcpyOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemsetOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      },
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.addrspacecast"
        ]
      }
    ],
    "spirv.GlobalVariable": [
      {
        "className": "{anonymous}::AllocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockDimOp, mlir::spirv::BuiltIn::WorkgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockIdOp, mlir::spirv::BuiltIn::WorkgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GlobalIdOp, mlir::spirv::BuiltIn::GlobalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GridDimOp, mlir::spirv::BuiltIn::NumWorkgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::ThreadIdOp, mlir::spirv::BuiltIn::LocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::ProcessGraphInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::ProcessInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::SPIRVGlobalVariableOpLayoutInfoDecoration",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::LaneIdOp, mlir::spirv::BuiltIn::SubgroupLocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::NumSubgroupsOp, mlir::spirv::BuiltIn::NumSubgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupIdOp, mlir::spirv::BuiltIn::SubgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupSizeOp, mlir::spirv::BuiltIn::SubgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GlobalVariable"
        ]
      }
    ],
    "memref.dealloc": [
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::AllocToAllocaPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefDealloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::ReallocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDeallocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.dealloc"
        ]
      }
    ],
    "spirv.Variable": [
      {
        "className": "{anonymous}::AllocaOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Variable"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Variable"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Variable"
        ]
      },
      {
        "className": "{anonymous}::TensorExtractPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Variable"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Variable"
        ]
      }
    ],
    "llvm.br": [
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::BranchConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::BranchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::LoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      },
      {
        "className": "{anonymous}::SelectionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.br"
        ]
      }
    ],
    "llvm.intr.stackrestore": [
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stackrestore"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stackrestore"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stackrestore"
        ]
      }
    ],
    "llvm.intr.stacksave": [
      {
        "className": "{anonymous}::AllocaScopeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stacksave"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stacksave"
        ]
      }
    ],
    "affine.if": [
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.if"
        ]
      },
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.if"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadElse",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.if"
        ]
      }
    ],
    "bar": [
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bar"
        ]
      }
    ],
    "foo": [
      {
        "className": "{anonymous}::AlwaysTrueOrFalseIf",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "foo"
        ]
      }
    ],
    "arith.extsi": [
      {
        "className": "{anonymous}::AndOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeContractMatmulToMMT",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::CombineTransferReadOpTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIndexToInt<mlir::arith::IndexCastOp, mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::ExtSIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::ExtSIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ExtSIOfExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ExtSIOfExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::FoldScalarOrSplatConstant",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::OrOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderCastOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::ResizeUnaryConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::SwapVectorExtractOfArithExtend",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtSIToExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      },
      {
        "className": "{anonymous}::XOrIOfExtSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.extsi"
        ]
      }
    ],
    "math.atan2": [
      {
        "className": "{anonymous}::AngleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Atan2Op>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan2"
        ]
      }
    ],
    "foo.region": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.region"
        ]
      }
    ],
    "test.illegal_op_a": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_a"
        ]
      }
    ],
    "test.illegal_op_f": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestCreateIllegalBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestNonRootReplacement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestRegionRewriteUndo",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestUndoBlockErase",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestUndoBlocksMerge",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      },
      {
        "className": "{anonymous}::TestUndoMoveOpBefore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_f"
        ]
      }
    ],
    "test.invalid": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.invalid"
        ]
      },
      {
        "className": "{anonymous}::TestDropOpSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.invalid"
        ]
      },
      {
        "className": "{anonymous}::TestRegionRewriteBlockMovement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.invalid"
        ]
      }
    ],
    "test.op_with_region_fold": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_with_region_fold"
        ]
      }
    ],
    "test.region_builder": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.region_builder"
        ]
      }
    ],
    "test.return": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.return"
        ]
      },
      {
        "className": "{anonymous}::TestDetachedSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.return"
        ]
      },
      {
        "className": "{anonymous}::TestRemapValueInRegion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.return"
        ]
      },
      {
        "className": "{anonymous}::TestSelectiveOpReplacementPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.return"
        ]
      },
      {
        "className": "{anonymous}::TestSplitReturnType",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.return"
        ]
      }
    ],
    "test.type_consumer": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_consumer"
        ]
      },
      {
        "className": "{anonymous}::TestRemapValueInRegion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_consumer"
        ]
      },
      {
        "className": "{anonymous}::TestUpdateConsumerType",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_consumer"
        ]
      }
    ],
    "test.valid": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid"
        ]
      },
      {
        "className": "{anonymous}::TestDropAndReplaceInvalidOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid"
        ]
      },
      {
        "className": "{anonymous}::TestPassthroughInvalidOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid"
        ]
      },
      {
        "className": "{anonymous}::TestRegionRewriteUndo",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid"
        ]
      },
      {
        "className": "{anonymous}::TestRepetitive1ToNConsumer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid"
        ]
      }
    ],
    "work": [
      {
        "className": "{anonymous}::AnyFunctionOpInterfaceSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "work"
        ]
      }
    ],
    "arith.mulsi_extended": [
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mulsi_extended"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulsi_extended"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedRHSOne",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulsi_extended"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mulsi_extended"
        ]
      },
      {
        "className": "{anonymous}::MulSIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mulsi_extended"
        ]
      }
    ],
    "arith.shli": [
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::BFloat16ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0ExtFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shli"
        ]
      }
    ],
    "arith.shrsi": [
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrsi"
        ]
      }
    ],
    "arith.shrui": [
      {
        "className": "{anonymous}::ApplyScale32BitOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::ConvertShLI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRSI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::ConvertShRUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::LogApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::LogicalRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtOfBitCast<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::TableConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.shrui"
        ]
      }
    ],
    "arith.trunci": [
      {
        "className": "{anonymous}::ApplyScaleGenericOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::BFloat16TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::ConvertTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::DetensorizeGenericOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::F8E8M0TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ArithmeticRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::NegateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::RewriteVectorTranspose",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::SparseConvertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtSIToExtSI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtSIToExtSI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtUIToExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIExtUIToExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.trunci"
        ]
      },
      {
        "className": "{anonymous}::TruncIShrSIToTrunciShrUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.trunci"
        ]
      }
    ],
    "emitc.constant": [
      {
        "className": "{anonymous}::ArithConstantOpConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertAlloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::ConvertCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::SignedCastConversion<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::TruncIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.constant"
        ]
      }
    ],
    "emitc.add": [
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::AddFOp, mlir::emitc::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.add"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.add"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.add"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::AddIOp, mlir::emitc::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.add"
        ]
      }
    ],
    "emitc.div": [
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::DivFOp, mlir::emitc::DivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.div"
        ]
      },
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::DivSIOp, mlir::emitc::DivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.div"
        ]
      },
      {
        "className": "{anonymous}::BinaryUIOpConversion<mlir::arith::DivUIOp, mlir::emitc::DivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.div"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.div"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.div"
        ]
      }
    ],
    "emitc.mul": [
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::MulFOp, mlir::emitc::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::ConvertAlloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::ConvertCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::MulIOp, mlir::emitc::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.mul"
        ]
      }
    ],
    "emitc.rem": [
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::RemSIOp, mlir::emitc::RemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.rem"
        ]
      },
      {
        "className": "{anonymous}::BinaryUIOpConversion<mlir::arith::RemUIOp, mlir::emitc::RemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.rem"
        ]
      }
    ],
    "emitc.sub": [
      {
        "className": "{anonymous}::ArithOpConversion<mlir::arith::SubFOp, mlir::emitc::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.sub"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.sub"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.sub"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::SubIOp, mlir::emitc::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.sub"
        ]
      }
    ],
    "math.copysign": [
      {
        "className": "{anonymous}::AsinPolynomialApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.copysign"
        ]
      }
    ],
    "llvm.cond_br": [
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      },
      {
        "className": "{anonymous}::BranchConditionalConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      },
      {
        "className": "{anonymous}::CondBranchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      },
      {
        "className": "{anonymous}::SelectionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cond_br"
        ]
      }
    ],
    "llvm.load": [
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::CommRankOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::CommSplitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertExtractAlignedPointerAsIndex",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::ConvertSpMatGetSizeOpToGpuRuntimeCallPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::DimOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePattern<mlir::spirv::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchToOCLPattern<mlir::xevm::BlockLoad2dOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreToXeVMPattern<mlir::xegpu::LoadGatherOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefReinterpretCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::RuntimeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.load"
        ]
      }
    ],
    "llvm.unreachable": [
      {
        "className": "{anonymous}::AssertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.unreachable"
        ]
      }
    ],
    "gpu.return": [
      {
        "className": "{anonymous}::AssertOpToAssertfailLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.return"
        ]
      }
    ],
    "llvm.intr.assume": [
      {
        "className": "{anonymous}::AssumeAlignmentOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.assume"
        ]
      }
    ],
    "shape.assuming_all": [
      {
        "className": "{anonymous}::AssumingAllOfCstrBroadcastable",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOfCstrBroadcastable",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOfCstrBroadcastable",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOneOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOneOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllToCstrEqCanonicalization",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllToCstrEqCanonicalization",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::MergeAssumingAllOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::MergeAssumingAllOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::MergeAssumingAllOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::AssumingAllOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::AssumingAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming_all"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::AssumingAllOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_all"
        ]
      }
    ],
    "shape.cstr_broadcastable": [
      {
        "className": "{anonymous}::AssumingAllOfCstrBroadcastable",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableEqOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableEqOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableToRequire",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableToRequire",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrBroadcastableOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrBroadcastableOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.cstr_broadcastable"
        ]
      }
    ],
    "consume.witness": [
      {
        "className": "{anonymous}::AssumingAllOfCstrBroadcastable",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::AssumingAllOneOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableEqOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::CstrEqEqOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::MergeAssumingAllOps",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::CstrBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "consume.witness"
        ]
      }
    ],
    "shape.cstr_eq": [
      {
        "className": "{anonymous}::AssumingAllToCstrEqCanonicalization",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::CstrEqEqOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::CstrEqEqOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::CstrEqToRequire",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::CstrEqToRequire",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrEqOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_eq"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrEqOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_eq"
        ]
      }
    ],
    "shape.assuming": [
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrBroadcastableOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.assuming"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrEqOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.assuming"
        ]
      }
    ],
    "shape.assuming_yield": [
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_yield"
        ]
      },
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.assuming_yield"
        ]
      },
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.assuming_yield"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.assuming_yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.assuming_yield"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.assuming_yield"
        ]
      }
    ],
    "use": [
      {
        "className": "{anonymous}::AssumingOpRemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "use"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "use"
        ]
      }
    ],
    "test.sink": [
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.sink"
        ]
      },
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.sink"
        ]
      }
    ],
    "test.source": [
      {
        "className": "{anonymous}::AssumingWithTrue",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.source"
        ]
      }
    ],
    "arith.ceildivsi": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ceildivsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::CeilDivSIOp, mlir::arith::CeilDivUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.ceildivsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::CeilDivSIOp, mlir::arith::CeilDivUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.ceildivsi"
        ]
      }
    ],
    "async.add_to_group": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.add_to_group"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.add_to_group"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "async.add_to_group"
        ]
      }
    ],
    "async.await_all": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.await_all"
        ]
      },
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.await_all"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "async.await_all"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.await_all"
        ]
      }
    ],
    "async.create_group": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.create_group"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "async.create_group"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.create_group"
        ]
      }
    ],
    "async.execute": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.execute"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.execute"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "async.execute"
        ]
      }
    ],
    "async.runtime.num_worker_threads": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.num_worker_threads"
        ]
      }
    ],
    "scf.condition": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.condition"
        ]
      }
    ],
    "scf.while": [
      {
        "className": "{anonymous}::AsyncParallelForRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::ConvertWhileOpTypes",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::DoWhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::ForLoopLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::RotateWhileLoopPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::SparseIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.while"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.while"
        ]
      }
    ],
    "math.atan": [
      {
        "className": "{anonymous}::Atan2Approximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::AtanApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.atan"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atan"
        ]
      }
    ],
    "complex.add": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.add"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.add"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.add"
        ]
      }
    ],
    "complex.create": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::AddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::BinaryComplexOpConversion<mlir::complex::SubOp, mlir::arith::SubFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::ConjOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::CosOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::ExpOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::MulOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::NegOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::PowiOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::PowiOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::SinOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.create"
        ]
      }
    ],
    "complex.div": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.div"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.div"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.div"
        ]
      }
    ],
    "complex.log": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.log"
        ]
      },
      {
        "className": "{anonymous}::PowOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.log"
        ]
      }
    ],
    "complex.mul": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.mul"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.mul"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.mul"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::complex::PowiOp, mlir::complex::DivOp, mlir::complex::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.mul"
        ]
      },
      {
        "className": "{anonymous}::PowOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.mul"
        ]
      }
    ],
    "complex.sqrt": [
      {
        "className": "{anonymous}::Atan2OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.sqrt"
        ]
      }
    ],
    "llvm.atomicrmw": [
      {
        "className": "{anonymous}::AtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.atomicrmw"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.atomicrmw"
        ]
      }
    ],
    "spirv.AtomicAnd": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicAnd"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicAnd"
        ]
      }
    ],
    "spirv.AtomicIAdd": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicIAdd"
        ]
      }
    ],
    "spirv.AtomicOr": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicOr"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicOr"
        ]
      }
    ],
    "spirv.AtomicSMax": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicSMax"
        ]
      }
    ],
    "spirv.AtomicSMin": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicSMin"
        ]
      }
    ],
    "spirv.AtomicUMax": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicUMax"
        ]
      }
    ],
    "spirv.AtomicUMin": [
      {
        "className": "{anonymous}::AtomicRMWOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicUMin"
        ]
      }
    ],
    "math.ctlz": [
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ctlz"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::ClzOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ctlz"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ctlz"
        ]
      }
    ],
    "tosa.apply_scale": [
      {
        "className": "{anonymous}::AvgPool2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.apply_scale"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.apply_scale"
        ]
      },
      {
        "className": "{anonymous}::RescaleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.apply_scale"
        ]
      }
    ],
    "async.coro.save": [
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.save"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.save"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.save"
        ]
      }
    ],
    "async.coro.suspend": [
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.suspend"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.suspend"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.coro.suspend"
        ]
      }
    ],
    "async.runtime.await": [
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await"
        ]
      }
    ],
    "async.runtime.await_and_resume": [
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await_and_resume"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await_and_resume"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.await_and_resume"
        ]
      }
    ],
    "async.runtime.is_error": [
      {
        "className": "{anonymous}::AwaitAllOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.is_error"
        ]
      },
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.is_error"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.is_error"
        ]
      }
    ],
    "async.await": [
      {
        "className": "{anonymous}::AwaitTokenOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.await"
        ]
      },
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.await"
        ]
      }
    ],
    "async.runtime.load": [
      {
        "className": "{anonymous}::AwaitValueOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.load"
        ]
      }
    ],
    "gpu.barrier": [
      {
        "className": "{anonymous}::BarrierElimination",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.barrier"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.barrier"
        ]
      },
      {
        "className": "{anonymous}::GpuBarrierDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.barrier"
        ]
      },
      {
        "className": "{anonymous}::GpuBarrierDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.barrier"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.barrier"
        ]
      }
    ],
    "emitc.cast": [
      {
        "className": "{anonymous}::BinaryUIOpConversion<mlir::arith::DivUIOp, mlir::emitc::DivOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::BinaryUIOpConversion<mlir::arith::RemUIOp, mlir::emitc::RemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::AndIOp, mlir::emitc::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::OrIOp, mlir::emitc::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::XOrIOp, mlir::emitc::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertAlloc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::FpCastOpConversion<mlir::arith::ExtFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::FpCastOpConversion<mlir::arith::TruncFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::FtoICastOpConversion<mlir::arith::FPToSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::FtoICastOpConversion<mlir::arith::FPToUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::AddIOp, mlir::emitc::AddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::MulIOp, mlir::emitc::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::IntegerOpConversion<mlir::arith::SubIOp, mlir::emitc::SubOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::ItoFCastOpConversion<mlir::arith::SIToFPOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::ItoFCastOpConversion<mlir::arith::UIToFPOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::SignedCastConversion<mlir::arith::ExtSIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::SignedCastConversion<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::TruncIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cast"
        ]
      }
    ],
    "emitc.bitwise_and": [
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::AndIOp, mlir::emitc::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_and"
        ]
      },
      {
        "className": "{anonymous}::SignedCastConversion<mlir::arith::IndexCastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_and"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_and"
        ]
      },
      {
        "className": "{anonymous}::UnsignedCastConversion<mlir::arith::TruncIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_and"
        ]
      }
    ],
    "emitc.bitwise_or": [
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::OrIOp, mlir::emitc::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_or"
        ]
      }
    ],
    "emitc.bitwise_xor": [
      {
        "className": "{anonymous}::BitwiseOpConversion<mlir::arith::XOrIOp, mlir::emitc::BitwiseXorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_xor"
        ]
      }
    ],
    "spirv.LogicalAnd": [
      {
        "className": "{anonymous}::BitwiseOpPattern<mlir::arith::AndIOp, mlir::spirv::LogicalAndOp, mlir::spirv::BitwiseAndOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalAnd"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalAnd"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalAnd"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalAnd"
        ]
      }
    ],
    "spirv.LogicalOr": [
      {
        "className": "{anonymous}::BitwiseOpPattern<mlir::arith::OrIOp, mlir::spirv::LogicalOrOp, mlir::spirv::BitwiseOrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalOr"
        ]
      },
      {
        "className": "{anonymous}::CmpFOpNanNonePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalOr"
        ]
      }
    ],
    "spirv.Branch": [
      {
        "className": "{anonymous}::BranchOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Branch"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.Branch"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Branch"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Branch"
        ]
      },
      {
        "className": "{anonymous}::TerminatorOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Branch"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Branch"
        ]
      }
    ],
    "gpu.subgroup_reduce": [
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_reduce"
        ]
      }
    ],
    "test.consume": [
      {
        "className": "{anonymous}::BreakDownSubgroupReduce",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::ScalarizeSingleElementReduce",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consume"
        ]
      }
    ],
    "vector.bitcast": [
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorBitCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownBitCastForStridedSliceExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownVectorBitCastForExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForInsert",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForInsert",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::BubbleUpBitCastForStridedSliceInsert",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorBitCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::RewriteBitCastOfTruncI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::UnrollBitCastOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.bitcast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.bitcast"
        ]
      }
    ],
    "vector.reduction": [
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ChainedReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::FuncOpVectorUnroll",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceRedundantZero",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceRedundantZero",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceRedundantZero",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollReductionPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.reduction"
        ]
      }
    ],
    "arith.maxnumf": [
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxnumf"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxnumf"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxnumf"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxnumf"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.maxnumf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.maxnumf"
        ]
      }
    ],
    "arith.minnumf": [
      {
        "className": "{anonymous}::BreakDownVectorReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minnumf"
        ]
      },
      {
        "className": "{anonymous}::F4E2M1TruncFOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minnumf"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minnumf"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.minnumf"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.minnumf"
        ]
      }
    ],
    "shape.broadcast": [
      {
        "className": "{anonymous}::BroadcastConcretizeResultTypePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastConcretizeResultTypePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastConcretizeResultTypePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFoldConstantOperandsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFoldConstantOperandsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastFoldConstantOperandsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastForwardSingleOperandPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::BroadcastForwardSingleOperandPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::CanonicalizeCastExtentTensorOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.broadcast"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "shape.broadcast"
        ]
      }
    ],
    "shape.const_shape": [
      {
        "className": "{anonymous}::BroadcastFoldConstantOperandsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_shape"
        ]
      },
      {
        "className": "{anonymous}::RemoveEmptyShapeOperandsPattern<mlir::shape::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_shape"
        ]
      },
      {
        "className": "{anonymous}::ShapeOfOpToConstShapeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_shape"
        ]
      }
    ],
    "shape.from_extent_tensor": [
      {
        "className": "{anonymous}::BroadcastForwardSingleOperandPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.from_extent_tensor"
        ]
      }
    ],
    "arm_sme.get_tile": [
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      },
      {
        "className": "{anonymous}::ZeroOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.get_tile"
        ]
      }
    ],
    "arm_sme.insert_tile_slice": [
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.insert_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.insert_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.insert_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.insert_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.insert_tile_slice"
        ]
      }
    ],
    "vector.vscale": [
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMultiTileTransferWriteAsStoreLoop",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferReadOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LegalizeTransferWriteOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LiftIllegalVectorTransposeToMemory",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LowerColumnTransferReadToLoops",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::DecomposePrintOpConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::ScalableTransposeTransferWriteConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.vscale"
        ]
      }
    ],
    "prevent.dce": [
      {
        "className": "{anonymous}::BroadcastOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::ConvertSplatToBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "prevent.dce"
        ]
      }
    ],
    "memref.assume_alignment": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.assume_alignment"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.assume_alignment"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.assume_alignment"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefAssumeAlignment",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.assume_alignment"
        ]
      }
    ],
    "memref.reinterpret_cast": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefReinterpretCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ExpandReallocOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOnFatRawBufferCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpAllocFolder<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpGetGlobalFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::FlattenStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefReshapeOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::memref::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::LoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::StoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ReinterpretCastOpExtractStridedMetadataFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::CollapseShapeOp, {anonymous}::getCollapsedSize, {anonymous}::getCollapsedStride>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::ReshapeFolder<mlir::memref::ExpandShapeOp, {anonymous}::getExpandedSizes, {anonymous}::getExpandedStrides>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      },
      {
        "className": "{anonymous}::SubviewFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reinterpret_cast"
        ]
      }
    ],
    "memref.reshape": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.reshape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reshape"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.reshape"
        ]
      },
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.reshape"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.reshape"
        ]
      }
    ],
    "memref.view": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpMemrefCastFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpMemrefCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpMemrefCastFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.view"
        ]
      },
      {
        "className": "{anonymous}::ViewOpShapeFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "memref.view"
        ]
      }
    ],
    "memref.memory_space_cast": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.memory_space_cast"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemRefMemorySpaceCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.memory_space_cast"
        ]
      },
      {
        "className": "{anonymous}::ExtractStridedMetadataOpMemorySpaceCastFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.memory_space_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.memory_space_cast"
        ]
      }
    ],
    "memref.atomic_rmw": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.atomic_rmw"
        ]
      },
      {
        "className": "{anonymous}::ConvertMemrefStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.atomic_rmw"
        ]
      }
    ],
    "vector.compressstore": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.compressstore"
        ]
      },
      {
        "className": "{anonymous}::CompressStoreFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.compressstore"
        ]
      },
      {
        "className": "{anonymous}::CompressStoreFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.compressstore"
        ]
      }
    ],
    "vector.expandload": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.expandload"
        ]
      },
      {
        "className": "{anonymous}::ExpandLoadFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.expandload"
        ]
      },
      {
        "className": "{anonymous}::ExpandLoadFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.expandload"
        ]
      }
    ],
    "vector.gather": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousGather",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousGather",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::Gather1DToConditionalLoads",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::GatherFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::GatherFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::MaskedGatherOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::RemoveStrideFromGatherSource",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnTranspose",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGather",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::UnrollGatherPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.gather"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.gather"
        ]
      }
    ],
    "vector.maskedload": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousGather",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedLoadToConditionalLoad",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MaskedLoadLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedload"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedLoadOpConverter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedload"
        ]
      }
    ],
    "vector.maskedstore": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousScatter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedStoreToConditionalStore",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::FullMaskedStoreToConditionalStore",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::MaskedStoreFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::MaskedStoreFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::MemRefRewritePattern<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfCollapseShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfExpandShapeOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToVectorStoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.maskedstore"
        ]
      },
      {
        "className": "{anonymous}::VectorMaskedStoreOpConverter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.maskedstore"
        ]
      }
    ],
    "vector.scatter": [
      {
        "className": "{anonymous}::BubbleDownCastsPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousScatter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::FoldContiguousScatter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::ForLoopPeelingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::ScatterFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.scatter"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.scatter"
        ]
      }
    ],
    "emitc.call": [
      {
        "className": "{anonymous}::CallOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.call"
        ]
      }
    ],
    "llvm.intr.memcpy": [
      {
        "className": "{anonymous}::CallOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.memcpy"
        ]
      },
      {
        "className": "{anonymous}::GPULaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.memcpy"
        ]
      },
      {
        "className": "{anonymous}::MemRefCopyOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.memcpy"
        ]
      },
      {
        "className": "{anonymous}::MemorySpaceCastOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.memcpy"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.memcpy"
        ]
      }
    ],
    "spirv.FunctionCall": [
      {
        "className": "{anonymous}::CallOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FunctionCall"
        ]
      }
    ],
    "vector.constant_mask": [
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::CastAwayConstantMaskLeadingOneDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ConstantMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedLoad",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ConvertVectorMaskedStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::CreateMaskFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::FoldTransposeCreateMask",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::ShapeCastCreateMaskFolderTrailingOneDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::StridedSliceConstantMaskFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.constant_mask"
        ]
      }
    ],
    "math.cbrt": [
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::CbrtApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.cbrt"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::CbrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.cbrt"
        ]
      }
    ],
    "tensor.bitcast": [
      {
        "className": "{anonymous}::ChainedTensorBitcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorBitcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.bitcast"
        ]
      },
      {
        "className": "{anonymous}::ChainedTensorBitcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.bitcast"
        ]
      }
    ],
    "spirv.CL.fabs": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AbsFOp, mlir::spirv::CLFAbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fabs"
        ]
      }
    ],
    "spirv.GL.FAbs": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AbsFOp, mlir::spirv::GLFAbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FAbs"
        ]
      },
      {
        "className": "{anonymous}::ConvertGLLengthToGLFAbs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FAbs"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FAbs"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FAbs"
        ]
      }
    ],
    "spirv.CL.s_abs": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AbsIOp, mlir::spirv::CLSAbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_abs"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpGLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.s_abs"
        ]
      }
    ],
    "spirv.GL.SAbs": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AbsIOp, mlir::spirv::GLSAbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SAbs"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SAbs"
        ]
      }
    ],
    "spirv.CL.acos": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AcosOp, mlir::spirv::CLAcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.acos"
        ]
      }
    ],
    "spirv.GL.Acos": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AcosOp, mlir::spirv::GLAcosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Acos"
        ]
      }
    ],
    "spirv.CL.acosh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AcoshOp, mlir::spirv::CLAcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.acosh"
        ]
      }
    ],
    "spirv.GL.Acosh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AcoshOp, mlir::spirv::GLAcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Acosh"
        ]
      }
    ],
    "spirv.CL.asin": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AsinOp, mlir::spirv::CLAsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.asin"
        ]
      }
    ],
    "spirv.GL.Asin": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AsinOp, mlir::spirv::GLAsinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Asin"
        ]
      }
    ],
    "spirv.CL.asinh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AsinhOp, mlir::spirv::CLAsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.asinh"
        ]
      }
    ],
    "spirv.GL.Asinh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AsinhOp, mlir::spirv::GLAsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Asinh"
        ]
      }
    ],
    "spirv.CL.atan2": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::Atan2Op, mlir::spirv::CLAtan2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.atan2"
        ]
      }
    ],
    "spirv.CL.atan": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AtanOp, mlir::spirv::CLAtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.atan"
        ]
      }
    ],
    "spirv.GL.Atan": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AtanOp, mlir::spirv::GLAtanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Atan"
        ]
      }
    ],
    "spirv.CL.atanh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AtanhOp, mlir::spirv::CLAtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.atanh"
        ]
      }
    ],
    "spirv.GL.Atanh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::AtanhOp, mlir::spirv::GLAtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Atanh"
        ]
      }
    ],
    "spirv.CL.ceil": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CeilOp, mlir::spirv::CLCeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.ceil"
        ]
      }
    ],
    "spirv.GL.Ceil": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CeilOp, mlir::spirv::GLCeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Ceil"
        ]
      }
    ],
    "spirv.CL.cos": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CosOp, mlir::spirv::CLCosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.cos"
        ]
      }
    ],
    "spirv.GL.Cos": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CosOp, mlir::spirv::GLCosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Cos"
        ]
      }
    ],
    "spirv.CL.cosh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CoshOp, mlir::spirv::CLCoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.cosh"
        ]
      }
    ],
    "spirv.GL.Cosh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::CoshOp, mlir::spirv::GLCoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Cosh"
        ]
      }
    ],
    "spirv.CL.erf": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::ErfOp, mlir::spirv::CLErfOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.erf"
        ]
      }
    ],
    "spirv.CL.exp": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::ExpOp, mlir::spirv::CLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.exp"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::CLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.exp"
        ]
      }
    ],
    "spirv.GL.Exp": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::ExpOp, mlir::spirv::GLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Exp"
        ]
      },
      {
        "className": "{anonymous}::ExpM1OpPattern<mlir::spirv::GLExpOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Exp"
        ]
      }
    ],
    "spirv.CL.floor": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::FloorOp, mlir::spirv::CLFloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.floor"
        ]
      }
    ],
    "spirv.GL.Floor": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::FloorOp, mlir::spirv::GLFloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Floor"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Floor"
        ]
      }
    ],
    "spirv.CL.fma": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::FmaOp, mlir::spirv::CLFmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fma"
        ]
      },
      {
        "className": "{anonymous}::VectorFmaOpConvert<mlir::spirv::CLFmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fma"
        ]
      }
    ],
    "spirv.GL.Fma": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::FmaOp, mlir::spirv::GLFmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Fma"
        ]
      },
      {
        "className": "{anonymous}::VectorFmaOpConvert<mlir::spirv::GLFmaOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Fma"
        ]
      }
    ],
    "spirv.IsFinite": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::IsFiniteOp, mlir::spirv::IsFiniteOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.IsFinite"
        ]
      }
    ],
    "spirv.CL.log": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::LogOp, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.log"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.log"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.log"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::CLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.log"
        ]
      }
    ],
    "spirv.GL.Log": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::LogOp, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Log"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpPattern<mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Log"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log10Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Log"
        ]
      },
      {
        "className": "{anonymous}::Log2Log10OpPattern<mlir::math::Log2Op, mlir::spirv::GLLogOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Log"
        ]
      }
    ],
    "spirv.CL.pow": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::PowFOp, mlir::spirv::CLPowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.pow"
        ]
      }
    ],
    "spirv.CL.rint": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::RoundEvenOp, mlir::spirv::CLRintOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.rint"
        ]
      }
    ],
    "spirv.GL.RoundEven": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::RoundEvenOp, mlir::spirv::GLRoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.RoundEven"
        ]
      }
    ],
    "spirv.CL.round": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::RoundOp, mlir::spirv::CLRoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.round"
        ]
      }
    ],
    "spirv.CL.rsqrt": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::RsqrtOp, mlir::spirv::CLRsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.rsqrt"
        ]
      }
    ],
    "spirv.GL.InverseSqrt": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::RsqrtOp, mlir::spirv::GLInverseSqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.InverseSqrt"
        ]
      }
    ],
    "spirv.CL.sin": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SinOp, mlir::spirv::CLSinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.sin"
        ]
      }
    ],
    "spirv.GL.Sin": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SinOp, mlir::spirv::GLSinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Sin"
        ]
      }
    ],
    "spirv.CL.sinh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SinhOp, mlir::spirv::CLSinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.sinh"
        ]
      }
    ],
    "spirv.GL.Sinh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SinhOp, mlir::spirv::GLSinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Sinh"
        ]
      }
    ],
    "spirv.CL.sqrt": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SqrtOp, mlir::spirv::CLSqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.sqrt"
        ]
      }
    ],
    "spirv.GL.Sqrt": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::SqrtOp, mlir::spirv::GLSqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Sqrt"
        ]
      }
    ],
    "spirv.CL.tan": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::TanOp, mlir::spirv::CLTanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.tan"
        ]
      }
    ],
    "spirv.GL.Tan": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::TanOp, mlir::spirv::GLTanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Tan"
        ]
      }
    ],
    "spirv.CL.tanh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::TanhOp, mlir::spirv::CLTanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.tanh"
        ]
      }
    ],
    "spirv.GL.Tanh": [
      {
        "className": "{anonymous}::CheckedElementwiseOpPattern<mlir::math::TanhOp, mlir::spirv::GLTanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Tanh"
        ]
      }
    ],
    "test.any_attr_of_i32_str": [
      {
        "className": "{anonymous}::CloneOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.any_attr_of_i32_str"
        ]
      },
      {
        "className": "{anonymous}::IncrementIntAttribute<3>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.any_attr_of_i32_str"
        ]
      }
    ],
    "test.clone_me": [
      {
        "className": "{anonymous}::CloneOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.clone_me"
        ]
      }
    ],
    "test.foo": [
      {
        "className": "{anonymous}::CloneOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.foo"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.foo"
        ]
      }
    ],
    "memref.rank": [
      {
        "className": "{anonymous}::CloneOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.rank"
        ]
      }
    ],
    "test.op_1": [
      {
        "className": "{anonymous}::CloneRegionBeforeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_1"
        ]
      },
      {
        "className": "{anonymous}::InlineBlocksIntoParent",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_1"
        ]
      }
    ],
    "test.op_2": [
      {
        "className": "{anonymous}::CloneRegionBeforeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_2"
        ]
      },
      {
        "className": "{anonymous}::InlineBlocksIntoParent",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_2"
        ]
      },
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_2"
        ]
      }
    ],
    "test.op_3": [
      {
        "className": "{anonymous}::CloneRegionBeforeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_3"
        ]
      },
      {
        "className": "{anonymous}::InlineBlocksIntoParent",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_3"
        ]
      },
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_3"
        ]
      }
    ],
    "test.op_4": [
      {
        "className": "{anonymous}::CloneRegionBeforeOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_4"
        ]
      }
    ],
    "emitc.cmp": [
      {
        "className": "{anonymous}::CmpFOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::CmpIOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.cmp"
        ]
      }
    ],
    "emitc.logical_and": [
      {
        "className": "{anonymous}::CmpFOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.logical_and"
        ]
      }
    ],
    "emitc.logical_or": [
      {
        "className": "{anonymous}::CmpFOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.logical_or"
        ]
      }
    ],
    "llvm.fcmp": [
      {
        "className": "{anonymous}::CmpFOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::DivOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdEqualOp, mlir::LLVM::FCmpPredicate::oeq>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdGreaterThanEqualOp, mlir::LLVM::FCmpPredicate::oge>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdGreaterThanOp, mlir::LLVM::FCmpPredicate::ogt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdLessThanEqualOp, mlir::LLVM::FCmpPredicate::ole>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdLessThanOp, mlir::LLVM::FCmpPredicate::olt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FOrdNotEqualOp, mlir::LLVM::FCmpPredicate::one>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordEqualOp, mlir::LLVM::FCmpPredicate::ueq>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordGreaterThanEqualOp, mlir::LLVM::FCmpPredicate::uge>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordGreaterThanOp, mlir::LLVM::FCmpPredicate::ugt>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordLessThanEqualOp, mlir::LLVM::FCmpPredicate::ule>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordLessThanOp, mlir::LLVM::FCmpPredicate::ult>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::FComparePattern<mlir::spirv::FUnordNotEqualOp, mlir::LLVM::FCmpPredicate::une>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      },
      {
        "className": "{anonymous}::WmmaElementwiseOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fcmp"
        ]
      }
    ],
    "spirv.Ordered": [
      {
        "className": "{anonymous}::CmpFOpNanKernelPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Ordered"
        ]
      }
    ],
    "spirv.Unordered": [
      {
        "className": "{anonymous}::CmpFOpNanKernelPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Unordered"
        ]
      }
    ],
    "spirv.LogicalNot": [
      {
        "className": "{anonymous}::CmpFOpNanNonePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfIEqual",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfIEqual",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfINotEqual",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfINotEqual",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalEqual",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalEqual",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalNotEqual",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.LogicalNot"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalNotEqual",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.LogicalNot"
        ]
      }
    ],
    "spirv.FOrdEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdEqual"
        ]
      }
    ],
    "spirv.FOrdGreaterThan": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdGreaterThan"
        ]
      }
    ],
    "spirv.FOrdGreaterThanEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdGreaterThanEqual"
        ]
      },
      {
        "className": "{anonymous}::RoundOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdGreaterThanEqual"
        ]
      }
    ],
    "spirv.FOrdLessThan": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdLessThan"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdLessThan"
        ]
      }
    ],
    "spirv.FOrdLessThanEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdLessThanEqual"
        ]
      }
    ],
    "spirv.FOrdNotEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdNotEqual"
        ]
      },
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FOrdNotEqual"
        ]
      }
    ],
    "spirv.FUnordEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordEqual"
        ]
      }
    ],
    "spirv.FUnordGreaterThan": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordGreaterThan"
        ]
      }
    ],
    "spirv.FUnordGreaterThanEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordGreaterThanEqual"
        ]
      }
    ],
    "spirv.FUnordLessThan": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordLessThan"
        ]
      }
    ],
    "spirv.FUnordLessThanEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordLessThanEqual"
        ]
      }
    ],
    "spirv.FUnordNotEqual": [
      {
        "className": "{anonymous}::CmpFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.FUnordNotEqual"
        ]
      }
    ],
    "spirv.LogicalEqual": [
      {
        "className": "{anonymous}::CmpIOpBooleanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalNotEqual",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalEqual"
        ]
      }
    ],
    "spirv.LogicalNotEqual": [
      {
        "className": "{anonymous}::CmpIOpBooleanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalNotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalNotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfLogicalEqual",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalNotEqual"
        ]
      },
      {
        "className": "{anonymous}::XOrIOpBooleanPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.LogicalNotEqual"
        ]
      }
    ],
    "spirv.INotEqual": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertLogicalNotOfIEqual",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::IndexCastIndexI1Pattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      },
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.INotEqual"
        ]
      }
    ],
    "spirv.SGreaterThan": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SGreaterThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCeilDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SGreaterThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SGreaterThan"
        ]
      }
    ],
    "spirv.SGreaterThanEqual": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SGreaterThanEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SGreaterThanEqual"
        ]
      }
    ],
    "spirv.SLessThan": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexFloorDivSPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThan"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThan"
        ]
      }
    ],
    "spirv.SLessThanEqual": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThanEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SLessThanEqual"
        ]
      }
    ],
    "spirv.UGreaterThan": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UGreaterThan"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UGreaterThan"
        ]
      }
    ],
    "spirv.UGreaterThanEqual": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UGreaterThanEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UGreaterThanEqual"
        ]
      }
    ],
    "spirv.ULessThanEqual": [
      {
        "className": "{anonymous}::CmpIOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThanEqual"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCmpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThanEqual"
        ]
      },
      {
        "className": "{anonymous}::CountLeadingZerosPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ULessThanEqual"
        ]
      }
    ],
    "test.secondCodeFalse": [
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.secondCodeFalse"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.secondCodeFalse"
        ]
      }
    ],
    "test.secondCodeTrue": [
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.secondCodeTrue"
        ]
      },
      {
        "className": "{anonymous}::CombineIfs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.secondCodeTrue"
        ]
      }
    ],
    "test.inop": [
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.inop"
        ]
      }
    ],
    "test.inop1": [
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.inop1"
        ]
      }
    ],
    "test.run": [
      {
        "className": "{anonymous}::CombineNestedIfs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.run"
        ]
      }
    ],
    "sparse_tensor.concatenate": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.concatenate"
        ]
      },
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.concatenate"
        ]
      }
    ],
    "bufferization.alloc_tensor": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::EmptyTensorLoweringPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::FuseSparseMultiplyOverAdd",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::ReplaceStaticShapeDims",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::bufferization::AllocTensorOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.alloc_tensor"
        ]
      }
    ],
    "sparse_tensor.foreach": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.foreach"
        ]
      }
    ],
    "sparse_tensor.load": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.load"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.load"
        ]
      }
    ],
    "sparse_tensor.yield": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.yield"
        ]
      }
    ],
    "tensor.insert": [
      {
        "className": "{anonymous}::ConcatenateRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::RewriteScalarWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::SimplifyTrivialLoops",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.insert"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.insert"
        ]
      }
    ],
    "spirv.BranchConditional": [
      {
        "className": "{anonymous}::CondBranchOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BranchConditional"
        ]
      },
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.BranchConditional"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BranchConditional"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BranchConditional"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BranchConditional"
        ]
      }
    ],
    "test.consumer1": [
      {
        "className": "{anonymous}::CondBranchTruthPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consumer1"
        ]
      }
    ],
    "test.consumer2": [
      {
        "className": "{anonymous}::CondBranchTruthPropagation",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.consumer2"
        ]
      }
    ],
    "arm_sme.zero": [
      {
        "className": "{anonymous}::ConstantOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMopa2WayOp, mlir::arm_sme::aarch64_sme_mopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMops2WayOp, mlir::arm_sme::aarch64_sme_mops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa2WayOp, mlir::arm_sme::aarch64_sme_smopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa4WayOp, mlir::arm_sme::aarch64_sme_smopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops2WayOp, mlir::arm_sme::aarch64_sme_smops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops4WayOp, mlir::arm_sme::aarch64_sme_smops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMopa4WayOp, mlir::arm_sme::aarch64_sme_sumopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMops4WayOp, mlir::arm_sme::aarch64_sme_sumops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa2WayOp, mlir::arm_sme::aarch64_sme_umopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa4WayOp, mlir::arm_sme::aarch64_sme_umopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops2WayOp, mlir::arm_sme::aarch64_sme_umops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops4WayOp, mlir::arm_sme::aarch64_sme_umops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMopa4WayOp, mlir::arm_sme::aarch64_sme_usmopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMops4WayOp, mlir::arm_sme::aarch64_sme_usmops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.zero"
        ]
      }
    ],
    "llvm.intr.experimental.constrained.fptrunc": [
      {
        "className": "{anonymous}::ConstrainedVectorConvertToLLVMPattern<mlir::arith::TruncFOp, mlir::LLVM::ConstrainedFPTruncIntr, true, mlir::arith::AttrConverterConstrainedFPToLLVM>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.experimental.constrained.fptrunc"
        ]
      }
    ],
    "xegpu.dpas": [
      {
        "className": "{anonymous}::ContractionLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::UnrollDpasOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.dpas"
        ]
      },
      {
        "className": "{anonymous}::WgToSgDpasOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.dpas"
        ]
      }
    ],
    "vector.fma": [
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::UnrollElementwisePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::VectorFMAOpNDRewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.fma"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.fma"
        ]
      }
    ],
    "vector.outerproduct": [
      {
        "className": "{anonymous}::ContractionOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::ContractionOpToOuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::FoldArithToVectorOuterProduct<mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::LegalizeMaskedVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::LegalizeVectorOuterProductOpsByDecomposition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::OuterProductOpLowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToVectorLoadLowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "vector.outerproduct"
        ]
      }
    ],
    "amx.tile_load": [
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amx.tile_load"
        ]
      }
    ],
    "amx.tile_mulf": [
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amx.tile_mulf"
        ]
      }
    ],
    "amx.tile_muli": [
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amx.tile_muli"
        ]
      }
    ],
    "amx.tile_store": [
      {
        "className": "{anonymous}::ContractionToAMX",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amx.tile_store"
        ]
      }
    ],
    "linalg.conv_2d_nhwc_fhwc_q": [
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_fhwc_q"
        ]
      }
    ],
    "tosa.cast": [
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcFhwcOp, mlir::linalg::Conv2DNhwcFhwcQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cast"
        ]
      },
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cast"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cast"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.cast"
        ]
      }
    ],
    "linalg.conv_2d_nhwc_hwcf_q": [
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv2DOp, mlir::linalg::Conv2DNhwcHwcfOp, mlir::linalg::Conv2DNhwcHwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nhwc_hwcf_q"
        ]
      }
    ],
    "linalg.conv_3d_ndhwc_dhwcf": [
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_3d_ndhwc_dhwcf"
        ]
      }
    ],
    "linalg.conv_3d_ndhwc_dhwcf_q": [
      {
        "className": "{anonymous}::ConvConverter<mlir::tosa::Conv3DOp, mlir::linalg::Conv3DNdhwcDhwcfOp, mlir::linalg::Conv3DNdhwcDhwcfQOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_3d_ndhwc_dhwcf_q"
        ]
      }
    ],
    "bufferization.to_buffer": [
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ToBufferOfCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ToBufferOfCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ToBufferOfCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.to_buffer"
        ]
      },
      {
        "className": "{anonymous}::ToBufferToTensorFolding",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.to_buffer"
        ]
      }
    ],
    "bufferization.to_tensor": [
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_tensor"
        ]
      },
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.to_tensor"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_tensor"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_tensor"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_tensor"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.to_tensor"
        ]
      }
    ],
    "mpi.allreduce": [
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.allreduce"
        ]
      }
    ],
    "mpi.comm_split": [
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.comm_split"
        ]
      }
    ],
    "mpi.comm_world": [
      {
        "className": "{anonymous}::ConvertAllReduceOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.comm_world"
        ]
      },
      {
        "className": "{anonymous}::ConvertProcessLinearIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.comm_world"
        ]
      },
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.comm_world"
        ]
      }
    ],
    "test.elementwise_mappable": [
      {
        "className": "{anonymous}::ConvertAnyElementwiseMappableOpOnRankedTensors",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.elementwise_mappable"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.elementwise_mappable"
        ]
      },
      {
        "className": "{anonymous}::DeduplicateAndRemoveDeadOperandsAndResults",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.elementwise_mappable"
        ]
      },
      {
        "className": "{anonymous}::FoldDuplicateInputBbArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.elementwise_mappable"
        ]
      }
    ],
    "arm_sme.intr.ld1h.horiz": [
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1h.horiz"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1h.horiz"
        ]
      }
    ],
    "arm_sme.intr.ld1w.horiz": [
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1w.horiz"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1w.horiz"
        ]
      }
    ],
    "arm_sme.intr.read.horiz": [
      {
        "className": "{anonymous}::ConvertArmSMESpillsAndFillsToLLVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.read.horiz"
        ]
      },
      {
        "className": "{anonymous}::ExtractTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.read.horiz"
        ]
      }
    ],
    "spirv.GL.FClamp": [
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_FOrdLessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FClamp"
        ]
      }
    ],
    "spirv.GL.SClamp": [
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_SLessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.SClamp"
        ]
      }
    ],
    "spirv.GL.UClamp": [
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp1_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanEqualOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UClamp"
        ]
      },
      {
        "className": "{anonymous}::ConvertComparisonIntoClamp2_SPIRV_ULessThanOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.UClamp"
        ]
      }
    ],
    "emitc.apply": [
      {
        "className": "{anonymous}::ConvertCopy",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.apply"
        ]
      },
      {
        "className": "{anonymous}::ConvertGetGlobal",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.apply"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.apply"
        ]
      }
    ],
    "shape.cstr_require": [
      {
        "className": "{anonymous}::ConvertCstrRequireOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.cstr_require"
        ]
      },
      {
        "className": "{anonymous}::ConvertCstrRequireOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.cstr_require"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableToRequire",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_require"
        ]
      },
      {
        "className": "{anonymous}::CstrEqToRequire",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.cstr_require"
        ]
      }
    ],
    "shape.const_witness": [
      {
        "className": "{anonymous}::ConvertCstrRequireOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_witness"
        ]
      },
      {
        "className": "{anonymous}::CstrBroadcastableEqOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_witness"
        ]
      },
      {
        "className": "{anonymous}::CstrEqEqOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_witness"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrBroadcastableOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_witness"
        ]
      },
      {
        "className": "{anonymous}::RemoveCstrEqOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_witness"
        ]
      }
    ],
    "arith.remf": [
      {
        "className": "{anonymous}::ConvertFPToUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.remf"
        ]
      }
    ],
    "spirv.GL.Length": [
      {
        "className": "{anonymous}::ConvertGLLengthToGLFAbs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.GL.Length"
        ]
      },
      {
        "className": "{anonymous}::ConvertGLLengthToGLFAbs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "spirv.GL.Length"
        ]
      }
    ],
    "emitc.get_global": [
      {
        "className": "{anonymous}::ConvertGetGlobal",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.get_global"
        ]
      }
    ],
    "emitc.global": [
      {
        "className": "{anonymous}::ConvertGlobal",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.global"
        ]
      }
    ],
    "spirv.SConvert": [
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastSOp, mlir::spirv::SConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SConvert"
        ]
      },
      {
        "className": "{anonymous}::ExtSIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SConvert"
        ]
      },
      {
        "className": "{anonymous}::TruncIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SConvert"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::IndexCastOp, mlir::spirv::SConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SConvert"
        ]
      }
    ],
    "spirv.UConvert": [
      {
        "className": "{anonymous}::ConvertIndexCast<mlir::index::CastUOp, mlir::spirv::UConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::ExtUIPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockDimOp, mlir::spirv::BuiltIn::WorkgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::BlockIdOp, mlir::spirv::BuiltIn::WorkgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GlobalIdOp, mlir::spirv::BuiltIn::GlobalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::GridDimOp, mlir::spirv::BuiltIn::NumWorkgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::LaunchConfigConversion<mlir::gpu::ThreadIdOp, mlir::spirv::BuiltIn::LocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::LaneIdOp, mlir::spirv::BuiltIn::SubgroupLocalInvocationId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::NumSubgroupsOp, mlir::spirv::BuiltIn::NumSubgroups>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupIdOp, mlir::spirv::BuiltIn::SubgroupId>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::SingleDimLaunchConfigConversion<mlir::gpu::SubgroupSizeOp, mlir::spirv::BuiltIn::SubgroupSize>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::IndexCastUIOp, mlir::spirv::UConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UConvert"
        ]
      }
    ],
    "arith.index_castui": [
      {
        "className": "{anonymous}::ConvertIndexCastIndexToInt<mlir::arith::IndexCastUIOp, mlir::arith::ExtUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::ConvertIndexCastIntToIndex<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::FoldIndexCastChain<mlir::arith::IndexCastUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::IndexCastUIOfExtUI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::IndexCastUIOfExtUI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::IndexCastUIOfExtUI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::InsertTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::NarrowCmpI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::NarrowElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      },
      {
        "className": "{anonymous}::TileLoadOpWithMaskAndPadNonZeroConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.index_castui"
        ]
      }
    ],
    "xegpu.convert_layout": [
      {
        "className": "{anonymous}::ConvertLayoutOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.convert_layout"
        ]
      },
      {
        "className": "{anonymous}::ConvertLayoutOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.convert_layout"
        ]
      },
      {
        "className": "{anonymous}::ConvertLayoutOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.convert_layout"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.convert_layout"
        ]
      },
      {
        "className": "{anonymous}::WgToSgConvertLayoutOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.convert_layout"
        ]
      }
    ],
    "arith.mului_extended": [
      {
        "className": "{anonymous}::ConvertMulI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.mului_extended"
        ]
      },
      {
        "className": "{anonymous}::MulUIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.mului_extended"
        ]
      },
      {
        "className": "{anonymous}::MulUIExtendedToMulI",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.mului_extended"
        ]
      }
    ],
    "arith.ceildivui": [
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::CeilDivSIOp, mlir::arith::CeilDivUIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.ceildivui"
        ]
      }
    ],
    "arith.floordivsi": [
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::FloorDivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.floordivsi"
        ]
      },
      {
        "className": "{anonymous}::ConvertOpToUnsigned<mlir::arith::FloorDivSIOp, mlir::arith::DivUIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.floordivsi"
        ]
      },
      {
        "className": "{anonymous}::GenericResizeConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.floordivsi"
        ]
      },
      {
        "className": "{anonymous}::LowerDelinearizeIndexOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arith.floordivsi"
        ]
      }
    ],
    "mpi.comm_rank": [
      {
        "className": "{anonymous}::ConvertProcessLinearIndexOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.comm_rank"
        ]
      },
      {
        "className": "{anonymous}::FoldRank",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "mpi.comm_rank"
        ]
      },
      {
        "className": "{anonymous}::FoldRank",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "mpi.comm_rank"
        ]
      }
    ],
    "spirv.mlir.merge": [
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.mlir.merge"
        ]
      },
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.merge"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.merge"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.merge"
        ]
      }
    ],
    "spirv.mlir.selection": [
      {
        "className": "{anonymous}::ConvertSelectionOpToSelect",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "spirv.mlir.selection"
        ]
      },
      {
        "className": "{anonymous}::IfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.selection"
        ]
      }
    ],
    "spirv.AtomicCompareExchangeWeak": [
      {
        "className": "{anonymous}::ConvertToAtomCmpExchangeWeak",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.AtomicCompareExchangeWeak"
        ]
      }
    ],
    "spirv.BitReverse": [
      {
        "className": "{anonymous}::ConvertToBitReverse",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.BitReverse"
        ]
      }
    ],
    "spirv.GroupNonUniformBallot": [
      {
        "className": "{anonymous}::ConvertToGroupNonUniformBallot",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformBallot"
        ]
      }
    ],
    "spirv.SDotAccSat": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& sDotAccSatTestOpName), mlir::spirv::SDotAccSatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDotAccSat"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDotAccSat"
        ]
      }
    ],
    "spirv.SDot": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& sDotTestOpName), mlir::spirv::SDotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDot"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SDot"
        ]
      }
    ],
    "spirv.SUDotAccSat": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& suDotAccSatTestOpName), mlir::spirv::SUDotAccSatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SUDotAccSat"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SUDotAccSat"
        ]
      }
    ],
    "spirv.SUDot": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& suDotTestOpName), mlir::spirv::SUDotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SUDot"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SUDot"
        ]
      }
    ],
    "spirv.UDotAccSat": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& uDotAccSatTestOpName), mlir::spirv::UDotAccSatOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UDotAccSat"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UDotAccSat"
        ]
      }
    ],
    "spirv.UDot": [
      {
        "className": "{anonymous}::ConvertToIntegerDotProd<(& uDotTestOpName), mlir::spirv::UDotOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UDot"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionToIntDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.UDot"
        ]
      }
    ],
    "spirv.module": [
      {
        "className": "{anonymous}::ConvertToModule",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.module"
        ]
      },
      {
        "className": "{anonymous}::GPUModuleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.module"
        ]
      }
    ],
    "spirv.KHR.SubgroupBallot": [
      {
        "className": "{anonymous}::ConvertToSubgroupBallot",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.KHR.SubgroupBallot"
        ]
      }
    ],
    "bufferization.clone": [
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.clone"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.clone"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.clone"
        ]
      },
      {
        "className": "{anonymous}::SimplifyClones",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.clone"
        ]
      }
    ],
    "memref.extract_aligned_pointer_as_index": [
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::DeallocOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractAlignedPointerAsIndexOfViewLikeOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAssembleConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.extract_aligned_pointer_as_index"
        ]
      }
    ],
    "sparse_tensor.push_back": [
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.push_back"
        ]
      }
    ],
    "sparse_tensor.storage_specifier.get": [
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseExpandConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseLvlOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseNumberOfEntriesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorLoadConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesBufferConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseToCoordinatesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseToPositionsConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      },
      {
        "className": "{anonymous}::SparseToValuesConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.get"
        ]
      }
    ],
    "sparse_tensor.storage_specifier.set": [
      {
        "className": "{anonymous}::ConvertTrivialIfToSelect",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::LoadOfToBuffer",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseExtractSliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseInsertConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.set"
        ]
      }
    ],
    "mpi.recv": [
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.recv"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "mpi.recv"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.recv"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "mpi.recv"
        ]
      }
    ],
    "mpi.send": [
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.send"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "mpi.send"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mpi.send"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "mpi.send"
        ]
      }
    ],
    "shard.neighbors_linear_indices": [
      {
        "className": "{anonymous}::ConvertUpdateHaloOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.neighbors_linear_indices"
        ]
      }
    ],
    "memref.atomic_yield": [
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.atomic_yield"
        ]
      }
    ],
    "memref.generic_atomic_rmw": [
      {
        "className": "{anonymous}::ConvertVectorStore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.generic_atomic_rmw"
        ]
      },
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.generic_atomic_rmw"
        ]
      }
    ],
    "llvm.intr.coro.align": [
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.align"
        ]
      }
    ],
    "llvm.intr.coro.begin": [
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.begin"
        ]
      }
    ],
    "llvm.intr.coro.size": [
      {
        "className": "{anonymous}::CoroBeginOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.size"
        ]
      }
    ],
    "llvm.intr.coro.end": [
      {
        "className": "{anonymous}::CoroEndOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.end"
        ]
      }
    ],
    "llvm.mlir.none": [
      {
        "className": "{anonymous}::CoroEndOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.mlir.none"
        ]
      }
    ],
    "llvm.intr.coro.free": [
      {
        "className": "{anonymous}::CoroFreeOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.free"
        ]
      }
    ],
    "llvm.intr.coro.id": [
      {
        "className": "{anonymous}::CoroIdOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.id"
        ]
      }
    ],
    "llvm.intr.coro.save": [
      {
        "className": "{anonymous}::CoroSaveOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.save"
        ]
      }
    ],
    "llvm.intr.coro.suspend": [
      {
        "className": "{anonymous}::CoroSuspendOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.coro.suspend"
        ]
      }
    ],
    "llvm.switch": [
      {
        "className": "{anonymous}::CoroSuspendOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.switch"
        ]
      },
      {
        "className": "{anonymous}::SwitchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.switch"
        ]
      }
    ],
    "spirv.GL.FindUMsb": [
      {
        "className": "{anonymous}::CountLeadingZerosPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FindUMsb"
        ]
      }
    ],
    "async.runtime.create_group": [
      {
        "className": "{anonymous}::CreateGroupOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "async.runtime.create_group"
        ]
      }
    ],
    "arm_sve.intr.whilelt": [
      {
        "className": "{anonymous}::CreateMaskOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.whilelt"
        ]
      }
    ],
    "gpu.warp_execute_on_lane_0": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpCreateMask",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpStep",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.warp_execute_on_lane_0"
        ]
      }
    ],
    "xegpu.create_nd_tdesc": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateNdOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOpNoOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::XegpuCreateNdDescOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::XegpuCreateNdDescOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      },
      {
        "className": "{anonymous}::XegpuCreateNdDescOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.create_nd_tdesc"
        ]
      }
    ],
    "gpu.yield": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsert",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertStridedSlice",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpShapeCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferRead",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.yield"
        ]
      },
      {
        "className": "{anonymous}::WarpOpTransferWrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.yield"
        ]
      }
    ],
    "xegpu.load_nd": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::LoadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadNdOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_nd"
        ]
      }
    ],
    "xegpu.prefetch_nd": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::PrefetchNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchNdOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.prefetch_nd"
        ]
      }
    ],
    "xegpu.store_nd": [
      {
        "className": "{anonymous}::CreateNdDescDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::DpasDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::LoadNdDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::MemrefExtractAlignedPointerAsIndexDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::StoreLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::StoreNdDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreNdOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::VectorBitcastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::VectorMultiReductionDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::VectorShapeCastDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::VectorTransposeDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpBroadcast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpElementwise",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtract",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WarpOpInsertScalar",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_nd"
        ]
      }
    ],
    "shape.is_broadcastable": [
      {
        "className": "{anonymous}::CstrBroadcastableToRequire",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.is_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::IsBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.is_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::IsBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.is_broadcastable"
        ]
      },
      {
        "className": "{anonymous}::RemoveDuplicateOperandsPattern<mlir::shape::IsBroadcastableOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.is_broadcastable"
        ]
      }
    ],
    "shape.shape_eq": [
      {
        "className": "{anonymous}::CstrEqToRequire",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.shape_eq"
        ]
      }
    ],
    "bufferization.dealloc": [
      {
        "className": "{anonymous}::DeallocRemoveDuplicateDeallocMemrefs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::DeallocRemoveDuplicateRetainedMemrefs",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::EraseAlwaysFalseDealloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::EraseEmptyDealloc",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveAllocDeallocPairWhenNoOtherUsers",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveRetainedMemrefsGuaranteedToNotAlias",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::RetainedMemrefAliasingAlwaysDeallocatedMemref",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SkipExtractMetadataOfAlloc",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc"
        ]
      },
      {
        "className": "{anonymous}::SplitDeallocWhenNotAliasingAnyOther",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "bufferization.dealloc"
        ]
      }
    ],
    "tensor.concat": [
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::DecomposeTensorConcatOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfEmpty",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::FoldConcatsOfFill",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::InferConcatOperandTypes",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::InferConcatResultType",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::InferConcatResultType",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::InferConcatResultType",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::SingleInputConcatOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tensor.concat"
        ]
      },
      {
        "className": "{anonymous}::SingleInputConcatOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tensor.concat"
        ]
      }
    ],
    "tosa.depthwise_conv2d": [
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.depthwise_conv2d"
        ]
      },
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.depthwise_conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::DepthwiseConv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::DepthwiseConv2DOp> >",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.depthwise_conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::DepthwiseConv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::DepthwiseConv2DOp> >",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.depthwise_conv2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::DepthwiseConv2DOp, {anonymous}::ConvPadFoldAdaptor<mlir::tosa::DepthwiseConv2DOp> >",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.depthwise_conv2d"
        ]
      }
    ],
    "tosa.mul": [
      {
        "className": "{anonymous}::DepthwiseConv2DIsMul",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.mul"
        ]
      }
    ],
    "linalg.depthwise_conv_2d_nhwc_hwcm_q": [
      {
        "className": "{anonymous}::DepthwiseConvConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm_q"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm_q"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwcm_q"
        ]
      }
    ],
    "affine.vector_load": [
      {
        "className": "{anonymous}::DimOfCastOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.vector_load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.vector_load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.vector_load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.vector_load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.vector_load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.vector_load"
        ]
      }
    ],
    "shape.get_extent": [
      {
        "className": "{anonymous}::DimOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.get_extent"
        ]
      }
    ],
    "llvm.intr.bitreverse": [
      {
        "className": "{anonymous}::DirectConversionPattern<mlir::spirv::BitReverseOp, mlir::LLVM::BitReverseOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.bitreverse"
        ]
      }
    ],
    "sparse_tensor.convert": [
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::FoldConvertIntoProducer",
        "namespace": "{anonymous}",
        "method": "replace op with new op",
        "operations": [
          "sparse_tensor.convert",
          "linalg.generic"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::FuseTensorCast",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::GenericOpScheduler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.convert"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.convert"
        ]
      }
    ],
    "complex.constant": [
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.constant"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.constant"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::complex::PowiOp, mlir::complex::DivOp, mlir::complex::MulOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.constant"
        ]
      }
    ],
    "complex.neq": [
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.neq"
        ]
      }
    ],
    "sparse_tensor.reorder_coo": [
      {
        "className": "{anonymous}::DirectConvertRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.reorder_coo"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reorder_coo"
        ]
      }
    ],
    "xevm.mma": [
      {
        "className": "{anonymous}::DpasToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.mma"
        ]
      }
    ],
    "gpu.shuffle": [
      {
        "className": "{anonymous}::ElideSingleElementReduction",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::GpuShuffleRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToPermlanePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToPermlanePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToSwizzlePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::PromoteShuffleToSwizzlePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorSubgroupReduceToShuffles",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::WarpOpExtractScalar",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      },
      {
        "className": "{anonymous}::WarpOpReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.shuffle"
        ]
      }
    ],
    "vector.multi_reduction": [
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::ElideUnitDimsInMultiDimReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::InnerOuterDimReductionConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::MultiReduceToContract",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::OneDimMultiReductionToTwoDim",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::ReduceMultiDimReductionRank",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToElementWise",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::TwoDimMultiReductionToReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::UnrollMultiReductionPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.multi_reduction"
        ]
      },
      {
        "className": "{anonymous}::WgToSgMultiDimReductionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.multi_reduction"
        ]
      }
    ],
    "shard.all_gather": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllGatherOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.all_gather"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.all_gather"
        ]
      }
    ],
    "shard.all_reduce": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllReduceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.all_reduce"
        ]
      }
    ],
    "shard.all_slice": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllSliceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.all_slice"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.all_slice"
        ]
      }
    ],
    "shard.all_to_all": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::AllToAllOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.all_to_all"
        ]
      },
      {
        "className": "{anonymous}::TestReshardingRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shard.all_to_all"
        ]
      }
    ],
    "shard.broadcast": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::BroadcastOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.broadcast"
        ]
      }
    ],
    "shard.gather": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::GatherOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.gather"
        ]
      }
    ],
    "shard.recv": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::RecvOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.recv"
        ]
      }
    ],
    "shard.reduce": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ReduceOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.reduce"
        ]
      }
    ],
    "shard.reduce_scatter": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ReduceScatterOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.reduce_scatter"
        ]
      }
    ],
    "shard.scatter": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::ScatterOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.scatter"
        ]
      }
    ],
    "shard.send": [
      {
        "className": "{anonymous}::EmptyGridAxesCanonicalizationPattern<mlir::shard::SendOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.send"
        ]
      }
    ],
    "foo.foo": [
      {
        "className": "{anonymous}::EraseFirstBlock",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "foo.foo"
        ]
      }
    ],
    "test.erase_op": [
      {
        "className": "{anonymous}::EraseOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.erase_op"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.erase_op"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.erase_op"
        ]
      }
    ],
    "gpu.wait": [
      {
        "className": "{anonymous}::EraseRedundantGpuWaitOpPairs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.wait"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.wait"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.wait"
        ]
      },
      {
        "className": "{anonymous}::SimplifyGpuWaitOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.wait"
        ]
      }
    ],
    "gpu.memcpy": [
      {
        "className": "{anonymous}::EraseTrivialCopyOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.memcpy"
        ]
      },
      {
        "className": "{anonymous}::EraseTrivialCopyOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.memcpy"
        ]
      },
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.memcpy"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.memcpy"
        ]
      }
    ],
    "math.floor": [
      {
        "className": "{anonymous}::ExpApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::FloorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<false, mlir::math::CosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      },
      {
        "className": "{anonymous}::SinAndCosApproximation<true, mlir::math::SinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.floor"
        ]
      }
    ],
    "math.expm1": [
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::ExpM1Approximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::Expm1OpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::TanTanhOpConversion<mlir::complex::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::ExpM1Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.expm1"
        ]
      }
    ],
    "nvvm.rcp.approx.ftz.f": [
      {
        "className": "{anonymous}::ExpandDivF16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.rcp.approx.ftz.f"
        ]
      },
      {
        "className": "{anonymous}::NVGPURcpOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.rcp.approx.ftz.f"
        ]
      }
    ],
    "acc.enter_data": [
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::EnterDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "acc.enter_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::EnterDataOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "acc.enter_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::EnterDataOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "acc.enter_data"
        ]
      }
    ],
    "acc.exit_data": [
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::ExitDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "acc.exit_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::ExitDataOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "acc.exit_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::ExitDataOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "acc.exit_data"
        ]
      }
    ],
    "acc.update": [
      {
        "className": "{anonymous}::ExpandIfCondition<mlir::acc::UpdateOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "acc.update"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::UpdateOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "acc.update"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfCondition<mlir::acc::UpdateOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "acc.update"
        ]
      }
    ],
    "amdgpu.ext_packed_fp8": [
      {
        "className": "{anonymous}::ExtFOnFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.ext_packed_fp8"
        ]
      }
    ],
    "math.fpowi": [
      {
        "className": "{anonymous}::ExtendToSupportedTypesRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::FPowIOp, mlir::arith::DivFOp, mlir::arith::MulFOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::ReorderElementwiseOpsOnBroadcast",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.fpowi"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::FPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.fpowi"
        ]
      }
    ],
    "spirv.ConvertPtrToU": [
      {
        "className": "{anonymous}::ExtractAlignedPointerAsIndexOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertPtrToU"
        ]
      }
    ],
    "arm_sve.psel": [
      {
        "className": "{anonymous}::ExtractFromCreateMaskToPselLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.psel"
        ]
      }
    ],
    "sparse_tensor.coordinates": [
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coordinates"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coordinates"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coordinates"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coordinates"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coordinates"
        ]
      }
    ],
    "sparse_tensor.lvl": [
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.lvl"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.lvl"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.lvl"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorDimOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.lvl"
        ]
      }
    ],
    "sparse_tensor.positions": [
      {
        "className": "{anonymous}::ExtractIterSpaceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.positions"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.positions"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.positions"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.positions"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.positions"
        ]
      }
    ],
    "arm_sme.intr.read.vert": [
      {
        "className": "{anonymous}::ExtractTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.read.vert"
        ]
      }
    ],
    "sparse_tensor.values": [
      {
        "className": "{anonymous}::ExtractValOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.values"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.values"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.values"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.values"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.values"
        ]
      }
    ],
    "index.mul": [
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mul"
        ]
      }
    ],
    "index.remu": [
      {
        "className": "{anonymous}::FFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::RFFT2dConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.remu"
        ]
      }
    ],
    "rocdl.make.buffer.rsrc": [
      {
        "className": "{anonymous}::FatRawBufferCastLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::ROCDL::RawPtrBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::ROCDL::RawPtrBufferAtomicFmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicSmaxOp, mlir::ROCDL::RawPtrBufferAtomicSmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicUminOp, mlir::ROCDL::RawPtrBufferAtomicUminOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      },
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.make.buffer.rsrc"
        ]
      }
    ],
    "xevm.memfence": [
      {
        "className": "{anonymous}::FenceToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.memfence"
        ]
      }
    ],
    "test.test": [
      {
        "className": "{anonymous}::FlattenLoad",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.test"
        ]
      },
      {
        "className": "{anonymous}::FlattenSubview",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.test"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.test"
        ]
      },
      {
        "className": "{anonymous}::WhileOpAlignBeforeArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.test"
        ]
      }
    ],
    "shard.shard": [
      {
        "className": "{anonymous}::FoldDuplicateShardOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shard.shard"
        ]
      }
    ],
    "emitc.expression": [
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::FoldExpressionOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.expression"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.expression"
        ]
      }
    ],
    "test.less_than": [
      {
        "className": "{anonymous}::FoldLessThanOpF32ToI1",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.less_than"
        ]
      },
      {
        "className": "{anonymous}::FoldLessThanOpF32ToI1",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.less_than"
        ]
      }
    ],
    "tosa.avg_pool2d": [
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::AvgPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::AvgPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.avg_pool2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::AvgPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::AvgPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.avg_pool2d"
        ]
      },
      {
        "className": "{anonymous}::FoldPadToTensorOp<mlir::tosa::AvgPool2dOp, {anonymous}::PoolPadFoldAdaptor<mlir::tosa::AvgPool2dOp> >",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.avg_pool2d"
        ]
      }
    ],
    "test.sign": [
      {
        "className": "{anonymous}::FoldSignOpF32ToSI32",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.sign"
        ]
      },
      {
        "className": "{anonymous}::FoldSignOpF32ToSI32",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.sign"
        ]
      }
    ],
    "linalg.conv_2d_nchw_fchw": [
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_2d_nchw_fchw"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.conv_2d_nchw_fchw"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastConsumerOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_2d_nchw_fchw"
        ]
      }
    ],
    "scf.forall": [
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForallOpControlOperandsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "scf.forall"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall"
        ]
      }
    ],
    "scf.forall.in_parallel": [
      {
        "className": "{anonymous}::FoldTensorCastOfOutputIntoForallOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      },
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      },
      {
        "className": "{anonymous}::ForallOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      },
      {
        "className": "{anonymous}::ForallOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      },
      {
        "className": "{anonymous}::RewriteExtractSliceFromCollapseShapeUsingScfForeach",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "scf.forall.in_parallel"
        ]
      }
    ],
    "test.fold_to_call_op": [
      {
        "className": "{anonymous}::FoldToCallOpPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.fold_to_call_op"
        ]
      },
      {
        "className": "{anonymous}::FoldToCallOpPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.fold_to_call_op"
        ]
      }
    ],
    "arm_sme.store_tile_slice": [
      {
        "className": "{anonymous}::FoldTransferWriteOfExtractTileSlice",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.store_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::TileStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.store_tile_slice"
        ]
      }
    ],
    "test.cast": [
      {
        "className": "{anonymous}::FolderInsertBeforePreviouslyFoldedConstantPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.cast"
        ]
      },
      {
        "className": "{anonymous}::FolderInsertBeforePreviouslyFoldedConstantPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.cast"
        ]
      },
      {
        "className": "{anonymous}::FolderInsertBeforePreviouslyFoldedConstantPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.cast"
        ]
      },
      {
        "className": "{anonymous}::TestPassthroughInvalidOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.cast"
        ]
      },
      {
        "className": "{anonymous}::TestSelectiveOpReplacementPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.cast"
        ]
      },
      {
        "className": "{anonymous}::TestSelectiveOpReplacementPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.cast"
        ]
      }
    ],
    "test.op_in_place_fold_anchor": [
      {
        "className": "{anonymous}::FoldingPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_in_place_fold_anchor"
        ]
      },
      {
        "className": "{anonymous}::FoldingPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_in_place_fold_anchor"
        ]
      }
    ],
    "test.op_in_place_fold": [
      {
        "className": "{anonymous}::FoldingPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_in_place_fold"
        ]
      }
    ],
    "emitc.for": [
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.for"
        ]
      }
    ],
    "test.some_use": [
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.some_use"
        ]
      },
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.some_use"
        ]
      },
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.some_use"
        ]
      }
    ],
    "unknown.op": [
      {
        "className": "{anonymous}::ForLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "unknown.op"
        ]
      }
    ],
    "spirv.mlir.loop": [
      {
        "className": "{anonymous}::ForOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.loop"
        ]
      },
      {
        "className": "{anonymous}::LoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.loop"
        ]
      },
      {
        "className": "{anonymous}::WhileOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.mlir.loop"
        ]
      }
    ],
    "gpu.subgroup_mma_compute": [
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_mma_compute"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.subgroup_mma_compute"
        ]
      }
    ],
    "gpu.subgroup_mma_load_matrix": [
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_mma_load_matrix"
        ]
      },
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.subgroup_mma_load_matrix"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaLoadMatrixOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_mma_load_matrix"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaLoadMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_mma_load_matrix"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaLoadMatrixOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_mma_load_matrix"
        ]
      }
    ],
    "gpu.subgroup_mma_store_matrix": [
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "gpu.subgroup_mma_store_matrix"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaStoreMatrixOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.subgroup_mma_store_matrix"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaStoreMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_mma_store_matrix"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::gpu::SubgroupMmaStoreMatrixOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.subgroup_mma_store_matrix"
        ]
      }
    ],
    "sparse_tensor.compress": [
      {
        "className": "{anonymous}::ForOpIterArgsFolder",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.compress"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.compress"
        ]
      }
    ],
    "math.ceil": [
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ceil"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.ceil"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ceil"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CeilOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ceil"
        ]
      }
    ],
    "math.tanh": [
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::TanhOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::TanhApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.tanh"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.tanh"
        ]
      }
    ],
    "vector.step": [
      {
        "className": "{anonymous}::ForOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::StepToArithConstantOpRewrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::UnrollStepPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.step"
        ]
      }
    ],
    "gpu.alloc": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.alloc"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.alloc"
        ]
      }
    ],
    "gpu.block_dim": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.block_dim"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.block_dim"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.block_dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.block_dim"
        ]
      }
    ],
    "gpu.block_id": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.block_id"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.block_id"
        ]
      }
    ],
    "gpu.dealloc": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.dealloc"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.dealloc"
        ]
      }
    ],
    "gpu.func": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.func"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.func"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.func"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.func"
        ]
      }
    ],
    "gpu.grid_dim": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.grid_dim"
        ]
      },
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.grid_dim"
        ]
      }
    ],
    "gpu.launch_func": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.launch_func"
        ]
      },
      {
        "className": "{anonymous}::LegalizeLaunchFuncOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.launch_func"
        ]
      }
    ],
    "gpu.module": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.module"
        ]
      }
    ],
    "gpu.thread_id": [
      {
        "className": "{anonymous}::ForallRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.thread_id"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.thread_id"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.thread_id"
        ]
      }
    ],
    "sparse_tensor.crd_translate": [
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.crd_translate"
        ]
      },
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.crd_translate"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::bufferization::AllocTensorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.crd_translate"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.crd_translate"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.crd_translate"
        ]
      }
    ],
    "sparse_tensor.reinterpret_map": [
      {
        "className": "{anonymous}::ForeachOpDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::GenericOpReinterpretMap",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::SparseDisassembleDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::bufferization::AllocTensorOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::bufferization::AllocTensorOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      },
      {
        "className": "{anonymous}::TensorInsertDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.reinterpret_map"
        ]
      }
    ],
    "sparse_tensor.slice.offset": [
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.slice.offset"
        ]
      }
    ],
    "sparse_tensor.slice.stride": [
      {
        "className": "{anonymous}::ForeachRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.slice.stride"
        ]
      }
    ],
    "spirv.func": [
      {
        "className": "{anonymous}::FuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.func"
        ]
      },
      {
        "className": "{anonymous}::GPUFuncOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.func"
        ]
      }
    ],
    "spirv.ControlBarrier": [
      {
        "className": "{anonymous}::GPUBarrierConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ControlBarrier"
        ]
      }
    ],
    "nvvm.read.ptx.sreg.laneid": [
      {
        "className": "{anonymous}::GPULaneIdOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.read.ptx.sreg.laneid"
        ]
      }
    ],
    "rocdl.mbcnt.hi": [
      {
        "className": "{anonymous}::GPULaneIdOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mbcnt.hi"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mbcnt.hi"
        ]
      }
    ],
    "rocdl.mbcnt.lo": [
      {
        "className": "{anonymous}::GPULaneIdOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mbcnt.lo"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mbcnt.lo"
        ]
      }
    ],
    "spirv.CL.printf": [
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.printf"
        ]
      }
    ],
    "spirv.SpecConstant": [
      {
        "className": "{anonymous}::GPUPrintfConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SpecConstant"
        ]
      }
    ],
    "spirv.Return": [
      {
        "className": "{anonymous}::GPUReturnOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Return"
        ]
      },
      {
        "className": "{anonymous}::LoopPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Return"
        ]
      },
      {
        "className": "{anonymous}::ReturnOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Return"
        ]
      },
      {
        "className": "{anonymous}::SelectionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Return"
        ]
      }
    ],
    "gpu.lane_id": [
      {
        "className": "{anonymous}::GPURotateConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.lane_id"
        ]
      },
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.lane_id"
        ]
      },
      {
        "className": "{anonymous}::MoveFuncBodyToWarpExecuteOnLane0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.lane_id"
        ]
      }
    ],
    "spirv.GroupNonUniformRotateKHR": [
      {
        "className": "{anonymous}::GPURotateConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformRotateKHR"
        ]
      }
    ],
    "spirv.GroupNonUniformShuffle": [
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformShuffle"
        ]
      }
    ],
    "spirv.GroupNonUniformShuffleDown": [
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformShuffleDown"
        ]
      }
    ],
    "spirv.GroupNonUniformShuffleUp": [
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformShuffleUp"
        ]
      }
    ],
    "spirv.GroupNonUniformShuffleXor": [
      {
        "className": "{anonymous}::GPUShuffleConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GroupNonUniformShuffleXor"
        ]
      }
    ],
    "nvvm.shfl.sync": [
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.shfl.sync"
        ]
      }
    ],
    "rocdl.ds_bpermute": [
      {
        "className": "{anonymous}::GPUShuffleOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds_bpermute"
        ]
      }
    ],
    "rocdl.readfirstlane": [
      {
        "className": "{anonymous}::GPUSubgroupBroadcastOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.readfirstlane"
        ]
      }
    ],
    "rocdl.readlane": [
      {
        "className": "{anonymous}::GPUSubgroupBroadcastOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.readlane"
        ]
      },
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.readlane"
        ]
      }
    ],
    "nvvm.redux.sync": [
      {
        "className": "{anonymous}::GPUSubgroupReduceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.redux.sync"
        ]
      }
    ],
    "rocdl.wavefrontsize": [
      {
        "className": "{anonymous}::GPUSubgroupSizeOpToROCDL",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wavefrontsize"
        ]
      }
    ],
    "xegpu.load": [
      {
        "className": "{anonymous}::GatherLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::TransferReadLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.load"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadGatherOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load"
        ]
      }
    ],
    "rocdl.load.to.lds": [
      {
        "className": "{anonymous}::GatherToLDSOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.load.to.lds"
        ]
      }
    ],
    "sparse_tensor.binary": [
      {
        "className": "{anonymous}::GenSemiRingSelect",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.binary"
        ]
      }
    ],
    "test.op_with_enum": [
      {
        "className": "{anonymous}::GeneratedConvert0",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_with_enum"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_with_enum"
        ]
      }
    ],
    "nvvm.barrier0": [
      {
        "className": "{anonymous}::GeneratedConvert0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.barrier0"
        ]
      }
    ],
    "rocdl.barrier": [
      {
        "className": "{anonymous}::GeneratedConvert0",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.barrier"
        ]
      }
    ],
    "test.op_with_bit_enum": [
      {
        "className": "{anonymous}::GeneratedConvert1",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_with_bit_enum"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert1",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_with_bit_enum"
        ]
      }
    ],
    "test.ignore_arg_match_src": [
      {
        "className": "{anonymous}::GeneratedConvert10",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.ignore_arg_match_src"
        ]
      }
    ],
    "test.ignore_arg_match_dst": [
      {
        "className": "{anonymous}::GeneratedConvert10",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.ignore_arg_match_dst"
        ]
      }
    ],
    "test.many_arguments": [
      {
        "className": "{anonymous}::GeneratedConvert11",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.many_arguments"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert11",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.many_arguments"
        ]
      }
    ],
    "test.interleaved_operand_attr1": [
      {
        "className": "{anonymous}::GeneratedConvert12",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.interleaved_operand_attr1"
        ]
      }
    ],
    "test.interleaved_operand_attr2": [
      {
        "className": "{anonymous}::GeneratedConvert12",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.interleaved_operand_attr2"
        ]
      }
    ],
    "test.native_code_call1": [
      {
        "className": "{anonymous}::GeneratedConvert13",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.native_code_call1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert13",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.native_code_call1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert14",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.native_code_call1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert14",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.native_code_call1"
        ]
      }
    ],
    "test.native_code_call2": [
      {
        "className": "{anonymous}::GeneratedConvert13",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.native_code_call2"
        ]
      }
    ],
    "test.native_code_call3": [
      {
        "className": "{anonymous}::GeneratedConvert15",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.native_code_call3"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert15",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.native_code_call3"
        ]
      }
    ],
    "test.op_i": [
      {
        "className": "{anonymous}::GeneratedConvert15",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_i"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert7",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_i"
        ]
      }
    ],
    "test.op_k": [
      {
        "className": "{anonymous}::GeneratedConvert15",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_k"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert8",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_k"
        ]
      }
    ],
    "test.native_code_call4": [
      {
        "className": "{anonymous}::GeneratedConvert16",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.native_code_call4"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert16",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.native_code_call4"
        ]
      }
    ],
    "test.native_code_call5": [
      {
        "className": "{anonymous}::GeneratedConvert16",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.native_code_call5"
        ]
      }
    ],
    "test.native_code_call6": [
      {
        "className": "{anonymous}::GeneratedConvert17",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.native_code_call6"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert17",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.native_code_call6"
        ]
      }
    ],
    "test.native_code_call7": [
      {
        "className": "{anonymous}::GeneratedConvert17",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.native_code_call7"
        ]
      }
    ],
    "test.all_attr_constraint_of1": [
      {
        "className": "{anonymous}::GeneratedConvert18",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.all_attr_constraint_of1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert18",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.all_attr_constraint_of1"
        ]
      }
    ],
    "test.all_attr_constraint_of2": [
      {
        "className": "{anonymous}::GeneratedConvert18",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.all_attr_constraint_of2"
        ]
      }
    ],
    "test.op_r": [
      {
        "className": "{anonymous}::GeneratedConvert19",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_r"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert19",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_r"
        ]
      }
    ],
    "test.op_s": [
      {
        "className": "{anonymous}::GeneratedConvert19",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_s"
        ]
      }
    ],
    "test.op_a": [
      {
        "className": "{anonymous}::GeneratedConvert2",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert2",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_a"
        ]
      },
      {
        "className": "{anonymous}::TestNamedPatternRule",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_a"
        ]
      },
      {
        "className": "{anonymous}::TestNamedPatternRule",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_a"
        ]
      }
    ],
    "test.op_b": [
      {
        "className": "{anonymous}::GeneratedConvert2",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert25",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert5",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert6",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_b"
        ]
      },
      {
        "className": "{anonymous}::TestNamedPatternRule",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_b"
        ]
      }
    ],
    "test.symbol_binding_a": [
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.symbol_binding_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.symbol_binding_a"
        ]
      }
    ],
    "test.symbol_binding_b": [
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.symbol_binding_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert22",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.symbol_binding_b"
        ]
      }
    ],
    "test.symbol_binding_c": [
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.symbol_binding_c"
        ]
      }
    ],
    "test.symbol_binding_d": [
      {
        "className": "{anonymous}::GeneratedConvert21",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.symbol_binding_d"
        ]
      }
    ],
    "test.symbol_binding_no_result": [
      {
        "className": "{anonymous}::GeneratedConvert22",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.symbol_binding_no_result"
        ]
      }
    ],
    "test.match_op_attribute1": [
      {
        "className": "{anonymous}::GeneratedConvert23",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.match_op_attribute1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert23",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.match_op_attribute1"
        ]
      }
    ],
    "test.match_op_attribute2": [
      {
        "className": "{anonymous}::GeneratedConvert23",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.match_op_attribute2"
        ]
      }
    ],
    "test.match_op_attribute3": [
      {
        "className": "{anonymous}::GeneratedConvert24",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.match_op_attribute3"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert24",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.match_op_attribute3"
        ]
      }
    ],
    "test.match_op_attribute4": [
      {
        "className": "{anonymous}::GeneratedConvert24",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.match_op_attribute4"
        ]
      }
    ],
    "test.op_c": [
      {
        "className": "{anonymous}::GeneratedConvert25",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_c"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert25",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_c"
        ]
      }
    ],
    "test.i32_enum_attr": [
      {
        "className": "{anonymous}::GeneratedConvert26",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.i32_enum_attr"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert26",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.i32_enum_attr"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert26",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.i32_enum_attr"
        ]
      }
    ],
    "test.i64_enum_attr": [
      {
        "className": "{anonymous}::GeneratedConvert27",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.i64_enum_attr"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert27",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.i64_enum_attr"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert27",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.i64_enum_attr"
        ]
      }
    ],
    "test.three_result": [
      {
        "className": "{anonymous}::GeneratedConvert28",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert28",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert29",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert29",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert30",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert30",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert31",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert31",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.three_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.three_result"
        ]
      }
    ],
    "test.another_three_result": [
      {
        "className": "{anonymous}::GeneratedConvert28",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.another_three_result"
        ]
      }
    ],
    "test.one_result1": [
      {
        "className": "{anonymous}::GeneratedConvert29",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert31",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert32",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result1"
        ]
      }
    ],
    "test.two_result": [
      {
        "className": "{anonymous}::GeneratedConvert29",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert31",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert32",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.two_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert32",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.two_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_result"
        ]
      }
    ],
    "test.another_two_result": [
      {
        "className": "{anonymous}::GeneratedConvert30",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.another_two_result"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.another_two_result"
        ]
      }
    ],
    "test.one_result2": [
      {
        "className": "{anonymous}::GeneratedConvert30",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result2"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert32",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result2"
        ]
      }
    ],
    "test.one_result3": [
      {
        "className": "{anonymous}::GeneratedConvert33",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_result3"
        ]
      }
    ],
    "test.one_variadic_out_one_variadic_in1": [
      {
        "className": "{anonymous}::GeneratedConvert34",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.one_variadic_out_one_variadic_in1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert34",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.one_variadic_out_one_variadic_in1"
        ]
      },
      {
        "className": "{anonymous}::OneVResOneVOperandOp1Converter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_variadic_out_one_variadic_in1"
        ]
      }
    ],
    "test.one_variadic_out_one_variadic_in2": [
      {
        "className": "{anonymous}::GeneratedConvert34",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_variadic_out_one_variadic_in2"
        ]
      }
    ],
    "test.mixed_variadic_in1": [
      {
        "className": "{anonymous}::GeneratedConvert35",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in1"
        ]
      }
    ],
    "test.mixed_variadic_in2": [
      {
        "className": "{anonymous}::GeneratedConvert35",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in2"
        ]
      }
    ],
    "test.mixed_variadic_out1": [
      {
        "className": "{anonymous}::GeneratedConvert36",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_out1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert36",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.mixed_variadic_out1"
        ]
      }
    ],
    "test.mixed_variadic_out2": [
      {
        "className": "{anonymous}::GeneratedConvert36",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_out2"
        ]
      }
    ],
    "test.one_i32_out": [
      {
        "className": "{anonymous}::GeneratedConvert37",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.one_i32_out"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert37",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.one_i32_out"
        ]
      }
    ],
    "test.mixed_variadic_in3": [
      {
        "className": "{anonymous}::GeneratedConvert37",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in3"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert39",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in3"
        ]
      }
    ],
    "test.mixed_variadic_out3": [
      {
        "className": "{anonymous}::GeneratedConvert37",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_out3"
        ]
      }
    ],
    "test.mixed_variadic_in4": [
      {
        "className": "{anonymous}::GeneratedConvert38",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in4"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert40",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in4"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert41",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in4"
        ]
      }
    ],
    "test.mixed_variadic_in5": [
      {
        "className": "{anonymous}::GeneratedConvert38",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in5"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert39",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in5"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert40",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in5"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert41",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in5"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert43",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in5"
        ]
      }
    ],
    "test.op_d": [
      {
        "className": "{anonymous}::GeneratedConvert4",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_d"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert4",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_d"
        ]
      }
    ],
    "test.op_f": [
      {
        "className": "{anonymous}::GeneratedConvert4",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_f"
        ]
      }
    ],
    "test.mixed_variadic_in6": [
      {
        "className": "{anonymous}::GeneratedConvert42",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in6"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert42",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in6"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert43",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_in6"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert44",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.mixed_variadic_in6"
        ]
      }
    ],
    "test.mixed_variadic_optional_in7": [
      {
        "className": "{anonymous}::GeneratedConvert44",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.mixed_variadic_optional_in7"
        ]
      }
    ],
    "test.either_op_a": [
      {
        "className": "{anonymous}::GeneratedConvert45",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.either_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert45",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.either_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert46",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.either_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert46",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.either_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert47",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.either_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert47",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.either_op_a"
        ]
      }
    ],
    "test.either_op_b": [
      {
        "className": "{anonymous}::GeneratedConvert45",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.either_op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert46",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.either_op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert47",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.either_op_b"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert48",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.either_op_b"
        ]
      }
    ],
    "test.either_op_c": [
      {
        "className": "{anonymous}::GeneratedConvert48",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.either_op_c"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert48",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.either_op_c"
        ]
      }
    ],
    "test.op_g": [
      {
        "className": "{anonymous}::GeneratedConvert5",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_g"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert5",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_g"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert6",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_g"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert6",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_g"
        ]
      }
    ],
    "test.loc_src": [
      {
        "className": "{anonymous}::GeneratedConvert50",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.loc_src"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert50",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.loc_src"
        ]
      }
    ],
    "test.loc_dst": [
      {
        "className": "{anonymous}::GeneratedConvert50",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.loc_dst"
        ]
      }
    ],
    "test.loc_src_no_res": [
      {
        "className": "{anonymous}::GeneratedConvert51",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.loc_src_no_res"
        ]
      }
    ],
    "test.loc_dst_no_res": [
      {
        "className": "{anonymous}::GeneratedConvert51",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.loc_dst_no_res"
        ]
      }
    ],
    "test.source_op": [
      {
        "className": "{anonymous}::GeneratedConvert52",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert52",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert53",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert53",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert55",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert55",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert56",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert56",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert57",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.source_op"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert57",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.source_op"
        ]
      }
    ],
    "test.op_x": [
      {
        "className": "{anonymous}::GeneratedConvert52",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_x"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert53",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_x"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_x"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert55",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_x"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert57",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_x"
        ]
      }
    ],
    "test.one_to_two": [
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_to_two"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert56",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.one_to_two"
        ]
      }
    ],
    "test.two_to_one": [
      {
        "className": "{anonymous}::GeneratedConvert54",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_to_one"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert56",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_to_one"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert57",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.two_to_one"
        ]
      }
    ],
    "test.legal_op_a": [
      {
        "className": "{anonymous}::GeneratedConvert58",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op_a"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert64",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op_a"
        ]
      }
    ],
    "test.illegal_op_e": [
      {
        "className": "{anonymous}::GeneratedConvert63",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_e"
        ]
      }
    ],
    "test.no_str_value": [
      {
        "className": "{anonymous}::GeneratedConvert67",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.no_str_value"
        ]
      }
    ],
    "test.has_str_value": [
      {
        "className": "{anonymous}::GeneratedConvert67",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.has_str_value"
        ]
      }
    ],
    "test.variadic_rewrite_src_op": [
      {
        "className": "{anonymous}::GeneratedConvert68",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.variadic_rewrite_src_op"
        ]
      }
    ],
    "test.variadic_rewrite_dst_op": [
      {
        "className": "{anonymous}::GeneratedConvert68",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.variadic_rewrite_dst_op"
        ]
      }
    ],
    "test.prop_pattern_op_1": [
      {
        "className": "{anonymous}::GeneratedConvert69",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.prop_pattern_op_1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert69",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.prop_pattern_op_1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert69",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.prop_pattern_op_1"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert70",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.prop_pattern_op_1"
        ]
      }
    ],
    "test.prop_pattern_op_2": [
      {
        "className": "{anonymous}::GeneratedConvert69",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.prop_pattern_op_2"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert70",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.prop_pattern_op_2"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert70",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.prop_pattern_op_2"
        ]
      }
    ],
    "test.op_h": [
      {
        "className": "{anonymous}::GeneratedConvert7",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_h"
        ]
      }
    ],
    "test.op_j": [
      {
        "className": "{anonymous}::GeneratedConvert8",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_j"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert8",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_j"
        ]
      }
    ],
    "test.op_m": [
      {
        "className": "{anonymous}::GeneratedConvert9",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_m"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert9",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_m"
        ]
      },
      {
        "className": "{anonymous}::GeneratedConvert9",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_m"
        ]
      }
    ],
    "llvm.cmpxchg": [
      {
        "className": "{anonymous}::GenericAtomicRMWOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.cmpxchg"
        ]
      }
    ],
    "bufferization.dealloc_tensor": [
      {
        "className": "{anonymous}::GenericOpScheduler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc_tensor"
        ]
      },
      {
        "className": "{anonymous}::StageUnorderedSparseOps<mlir::sparse_tensor::ConvertOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "bufferization.dealloc_tensor"
        ]
      }
    ],
    "math.log1p": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::Log1pApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::Log1pOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log1p"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log1pOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log1p"
        ]
      }
    ],
    "math.rsqrt": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::RsqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RsqrtOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.rsqrt"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.rsqrt"
        ]
      }
    ],
    "sparse_tensor.reduce": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.reduce"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.reduce"
        ]
      }
    ],
    "sparse_tensor.unary": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.unary"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.unary"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,0]>>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,0]>>.begin"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,0]>>.deref": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,0]>>.deref"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,0]>>.next": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,0]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,0]>>.next"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,0]>>.not_end": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,0]>>.not_end"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,1]>>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,1]>>.begin"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,1]>>.deref": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,1]>>.deref"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,1]>>.next": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,1]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,1]>>.next"
        ]
      }
    ],
    "ne_sub<trivial<compressed[0,1]>>.not_end": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ne_sub<trivial<compressed[0,1]>>.not_end"
        ]
      }
    ],
    "sparse_tensor.coiterate": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.coiterate"
        ]
      }
    ],
    "sparse_tensor.expand": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.expand"
        ]
      },
      {
        "className": "{anonymous}::TensorAllocDemapper<mlir::tensor::EmptyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.expand"
        ]
      }
    ],
    "sparse_tensor.extract_iteration_space": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.extract_iteration_space"
        ]
      }
    ],
    "sparse_tensor.extract_value": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.extract_value"
        ]
      },
      {
        "className": "{anonymous}::SparseCoIterateOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.extract_value"
        ]
      }
    ],
    "subsect<trivial<compressed[0,0]>>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.begin"
        ]
      }
    ],
    "subsect<trivial<compressed[0,0]>>.deref": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.deref"
        ]
      }
    ],
    "subsect<trivial<compressed[0,0]>>.next": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.next"
        ]
      }
    ],
    "subsect<trivial<compressed[0,0]>>.not_end": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,0]>>.not_end"
        ]
      }
    ],
    "subsect<trivial<compressed[0,1]>>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.begin"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.begin"
        ]
      }
    ],
    "subsect<trivial<compressed[0,1]>>.deref": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.deref"
        ]
      }
    ],
    "subsect<trivial<compressed[0,1]>>.next": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.next"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.next"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.next"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.next"
        ]
      }
    ],
    "subsect<trivial<compressed[0,1]>>.not_end": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.not_end"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "subsect<trivial<compressed[0,1]>>.not_end"
        ]
      }
    ],
    "trivial<batch[1,0]>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,0]>.begin"
        ]
      }
    ],
    "trivial<batch[1,0]>.locate": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,0]>.locate"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,0]>.locate"
        ]
      }
    ],
    "trivial<batch[1,1]>.begin": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.begin"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.begin"
        ]
      }
    ],
    "trivial<batch[1,1]>.locate": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.locate"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.locate"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.locate"
        ]
      },
      {
        "className": "{anonymous}::WhileUnusedResult",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "trivial<batch[1,1]>.locate"
        ]
      }
    ],
    "sparse_tensor.number_of_entries": [
      {
        "className": "{anonymous}::GenericOpSparsifier",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      },
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      },
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::CollapseShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      },
      {
        "className": "{anonymous}::Sparse2SparseReshapeRewriter<mlir::tensor::ExpandShapeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      },
      {
        "className": "{anonymous}::TensorReshapeRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.number_of_entries"
        ]
      }
    ],
    "gpu.all_reduce": [
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.all_reduce"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.all_reduce"
        ]
      },
      {
        "className": "{anonymous}::GpuAllReduceRewrite",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.all_reduce"
        ]
      },
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.all_reduce"
        ]
      }
    ],
    "gpu.global_id": [
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "gpu.global_id"
        ]
      },
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "gpu.global_id"
        ]
      }
    ],
    "index.add": [
      {
        "className": "{anonymous}::GpuGlobalIdRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.add"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.add"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.add"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.add"
        ]
      }
    ],
    "foo.maybe_eligible_op": [
      {
        "className": "{anonymous}::HoistEligibleOps",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.maybe_eligible_op"
        ]
      },
      {
        "className": "{anonymous}::MakeOpEligible",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "foo.maybe_eligible_op"
        ]
      }
    ],
    "emitc.if": [
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.if"
        ]
      }
    ],
    "test.consumer_of_complex": [
      {
        "className": "{anonymous}::IfLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.consumer_of_complex"
        ]
      }
    ],
    "spirv.Image": [
      {
        "className": "{anonymous}::ImageLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Image"
        ]
      }
    ],
    "spirv.ImageFetch": [
      {
        "className": "{anonymous}::ImageLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ImageFetch"
        ]
      }
    ],
    "cf.switch": [
      {
        "className": "{anonymous}::IndexSwitchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "cf.switch"
        ]
      }
    ],
    "shape.size_to_index": [
      {
        "className": "{anonymous}::IndexToSizeToIndexCanonicalization",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.size_to_index"
        ]
      },
      {
        "className": "{anonymous}::IndexToSizeToIndexCanonicalization",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.size_to_index"
        ]
      }
    ],
    "vector.to_elements": [
      {
        "className": "{anonymous}::InsertChainFullyInitialized",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.to_elements"
        ]
      },
      {
        "className": "{anonymous}::LinearizeVectorToElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.to_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollToElements",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.to_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollToElements",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.to_elements"
        ]
      },
      {
        "className": "{anonymous}::UnrollToElements",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.to_elements"
        ]
      }
    ],
    "arm_sme.intr.write.horiz": [
      {
        "className": "{anonymous}::InsertTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.write.horiz"
        ]
      }
    ],
    "arm_sme.intr.write.vert": [
      {
        "className": "{anonymous}::InsertTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.write.vert"
        ]
      }
    ],
    "spirv.PtrAccessChain": [
      {
        "className": "{anonymous}::IntLoadOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.PtrAccessChain"
        ]
      },
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.PtrAccessChain"
        ]
      }
    ],
    "llvm.intr.abs": [
      {
        "className": "{anonymous}::IntOpWithFlagLowering<mlir::math::AbsIOp, mlir::LLVM::AbsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.abs"
        ]
      }
    ],
    "llvm.intr.ctlz": [
      {
        "className": "{anonymous}::IntOpWithFlagLowering<mlir::math::CountLeadingZerosOp, mlir::LLVM::CountLeadingZerosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.ctlz"
        ]
      }
    ],
    "llvm.intr.cttz": [
      {
        "className": "{anonymous}::IntOpWithFlagLowering<mlir::math::CountTrailingZerosOp, mlir::LLVM::CountTrailingZerosOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.cttz"
        ]
      }
    ],
    "spirv.Not": [
      {
        "className": "{anonymous}::IntStoreOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Not"
        ]
      }
    ],
    "vector.interleave": [
      {
        "className": "{anonymous}::InterleaveToShuffle",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::InterleaveToShuffle",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtSIOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::ExtUIOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::SIToFPOp, true>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntExt<mlir::arith::UIToFPOp, false>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::ShuffleInterleave",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.interleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollInterleaveOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.interleave"
        ]
      }
    ],
    "llvm.intr.is.fpclass": [
      {
        "className": "{anonymous}::IsFiniteOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.is.fpclass"
        ]
      },
      {
        "className": "{anonymous}::IsNaNOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.is.fpclass"
        ]
      }
    ],
    "llvm.fence": [
      {
        "className": "{anonymous}::LDSBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.fence"
        ]
      }
    ],
    "rocdl.s.barrier": [
      {
        "className": "{anonymous}::LDSBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.barrier"
        ]
      }
    ],
    "rocdl.s.barrier.signal": [
      {
        "className": "{anonymous}::LDSBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.barrier.signal"
        ]
      }
    ],
    "rocdl.s.barrier.wait": [
      {
        "className": "{anonymous}::LDSBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.barrier.wait"
        ]
      }
    ],
    "vector.type_cast": [
      {
        "className": "{anonymous}::LegalizeSVEMaskAllocation<mlir::memref::AllocaOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskTypeCastConversion",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskTypeCastConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::LegalizeSVEMaskTypeCastConversion",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::VectorTransferFullPartialRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.type_cast"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::TransferOpConversion<mlir::vector::TransferWriteOp>",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "insert op",
        "operations": [
          "vector.type_cast"
        ]
      }
    ],
    "arm_sve.convert_from_svbool": [
      {
        "className": "{anonymous}::LegalizeSVEMaskLoadConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.convert_from_svbool"
        ]
      }
    ],
    "arm_sve.convert_to_svbool": [
      {
        "className": "{anonymous}::LegalizeSVEMaskStoreConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.convert_to_svbool"
        ]
      }
    ],
    "gpu.create_2to4_spmat": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.create_2to4_spmat"
        ]
      }
    ],
    "gpu.create_bsr": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.create_bsr"
        ]
      }
    ],
    "gpu.create_coo": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.create_coo"
        ]
      }
    ],
    "gpu.create_csr": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.create_csr"
        ]
      }
    ],
    "gpu.create_dn_tensor": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.create_dn_tensor"
        ]
      }
    ],
    "gpu.destroy_dn_tensor": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.destroy_dn_tensor"
        ]
      }
    ],
    "gpu.destroy_sp_mat": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.destroy_sp_mat"
        ]
      }
    ],
    "gpu.sddmm": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.sddmm"
        ]
      }
    ],
    "gpu.sddmm_buffer_size": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.sddmm_buffer_size"
        ]
      }
    ],
    "gpu.set_csr_pointers": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.set_csr_pointers"
        ]
      }
    ],
    "gpu.spgemm_copy": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spgemm_copy"
        ]
      }
    ],
    "gpu.spgemm_create_descr": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spgemm_create_descr"
        ]
      }
    ],
    "gpu.spgemm_destroy_descr": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spgemm_destroy_descr"
        ]
      }
    ],
    "gpu.spgemm_work_estimation_or_compute": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spgemm_work_estimation_or_compute"
        ]
      }
    ],
    "gpu.spmat_get_size": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spmat_get_size"
        ]
      }
    ],
    "gpu.spmm": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spmm"
        ]
      }
    ],
    "gpu.spmm_buffer_size": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spmm_buffer_size"
        ]
      }
    ],
    "gpu.spmv": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spmv"
        ]
      }
    ],
    "gpu.spmv_buffer_size": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.spmv_buffer_size"
        ]
      }
    ],
    "sparse_tensor.assemble": [
      {
        "className": "{anonymous}::LinalgOpRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.assemble"
        ]
      },
      {
        "className": "{anonymous}::SparseAssembleDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.assemble"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.assemble"
        ]
      }
    ],
    "affine.load": [
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.load"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.load"
        ]
      }
    ],
    "affine.store": [
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::affine::AffineForOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfCollapseShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfExpandShapeOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.store"
        ]
      },
      {
        "className": "{anonymous}::StoreOpOfSubViewOpFolder<mlir::affine::AffineStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.store"
        ]
      }
    ],
    "linalg.conv_1d": [
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_1d"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.conv_1d"
        ]
      }
    ],
    "linalg.conv_3d": [
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ForOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_3d"
        ]
      },
      {
        "className": "{anonymous}::LinalgRewritePattern<mlir::scf::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.conv_3d"
        ]
      }
    ],
    "xegpu.store": [
      {
        "className": "{anonymous}::LoadDistribution",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::ScatterLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::StoreDistribution",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreScatterOpWithOffsets",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::WarpOpConstant",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::WarpOpDeadResult",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::WarpOpForwardOperand",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfIfOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "xegpu.store"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreScatterOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store"
        ]
      }
    ],
    "nvgpu.ldmatrix": [
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::nvgpu::LdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::nvgpu::LdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      },
      {
        "className": "{anonymous}::LoadOpOfSubViewOpFolder<mlir::nvgpu::LdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      },
      {
        "className": "{anonymous}::LoadStoreLikeOpRewriter<mlir::nvgpu::LdMatrixOp, {anonymous}::getLdMatrixOpSrcMemRef, {anonymous}::rebuildLdMatrixOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "nvgpu.ldmatrix"
        ]
      }
    ],
    "xevm.blockload2d": [
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::LoadNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.blockload2d"
        ]
      }
    ],
    "xevm.blockprefetch2d": [
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::PrefetchNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.blockprefetch2d"
        ]
      }
    ],
    "xevm.blockstore2d": [
      {
        "className": "{anonymous}::LoadStorePrefetchNdToXeVMPattern<mlir::xegpu::StoreNdOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.blockstore2d"
        ]
      }
    ],
    "arm_sme.intr.ld1b.horiz": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1b.horiz"
        ]
      }
    ],
    "arm_sme.intr.ld1b.vert": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1b.vert"
        ]
      }
    ],
    "arm_sme.intr.ld1d.horiz": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1d.horiz"
        ]
      }
    ],
    "arm_sme.intr.ld1d.vert": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1d.vert"
        ]
      }
    ],
    "arm_sme.intr.ld1h.vert": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1h.vert"
        ]
      }
    ],
    "arm_sme.intr.ld1q.horiz": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1q.horiz"
        ]
      }
    ],
    "arm_sme.intr.ld1q.vert": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1q.vert"
        ]
      }
    ],
    "arm_sme.intr.ld1w.vert": [
      {
        "className": "{anonymous}::LoadTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.ld1w.vert"
        ]
      }
    ],
    "math.log2": [
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log2"
        ]
      },
      {
        "className": "{anonymous}::Log2Approximation",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.log2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log2"
        ]
      },
      {
        "className": "{anonymous}::ReuseF32Expansion<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.log2"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log2"
        ]
      }
    ],
    "complex.abs": [
      {
        "className": "{anonymous}::LogOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.abs"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.abs"
        ]
      },
      {
        "className": "{anonymous}::SignOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.abs"
        ]
      }
    ],
    "arm_neon.intr.bfmmla": [
      {
        "className": "{anonymous}::LowerContractionToNeonBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_neon.intr.bfmmla"
        ]
      }
    ],
    "arm_neon.intr.smmla": [
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_neon.intr.smmla"
        ]
      }
    ],
    "arm_neon.intr.ummla": [
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_neon.intr.ummla"
        ]
      }
    ],
    "arm_neon.intr.usmmla": [
      {
        "className": "{anonymous}::LowerContractionToNeonI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_neon.intr.usmmla"
        ]
      }
    ],
    "arm_sve.dupq_lane": [
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.dupq_lane"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.dupq_lane"
        ]
      }
    ],
    "arm_sve.intr.bfmmla": [
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.bfmmla"
        ]
      }
    ],
    "vector.deinterleave": [
      {
        "className": "{anonymous}::LowerContractionToSVEBFMMLAPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.deinterleave"
        ]
      },
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.deinterleave"
        ]
      },
      {
        "className": "{anonymous}::RewriteAlignedSubByteIntTrunc",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.deinterleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.deinterleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "vector.deinterleave"
        ]
      },
      {
        "className": "{anonymous}::UnrollDeinterleaveOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.deinterleave"
        ]
      }
    ],
    "arm_sve.smmla": [
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.smmla"
        ]
      }
    ],
    "arm_sve.ummla": [
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.ummla"
        ]
      }
    ],
    "arm_sve.usmmla": [
      {
        "className": "{anonymous}::LowerContractionToSVEI8MMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.usmmla"
        ]
      }
    ],
    "index.mins": [
      {
        "className": "{anonymous}::LowerIllegalTransposeStoreViaZA",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.mins"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x16bf16.1k": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x16bf16.1k"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x16f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x16f16"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x1f32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x1f32"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x2bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x2bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.bf8.bf8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.bf8.bf8"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.bf8.fp8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.bf8.fp8"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.f16"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.fp8.bf8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.fp8.bf8"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x32.fp8.fp8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x32.fp8.fp8"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x4bf16.1k": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x4bf16.1k"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x4f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x4f16"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x4f32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x4f32"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x8.xf32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x8.xf32"
        ]
      }
    ],
    "rocdl.mfma.f32.16x16x8bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.16x16x8bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.bf8.bf8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.bf8.bf8"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.bf8.fp8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.bf8.fp8"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.f16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.fp8.bf8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.fp8.bf8"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x16.fp8.fp8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x16.fp8.fp8"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x1f32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x1f32"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x2bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x2bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x2f32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x2f32"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x4.xf32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x4.xf32"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x4bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x4bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x4bf16.1k": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x4bf16.1k"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x4f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x4f16"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x8bf16.1k": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x8bf16.1k"
        ]
      }
    ],
    "rocdl.mfma.f32.32x32x8f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.32x32x8f16"
        ]
      }
    ],
    "rocdl.mfma.f32.4x4x1f32": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.4x4x1f32"
        ]
      }
    ],
    "rocdl.mfma.f32.4x4x2bf16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.4x4x2bf16"
        ]
      }
    ],
    "rocdl.mfma.f32.4x4x4bf16.1k": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.4x4x4bf16.1k"
        ]
      }
    ],
    "rocdl.mfma.f32.4x4x4f16": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f32.4x4x4f16"
        ]
      }
    ],
    "rocdl.mfma.f64.16x16x4f64": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f64.16x16x4f64"
        ]
      }
    ],
    "rocdl.mfma.f64.4x4x4f64": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.f64.4x4x4f64"
        ]
      }
    ],
    "rocdl.mfma.i32.16x16x16i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.16x16x16i8"
        ]
      }
    ],
    "rocdl.mfma.i32.16x16x32.i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.16x16x32.i8"
        ]
      }
    ],
    "rocdl.mfma.i32.16x16x4i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.16x16x4i8"
        ]
      }
    ],
    "rocdl.mfma.i32.16x16x64.i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.16x16x64.i8"
        ]
      }
    ],
    "rocdl.mfma.i32.32x32x16.i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.32x32x16.i8"
        ]
      }
    ],
    "rocdl.mfma.i32.32x32x32.i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.32x32x32.i8"
        ]
      }
    ],
    "rocdl.mfma.i32.32x32x4i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.32x32x4i8"
        ]
      }
    ],
    "rocdl.mfma.i32.32x32x8i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.32x32x8i8"
        ]
      }
    ],
    "rocdl.mfma.i32.4x4x4i8": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.i32.4x4x4i8"
        ]
      }
    ],
    "rocdl.mfma.scale.f32.16x16x128.f8f6f4": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.scale.f32.16x16x128.f8f6f4"
        ]
      },
      {
        "className": "{anonymous}::ScaledMFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.scale.f32.16x16x128.f8f6f4"
        ]
      }
    ],
    "rocdl.mfma.scale.f32.32x32x64.f8f6f4": [
      {
        "className": "{anonymous}::MFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.scale.f32.32x32x64.f8f6f4"
        ]
      },
      {
        "className": "{anonymous}::ScaledMFMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.mfma.scale.f32.32x32x64.f8f6f4"
        ]
      }
    ],
    "test.one_region_with_operands_op": [
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.one_region_with_operands_op"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.one_region_with_operands_op"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.one_region_with_operands_op"
        ]
      }
    ],
    "foo.yield": [
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.yield"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "foo.yield"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.yield"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "foo.yield"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.yield"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "foo.yield"
        ]
      }
    ],
    "test.isolated_one_region_op": [
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithNoOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.isolated_one_region_op"
        ]
      },
      {
        "className": "{anonymous}::MakeIsolatedFromAboveAndCloneOpsWithOperands",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.isolated_one_region_op"
        ]
      },
      {
        "className": "{anonymous}::SimpleMakeIsolatedFromAbove",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.isolated_one_region_op"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fmaximum": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fmaximum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fmaximum"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fminimum": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fminimum"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fminimum"
        ]
      }
    ],
    "llvm.intr.vp.reduce.add": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.add"
        ]
      }
    ],
    "llvm.intr.vp.reduce.and": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.and"
        ]
      }
    ],
    "llvm.intr.vp.reduce.fadd": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.fadd"
        ]
      }
    ],
    "llvm.intr.vp.reduce.fmax": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.fmax"
        ]
      }
    ],
    "llvm.intr.vp.reduce.fmin": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.fmin"
        ]
      }
    ],
    "llvm.intr.vp.reduce.fmul": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.fmul"
        ]
      }
    ],
    "llvm.intr.vp.reduce.mul": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.mul"
        ]
      }
    ],
    "llvm.intr.vp.reduce.or": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.or"
        ]
      }
    ],
    "llvm.intr.vp.reduce.smax": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.smax"
        ]
      }
    ],
    "llvm.intr.vp.reduce.smin": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.smin"
        ]
      }
    ],
    "llvm.intr.vp.reduce.umax": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.umax"
        ]
      }
    ],
    "llvm.intr.vp.reduce.umin": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.umin"
        ]
      }
    ],
    "llvm.intr.vp.reduce.xor": [
      {
        "className": "{anonymous}::MaskedReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vp.reduce.xor"
        ]
      }
    ],
    "linalg.quantized_batch_matmul": [
      {
        "className": "{anonymous}::MatMulConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.quantized_batch_matmul"
        ]
      }
    ],
    "index.cmp": [
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "index.cmp"
        ]
      }
    ],
    "test.increment": [
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.increment"
        ]
      }
    ],
    "test.with_bounds": [
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.with_bounds"
        ]
      }
    ],
    "index.bool.constant": [
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.bool.constant"
        ]
      }
    ],
    "test.constant": [
      {
        "className": "{anonymous}::MaterializeKnownConstantValues",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.constant"
        ]
      }
    ],
    "tosa.resize": [
      {
        "className": "{anonymous}::MaterializeResizeBroadcast",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.resize"
        ]
      }
    ],
    "rocdl.s.wait.dscnt": [
      {
        "className": "{anonymous}::MemoryCounterWaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.wait.dscnt"
        ]
      }
    ],
    "rocdl.s.wait.expcnt": [
      {
        "className": "{anonymous}::MemoryCounterWaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.wait.expcnt"
        ]
      }
    ],
    "rocdl.s.wait.loadcnt": [
      {
        "className": "{anonymous}::MemoryCounterWaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.wait.loadcnt"
        ]
      }
    ],
    "rocdl.s.wait.storecnt": [
      {
        "className": "{anonymous}::MemoryCounterWaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.wait.storecnt"
        ]
      }
    ],
    "rocdl.s.waitcnt": [
      {
        "className": "{anonymous}::MemoryCounterWaitOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.s.waitcnt"
        ]
      }
    ],
    "spirv.GenericCastToPtr": [
      {
        "className": "{anonymous}::MemorySpaceCastOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GenericCastToPtr"
        ]
      }
    ],
    "spirv.PtrCastToGeneric": [
      {
        "className": "{anonymous}::MemorySpaceCastOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.PtrCastToGeneric"
        ]
      }
    ],
    "spirv.CL.fmax": [
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MaxNumFOp, mlir::spirv::CLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmax"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::CLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmax"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::CLFMaxOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmax"
        ]
      }
    ],
    "spirv.GL.FMax": [
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MaxNumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMax"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MaximumFOp, mlir::spirv::GLFMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMax"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::GLFMaxOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMax"
        ]
      }
    ],
    "spirv.CL.fmin": [
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MinNumFOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmin"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmin"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::CLFMaxOp, mlir::spirv::CLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.CL.fmin"
        ]
      }
    ],
    "spirv.GL.FMin": [
      {
        "className": "{anonymous}::MinNumMaxNumFOpPattern<mlir::arith::MinNumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMin"
        ]
      },
      {
        "className": "{anonymous}::MinimumMaximumFOpPattern<mlir::arith::MinimumFOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMin"
        ]
      },
      {
        "className": "{anonymous}::VectorReductionFloatMinMax<mlir::spirv::GLFMaxOp, mlir::spirv::GLFMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.FMin"
        ]
      }
    ],
    "nvvm.ldmatrix": [
      {
        "className": "{anonymous}::MmaLdMatrixOpToNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.ldmatrix"
        ]
      }
    ],
    "nvgpu.mma.sync": [
      {
        "className": "{anonymous}::MmaSyncF32ToTF32Pattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "nvgpu.mma.sync"
        ]
      }
    ],
    "nvvm.mma.sync": [
      {
        "className": "{anonymous}::MmaSyncOptoNVVM",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mma.sync"
        ]
      }
    ],
    "builtin.module": [
      {
        "className": "{anonymous}::ModuleConversionPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "builtin.module"
        ]
      }
    ],
    "test.move_after_parent_op": [
      {
        "className": "{anonymous}::MoveAfterParentOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.move_after_parent_op"
        ]
      }
    ],
    "test.move_before_parent_op": [
      {
        "className": "{anonymous}::MoveBeforeParentOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.move_before_parent_op"
        ]
      }
    ],
    "nvvm.cp.async.shared.global": [
      {
        "className": "{anonymous}::NVGPUAsyncCopyLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.cp.async.shared.global"
        ]
      }
    ],
    "nvgpu.device_async_copy": [
      {
        "className": "{anonymous}::NVGPUAsyncCopyOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "nvgpu.device_async_copy"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvgpu.device_async_copy"
        ]
      },
      {
        "className": "{anonymous}::NVGPUAsyncCopyOpSubViewOpFolder",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "nvgpu.device_async_copy"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "nvgpu.device_async_copy"
        ]
      }
    ],
    "nvvm.cp.async.commit.group": [
      {
        "className": "{anonymous}::NVGPUAsyncCreateGroupLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.cp.async.commit.group"
        ]
      }
    ],
    "nvvm.cp.async.wait.group": [
      {
        "className": "{anonymous}::NVGPUAsyncWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.cp.async.wait.group"
        ]
      }
    ],
    "nvvm.mbarrier.arrive.expect_tx.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierArriveExpectTxLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.arrive.expect_tx.shared"
        ]
      }
    ],
    "nvvm.mbarrier.arrive.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierArriveLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.arrive.shared"
        ]
      }
    ],
    "nvvm.mbarrier.arrive.nocomplete.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierArriveNoCompleteLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.arrive.nocomplete.shared"
        ]
      }
    ],
    "memref.get_global": [
      {
        "className": "{anonymous}::NVGPUMBarrierCreateLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.get_global"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.get_global"
        ]
      }
    ],
    "memref.global": [
      {
        "className": "{anonymous}::NVGPUMBarrierCreateLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.global"
        ]
      }
    ],
    "nvvm.mbarrier.init.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierInitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.init.shared"
        ]
      }
    ],
    "nvvm.mbarrier.test.wait.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierTestWaitLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.test.wait.shared"
        ]
      }
    ],
    "nvvm.mbarrier.try_wait.parity.shared": [
      {
        "className": "{anonymous}::NVGPUMBarrierTryWaitParityLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.mbarrier.try_wait.parity.shared"
        ]
      }
    ],
    "nvvm.cp.async.bulk.tensor.shared.cluster.global": [
      {
        "className": "{anonymous}::NVGPUTmaAsyncLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.cp.async.bulk.tensor.shared.cluster.global"
        ]
      }
    ],
    "nvvm.cp.async.bulk.tensor.global.shared.cta": [
      {
        "className": "{anonymous}::NVGPUTmaAsyncStoreOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.cp.async.bulk.tensor.global.shared.cta"
        ]
      }
    ],
    "nvvm.fence.proxy.acquire": [
      {
        "className": "{anonymous}::NVGPUTmaFenceOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.fence.proxy.acquire"
        ]
      }
    ],
    "nvvm.prefetch": [
      {
        "className": "{anonymous}::NVGPUTmaPrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.prefetch"
        ]
      }
    ],
    "nvvm.wgmma.commit.group.sync.aligned": [
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wgmma.commit.group.sync.aligned"
        ]
      }
    ],
    "nvvm.wgmma.fence.aligned": [
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wgmma.fence.aligned"
        ]
      }
    ],
    "nvvm.wgmma.mma_async": [
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wgmma.mma_async"
        ]
      }
    ],
    "nvvm.wgmma.wait.group.sync.aligned": [
      {
        "className": "{anonymous}::NVGPUWarpgroupMmaOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wgmma.wait.group.sync.aligned"
        ]
      }
    ],
    "emitc.unary_minus": [
      {
        "className": "{anonymous}::NegFOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.unary_minus"
        ]
      }
    ],
    "sparse_tensor.new": [
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.new"
        ]
      },
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.new"
        ]
      },
      {
        "className": "{anonymous}::NewRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.new"
        ]
      }
    ],
    "shape.const_size": [
      {
        "className": "{anonymous}::NumElementsOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_size"
        ]
      },
      {
        "className": "{anonymous}::RankShapeOfCanonicalizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.const_size"
        ]
      }
    ],
    "shape.reduce": [
      {
        "className": "{anonymous}::NumElementsOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "shape.reduce"
        ]
      }
    ],
    "omp.critical": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::CriticalOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.critical"
        ]
      }
    ],
    "omp.distribute": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::DistributeOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.distribute"
        ]
      }
    ],
    "omp.loop_nest": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::LoopNestOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.loop_nest"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.loop_nest"
        ]
      }
    ],
    "omp.master": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::MasterOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.master"
        ]
      }
    ],
    "omp.ordered": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::OrderedOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.ordered"
        ]
      }
    ],
    "omp.parallel": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::ParallelOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.parallel"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.parallel"
        ]
      }
    ],
    "omp.private": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::PrivateClauseOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.private"
        ]
      }
    ],
    "omp.target_allocmem": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::TargetAllocMemOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.target_allocmem"
        ]
      }
    ],
    "omp.taskloop": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::TaskloopOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.taskloop"
        ]
      }
    ],
    "omp.teams": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::TeamsOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.teams"
        ]
      }
    ],
    "omp.yield": [
      {
        "className": "{anonymous}::OpenMPOpConversion<mlir::omp::YieldOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.yield"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "omp.yield"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.yield"
        ]
      }
    ],
    "sparse_tensor.out": [
      {
        "className": "{anonymous}::OutRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.out"
        ]
      }
    ],
    "arm_sme.outerproduct": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arm_sme.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arm_sme.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arm_sme.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arm_sme.outerproduct"
        ]
      },
      {
        "className": "{anonymous}::VectorOuterProductToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.outerproduct"
        ]
      }
    ],
    "arm_sme.fmopa_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.fmopa_2way"
        ]
      },
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arm_sme.fmopa_2way"
        ]
      }
    ],
    "arm_sme.fmops_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.fmops_2way"
        ]
      }
    ],
    "arm_sme.smopa_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.smopa_2way"
        ]
      }
    ],
    "arm_sme.smops_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.smops_2way"
        ]
      }
    ],
    "arm_sme.umopa_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.umopa_2way"
        ]
      }
    ],
    "arm_sme.umops_2way": [
      {
        "className": "{anonymous}::OuterProductFusion2Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.umops_2way"
        ]
      }
    ],
    "arm_sme.smopa_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.smopa_4way"
        ]
      }
    ],
    "arm_sme.smops_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.smops_4way"
        ]
      }
    ],
    "arm_sme.sumopa_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.sumopa_4way"
        ]
      }
    ],
    "arm_sme.sumops_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.sumops_4way"
        ]
      }
    ],
    "arm_sme.umopa_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.umopa_4way"
        ]
      }
    ],
    "arm_sme.umops_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.umops_4way"
        ]
      }
    ],
    "arm_sme.usmopa_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.usmopa_4way"
        ]
      }
    ],
    "arm_sme.usmops_4way": [
      {
        "className": "{anonymous}::OuterProductFusion4Way",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.usmops_4way"
        ]
      }
    ],
    "arm_sme.intr.mopa.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMopa2WayOp, mlir::arm_sme::aarch64_sme_mopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.mopa.wide"
        ]
      }
    ],
    "arm_sme.intr.mops.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::FMops2WayOp, mlir::arm_sme::aarch64_sme_mops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.mops.wide"
        ]
      }
    ],
    "arm_sme.intr.smopa.za32": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa2WayOp, mlir::arm_sme::aarch64_sme_smopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.smopa.za32"
        ]
      }
    ],
    "arm_sme.intr.smopa.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMopa4WayOp, mlir::arm_sme::aarch64_sme_smopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.smopa.wide"
        ]
      }
    ],
    "arm_sme.intr.smops.za32": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops2WayOp, mlir::arm_sme::aarch64_sme_smops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.smops.za32"
        ]
      }
    ],
    "arm_sme.intr.smops.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SMops4WayOp, mlir::arm_sme::aarch64_sme_smops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.smops.wide"
        ]
      }
    ],
    "arm_sme.intr.sumopa.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMopa4WayOp, mlir::arm_sme::aarch64_sme_sumopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.sumopa.wide"
        ]
      }
    ],
    "arm_sme.intr.sumops.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::SuMops4WayOp, mlir::arm_sme::aarch64_sme_sumops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.sumops.wide"
        ]
      }
    ],
    "arm_sme.intr.umopa.za32": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa2WayOp, mlir::arm_sme::aarch64_sme_umopa_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.umopa.za32"
        ]
      }
    ],
    "arm_sme.intr.umopa.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMopa4WayOp, mlir::arm_sme::aarch64_sme_umopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.umopa.wide"
        ]
      }
    ],
    "arm_sme.intr.umops.za32": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops2WayOp, mlir::arm_sme::aarch64_sme_umops_za32>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.umops.za32"
        ]
      }
    ],
    "arm_sme.intr.umops.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UMops4WayOp, mlir::arm_sme::aarch64_sme_umops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.umops.wide"
        ]
      }
    ],
    "arm_sme.intr.usmopa.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMopa4WayOp, mlir::arm_sme::aarch64_sme_usmopa_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.usmopa.wide"
        ]
      }
    ],
    "arm_sme.intr.usmops.wide": [
      {
        "className": "{anonymous}::OuterProductWideningOpConversion<mlir::arm_sme::UsMops4WayOp, mlir::arm_sme::aarch64_sme_usmops_wide>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.usmops.wide"
        ]
      }
    ],
    "amdgpu.scaled_mfma": [
      {
        "className": "{anonymous}::PackScales",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "amdgpu.scaled_mfma"
        ]
      }
    ],
    "omp.declare_reduction": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.declare_reduction"
        ]
      }
    ],
    "omp.terminator": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.terminator"
        ]
      }
    ],
    "omp.wsloop": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "omp.wsloop"
        ]
      }
    ],
    "test.payload": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.payload"
        ]
      }
    ],
    "test.payload1": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.payload1"
        ]
      }
    ],
    "test.payload2": [
      {
        "className": "{anonymous}::ParallelOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.payload2"
        ]
      }
    ],
    "magic.op": [
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "magic.op"
        ]
      },
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "magic.op"
        ]
      }
    ],
    "test.produce": [
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.produce"
        ]
      }
    ],
    "test.transform": [
      {
        "className": "{anonymous}::ParallelOpSingleOrZeroIterationDimsFolder",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.transform"
        ]
      }
    ],
    "gpu.launch": [
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.launch"
        ]
      }
    ],
    "gpu.terminator": [
      {
        "className": "{anonymous}::ParallelToGpuLaunchLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.terminator"
        ]
      }
    ],
    "math.roundeven": [
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::CastOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.roundeven"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundEvenOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.roundeven"
        ]
      }
    ],
    "math.powf": [
      {
        "className": "{anonymous}::PointwiseConverter<mlir::tosa::PowOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::PowFStrengthReduction",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::PowOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::SqrtOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::PowFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.powf"
        ]
      },
      {
        "className": "{anonymous}::WgToSgElementwiseOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.powf"
        ]
      }
    ],
    "spirv.ConvertFToS": [
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertFToS"
        ]
      },
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::FPToSIOp, mlir::spirv::ConvertFToSOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertFToS"
        ]
      }
    ],
    "spirv.GL.Pow": [
      {
        "className": "{anonymous}::PowFOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.GL.Pow"
        ]
      }
    ],
    "complex.powi": [
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::complex::PowiOp, mlir::complex::DivOp, mlir::complex::MulOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "complex.powi"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::complex::PowiOp, mlir::complex::DivOp, mlir::complex::MulOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "complex.powi"
        ]
      }
    ],
    "math.ipowi": [
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.ipowi"
        ]
      },
      {
        "className": "{anonymous}::PowIStrengthReduction<mlir::math::IPowIOp, mlir::arith::DivSIOp, mlir::arith::MulIOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "math.ipowi"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::IPowIOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.ipowi"
        ]
      }
    ],
    "complex.exp": [
      {
        "className": "{anonymous}::PowOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.exp"
        ]
      }
    ],
    "complex.pow": [
      {
        "className": "{anonymous}::PowiOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.pow"
        ]
      },
      {
        "className": "{anonymous}::PowiOpToROCDLLibraryCalls",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "complex.pow"
        ]
      }
    ],
    "llvm.intr.prefetch": [
      {
        "className": "{anonymous}::PrefetchOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.prefetch"
        ]
      }
    ],
    "xevm.prefetch": [
      {
        "className": "{anonymous}::PrefetchToXeVMPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xevm.prefetch"
        ]
      }
    ],
    "spirv.ARM.GraphEntryPoint": [
      {
        "className": "{anonymous}::ProcessGraphInterfaceVarABI",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ARM.GraphEntryPoint"
        ]
      }
    ],
    "math.atanh": [
      {
        "className": "{anonymous}::PromoteOpToF32<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atanh"
        ]
      },
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AtanhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.atanh"
        ]
      }
    ],
    "amdgpu.permlane_swap": [
      {
        "className": "{anonymous}::PromoteShuffleToPermlanePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.permlane_swap"
        ]
      }
    ],
    "amdgpu.swizzle_bitmode": [
      {
        "className": "{anonymous}::PromoteShuffleToSwizzlePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.swizzle_bitmode"
        ]
      }
    ],
    "arm_sve.intr.convert.from.svbool": [
      {
        "className": "{anonymous}::PselOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.convert.from.svbool"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertFromSvboolOp, mlir::arm_sve::ConvertFromSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.convert.from.svbool"
        ]
      }
    ],
    "arm_sve.intr.convert.to.svbool": [
      {
        "className": "{anonymous}::PselOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.convert.to.svbool"
        ]
      },
      {
        "className": "{anonymous}::SvboolConversionOpLowering<mlir::arm_sve::ConvertToSvboolOp, mlir::arm_sve::ConvertToSvboolIntrOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.convert.to.svbool"
        ]
      }
    ],
    "arm_sve.intr.psel": [
      {
        "className": "{anonymous}::PselOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sve.intr.psel"
        ]
      }
    ],
    "memref.realloc": [
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "memref.realloc"
        ]
      },
      {
        "className": "{anonymous}::PushBackRewriter",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "memref.realloc"
        ]
      },
      {
        "className": "{anonymous}::SimplifyDeadAlloc<mlir::memref::ReallocOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "memref.realloc"
        ]
      }
    ],
    "shape.rank": [
      {
        "className": "{anonymous}::RankShapeOfCanonicalizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.rank"
        ]
      },
      {
        "className": "{anonymous}::RankShapeOfCanonicalizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.rank"
        ]
      }
    ],
    "amdgpu.raw_buffer_atomic_cmpswap": [
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_atomic_cmpswap"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_atomic_cmpswap"
        ]
      }
    ],
    "amdgpu.raw_buffer_atomic_fadd": [
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_atomic_fadd"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferWrites<mlir::amdgpu::RawBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "amdgpu.raw_buffer_atomic_fadd"
        ]
      }
    ],
    "amdgpu.raw_buffer_load": [
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::arith::AddFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_load"
        ]
      },
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_load"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferLoads<mlir::amdgpu::RawBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "amdgpu.raw_buffer_load"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferLoads<mlir::amdgpu::RawBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "amdgpu.raw_buffer_load"
        ]
      }
    ],
    "amdgpu.raw_buffer_atomic_fmax": [
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.raw_buffer_atomic_fmax"
        ]
      }
    ],
    "gpu.printf": [
      {
        "className": "{anonymous}::RawBufferAtomicByCasPattern<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::arith::MaximumFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.printf"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.atomic.cmpswap": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicCmpswapOp, mlir::ROCDL::RawPtrBufferAtomicCmpSwap>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.atomic.cmpswap"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.atomic.fadd": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFaddOp, mlir::ROCDL::RawPtrBufferAtomicFaddOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.atomic.fadd"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.atomic.fmax": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicFmaxOp, mlir::ROCDL::RawPtrBufferAtomicFmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.atomic.fmax"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.atomic.smax": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicSmaxOp, mlir::ROCDL::RawPtrBufferAtomicSmaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.atomic.smax"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.atomic.umin": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferAtomicUminOp, mlir::ROCDL::RawPtrBufferAtomicUminOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.atomic.umin"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.load": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferLoadOp, mlir::ROCDL::RawPtrBufferLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.load"
        ]
      }
    ],
    "rocdl.raw.ptr.buffer.store": [
      {
        "className": "{anonymous}::RawBufferOpLowering<mlir::amdgpu::RawBufferStoreOp, mlir::ROCDL::RawPtrBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.raw.ptr.buffer.store"
        ]
      }
    ],
    "tosa.reduce_all": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_all"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_all"
        ]
      }
    ],
    "tosa.reduce_any": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_any"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_any"
        ]
      }
    ],
    "tosa.reduce_max": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_max"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_max"
        ]
      }
    ],
    "tosa.reduce_min": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_min"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_min"
        ]
      }
    ],
    "tosa.reduce_product": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_product"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_product"
        ]
      }
    ],
    "tosa.reduce_sum": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reduce_sum"
        ]
      },
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reduce_sum"
        ]
      }
    ],
    "tosa.argmax": [
      {
        "className": "{anonymous}::ReduceConstantOptimization<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "tosa.argmax"
        ]
      }
    ],
    "linalg.reduce": [
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAllOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceAnyOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMaxOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceMinOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceProductOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::ReduceConverter<mlir::tosa::ReduceSumOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.reduce"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.reduce"
        ]
      }
    ],
    "spirv.InBoundsPtrAccessChain": [
      {
        "className": "{anonymous}::ReinterpretCastPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.InBoundsPtrAccessChain"
        ]
      }
    ],
    "spirv.SNegate": [
      {
        "className": "{anonymous}::RemSIOpCLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SNegate"
        ]
      },
      {
        "className": "{anonymous}::RemSIOpGLPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.SNegate"
        ]
      }
    ],
    "acc.host_data": [
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "acc.host_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "acc.host_data"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "acc.host_data"
        ]
      }
    ],
    "acc.terminator": [
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "acc.terminator"
        ]
      },
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "acc.terminator"
        ]
      }
    ],
    "acc.loop": [
      {
        "className": "{anonymous}::RemoveConstantIfConditionWithRegion<mlir::acc::HostDataOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "acc.loop"
        ]
      }
    ],
    "test.region_if_yield": [
      {
        "className": "{anonymous}::RemoveDeallocMemrefsContainedInRetained",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.region_if_yield"
        ]
      }
    ],
    "test.condition": [
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.condition"
        ]
      },
      {
        "className": "{anonymous}::RemoveLoopInvariantArgsFromBeforeBlock",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveDuplicatedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.condition"
        ]
      },
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.condition"
        ]
      }
    ],
    "dummy.another_op": [
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "dummy.another_op"
        ]
      }
    ],
    "dummy.some_op": [
      {
        "className": "{anonymous}::RemoveLoopInvariantValueYielded",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "dummy.some_op"
        ]
      }
    ],
    "foo.op": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "foo.op"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "foo.op"
        ]
      }
    ],
    "test.get_some_value2": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.get_some_value2"
        ]
      }
    ],
    "test.get_some_value3": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.get_some_value3"
        ]
      }
    ],
    "test.other_op": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.other_op"
        ]
      },
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.other_op"
        ]
      }
    ],
    "test.get_some_value1": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.get_some_value1"
        ]
      }
    ],
    "test.get_some_value4": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.get_some_value4"
        ]
      }
    ],
    "test.read_buffer": [
      {
        "className": "{anonymous}::RemoveStaticCondition",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.read_buffer"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.read_buffer"
        ]
      }
    ],
    "amdgpu.raw_buffer_store": [
      {
        "className": "{anonymous}::RemoveStaticallyOobBufferWrites<mlir::amdgpu::RawBufferStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "amdgpu.raw_buffer_store"
        ]
      }
    ],
    "test.value0": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value0"
        ]
      }
    ],
    "test.value0_2": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value0_2"
        ]
      }
    ],
    "test.value1": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value1"
        ]
      }
    ],
    "test.value1_2": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value1_2"
        ]
      }
    ],
    "test.value2": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value2"
        ]
      }
    ],
    "test.value3": [
      {
        "className": "{anonymous}::RemoveUnusedResults",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.value3"
        ]
      }
    ],
    "test.replace_with_new_op": [
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.replace_with_new_op"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.replace_with_new_op"
        ]
      }
    ],
    "test.new_op": [
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.new_op"
        ]
      },
      {
        "className": "{anonymous}::ReplaceWithNewOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.new_op"
        ]
      },
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.new_op"
        ]
      }
    ],
    "test.dummy_user": [
      {
        "className": "{anonymous}::ReplaceWithNewOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.dummy_user"
        ]
      }
    ],
    "emitc.return": [
      {
        "className": "{anonymous}::ReturnOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.return"
        ]
      }
    ],
    "x86vector.avx.rsqrt": [
      {
        "className": "{anonymous}::RsqrtApproximation",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "x86vector.avx.rsqrt"
        ]
      }
    ],
    "amdgpu.dpp": [
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.dpp"
        ]
      }
    ],
    "rocdl.permlanex16": [
      {
        "className": "{anonymous}::ScalarSubgroupReduceToDPP",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.permlanex16"
        ]
      }
    ],
    "arith.scaling_extf": [
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.scaling_extf"
        ]
      },
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.scaling_extf"
        ]
      }
    ],
    "amdgpu.scaled_ext_packed": [
      {
        "className": "{anonymous}::ScalingExtFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.scaled_ext_packed"
        ]
      }
    ],
    "arith.scaling_truncf": [
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "arith.scaling_truncf"
        ]
      },
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "arith.scaling_truncf"
        ]
      }
    ],
    "amdgpu.packed_scaled_trunc": [
      {
        "className": "{anonymous}::ScalingTruncFRewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.packed_scaled_trunc"
        ]
      }
    ],
    "vector.scan": [
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "vector.scan"
        ]
      },
      {
        "className": "{anonymous}::ScanToArithOps",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "vector.scan"
        ]
      }
    ],
    "rocdl.sched.barrier": [
      {
        "className": "{anonymous}::SchedBarrierOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.sched.barrier"
        ]
      }
    ],
    "emitc.conditional": [
      {
        "className": "{anonymous}::SelectOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.conditional"
        ]
      },
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.conditional"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.conditional"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.conditional"
        ]
      }
    ],
    "tensor.rank": [
      {
        "className": "{anonymous}::ShapeOfOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tensor.rank"
        ]
      }
    ],
    "emitc.bitwise_right_shift": [
      {
        "className": "{anonymous}::SignedShiftOpConversion<mlir::arith::ShRSIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_right_shift"
        ]
      },
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShRUIOp, mlir::emitc::BitwiseRightShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_right_shift"
        ]
      }
    ],
    "affine.vector_store": [
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineApplyOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.vector_store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "affine.vector_store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.vector_store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.vector_store"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.vector_store"
        ]
      }
    ],
    "affine.prefetch": [
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "affine.prefetch"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "affine.prefetch"
        ]
      },
      {
        "className": "{anonymous}::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "affine.prefetch"
        ]
      }
    ],
    "sparse_tensor.sort": [
      {
        "className": "{anonymous}::SimplifyAllocConst<mlir::memref::AllocOp>",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.sort"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "sparse_tensor.sort"
        ]
      },
      {
        "className": "{anonymous}::SortRewriter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "sparse_tensor.sort"
        ]
      },
      {
        "className": "{anonymous}::SparseCompressConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.sort"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.sort"
        ]
      }
    ],
    "linalg.depthwise_conv_2d_nhwc_hwc_q": [
      {
        "className": "{anonymous}::SimplifyDepthwiseConvQOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "linalg.depthwise_conv_2d_nhwc_hwc_q"
        ]
      }
    ],
    "shape.index_to_size": [
      {
        "className": "{anonymous}::SizeToIndexToSizeCanonicalization",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "shape.index_to_size"
        ]
      },
      {
        "className": "{anonymous}::SizeToIndexToSizeCanonicalization",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "shape.index_to_size"
        ]
      }
    ],
    "sparse_tensor.storage_specifier.init": [
      {
        "className": "{anonymous}::SparseAssembleOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.init"
        ]
      },
      {
        "className": "{anonymous}::SparseExtractSliceConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.init"
        ]
      },
      {
        "className": "{anonymous}::SparseNewConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.init"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorAllocConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.init"
        ]
      },
      {
        "className": "{anonymous}::SparseTensorEmptyConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.storage_specifier.init"
        ]
      }
    ],
    "sparse_tensor.disassemble": [
      {
        "className": "{anonymous}::SparseDisassembleDemapper",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "sparse_tensor.disassemble"
        ]
      },
      {
        "className": "{anonymous}::SparseFuncAssembler",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "sparse_tensor.disassemble"
        ]
      }
    ],
    "test.split_block_here": [
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.split_block_here"
        ]
      },
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.split_block_here"
        ]
      },
      {
        "className": "{anonymous}::SplitBlockHere",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.split_block_here"
        ]
      }
    ],
    "arm_sme.intr.st1b.horiz": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1b.horiz"
        ]
      }
    ],
    "arm_sme.intr.st1b.vert": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1b.vert"
        ]
      }
    ],
    "arm_sme.intr.st1d.horiz": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1d.horiz"
        ]
      }
    ],
    "arm_sme.intr.st1d.vert": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1d.vert"
        ]
      }
    ],
    "arm_sme.intr.st1h.horiz": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1h.horiz"
        ]
      }
    ],
    "arm_sme.intr.st1h.vert": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1h.vert"
        ]
      }
    ],
    "arm_sme.intr.st1q.horiz": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1q.horiz"
        ]
      }
    ],
    "arm_sme.intr.st1q.vert": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1q.vert"
        ]
      }
    ],
    "arm_sme.intr.st1w.horiz": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1w.horiz"
        ]
      }
    ],
    "arm_sme.intr.st1w.vert": [
      {
        "className": "{anonymous}::StoreTileSliceConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.st1w.vert"
        ]
      }
    ],
    "arm_sme.intr.cntsd": [
      {
        "className": "{anonymous}::StreamingVLOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.cntsd"
        ]
      }
    ],
    "test.recursive_rewrite": [
      {
        "className": "{anonymous}::TestBoundedRecursiveRewrite",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.recursive_rewrite"
        ]
      }
    ],
    "test.type_producer": [
      {
        "className": "{anonymous}::TestChangeProducerTypeF32ToF64",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_producer"
        ]
      },
      {
        "className": "{anonymous}::TestChangeProducerTypeF32ToInvalid",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_producer"
        ]
      },
      {
        "className": "{anonymous}::TestChangeProducerTypeI32ToF32",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_producer"
        ]
      },
      {
        "className": "{anonymous}::TestTypeConversionAnotherProducer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_producer"
        ]
      },
      {
        "className": "{anonymous}::TestTypeConversionProducer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.type_producer"
        ]
      }
    ],
    "test.repetitive_1_to_n_consumer": [
      {
        "className": "{anonymous}::TestConvertBlockArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.repetitive_1_to_n_consumer"
        ]
      }
    ],
    "test.convert_block_args": [
      {
        "className": "{anonymous}::TestConvertBlockArgs",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.convert_block_args"
        ]
      }
    ],
    "test.finish": [
      {
        "className": "{anonymous}::TestCreateBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.finish"
        ]
      },
      {
        "className": "{anonymous}::TestCreateIllegalBlock",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.finish"
        ]
      }
    ],
    "test.legal_op_c": [
      {
        "className": "{anonymous}::TestCreateUnregisteredOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op_c"
        ]
      }
    ],
    "test.legal_op": [
      {
        "className": "{anonymous}::TestDetachedSignatureConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op"
        ]
      },
      {
        "className": "{anonymous}::TestMultiple1ToNReplacement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op"
        ]
      }
    ],
    "test.op_n": [
      {
        "className": "{anonymous}::TestEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestMultipleEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestNestedOpEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestNestedOpEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestNestedSameOpAndSameArgEqualityPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_n"
        ]
      },
      {
        "className": "{anonymous}::TestNestedSameOpAndSameArgEqualityPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_n"
        ]
      }
    ],
    "test.op_o": [
      {
        "className": "{anonymous}::TestEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.op_o"
        ]
      }
    ],
    "test.step_1": [
      {
        "className": "{anonymous}::TestMultiple1ToNReplacement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.step_1"
        ]
      }
    ],
    "test.op_p": [
      {
        "className": "{anonymous}::TestMultipleEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.op_p"
        ]
      },
      {
        "className": "{anonymous}::TestMultipleEqualArgsPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "test.op_p"
        ]
      }
    ],
    "test.illegal_op_terminator": [
      {
        "className": "{anonymous}::TestNestedOpCreationUndoRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_terminator"
        ]
      }
    ],
    "test.illegal_op_with_region": [
      {
        "className": "{anonymous}::TestNestedOpCreationUndoRewrite",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.illegal_op_with_region"
        ]
      }
    ],
    "test.legal_op_b": [
      {
        "className": "{anonymous}::TestNonRootReplacement",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op_b"
        ]
      }
    ],
    "test.region": [
      {
        "className": "{anonymous}::TestRegionRewriteUndo",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.region"
        ]
      }
    ],
    "test.remapped_value_region": [
      {
        "className": "{anonymous}::TestRemapValueInRegion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.remapped_value_region"
        ]
      }
    ],
    "test.legal_op_d": [
      {
        "className": "{anonymous}::TestReplaceWithLegalOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.legal_op_d"
        ]
      }
    ],
    "test.valid_consumer": [
      {
        "className": "{anonymous}::TestReplaceWithValidConsumer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid_consumer"
        ]
      }
    ],
    "test.valid_producer": [
      {
        "className": "{anonymous}::TestReplaceWithValidProducer",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.valid_producer"
        ]
      }
    ],
    "gpu.subgroup_id": [
      {
        "className": "{anonymous}::TestStepOpPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgPrefetchNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      },
      {
        "className": "{anonymous}::WgToSgVectorStepOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "gpu.subgroup_id"
        ]
      }
    ],
    "test.change_block_op": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::ChangeBlockOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "modify op",
        "operations": [
          "test.change_block_op"
        ]
      }
    ],
    "test.implicit_change_op": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::ChangeBlockOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "modify op",
        "operations": [
          "test.implicit_change_op"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::ImplicitChangeOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "modify op",
        "operations": [
          "test.implicit_change_op"
        ]
      }
    ],
    "test.dummy_op": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.dummy_op"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.dummy_op"
        ]
      }
    ],
    "test.foo_a": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.foo_a"
        ]
      }
    ],
    "test.foo_b": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.foo_b"
        ]
      }
    ],
    "test.graph_region": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.graph_region"
        ]
      }
    ],
    "test.nested_a": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_a"
        ]
      }
    ],
    "test.nested_b": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_b"
        ]
      }
    ],
    "test.nested_c": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_c"
        ]
      }
    ],
    "test.nested_d": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_d"
        ]
      }
    ],
    "test.nested_dummy": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_dummy"
        ]
      }
    ],
    "test.nested_e": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.nested_e"
        ]
      }
    ],
    "test.qux": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.qux"
        ]
      }
    ],
    "test.qux_unreachable": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::EraseOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "erase op",
        "operations": [
          "test.qux_unreachable"
        ]
      }
    ],
    "test.insert_same_op": [
      {
        "className": "{anonymous}::TestStrictPatternDriver::InsertSameOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "insert op",
        "operations": [
          "test.insert_same_op"
        ]
      },
      {
        "className": "{anonymous}::TestStrictPatternDriver::InsertSameOp",
        "namespace": "{anonymous}::TestStrictPatternDriver",
        "method": "modify op",
        "operations": [
          "test.insert_same_op"
        ]
      }
    ],
    "test.hoist_me": [
      {
        "className": "{anonymous}::TestUndoMoveOpBefore",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.hoist_me"
        ]
      }
    ],
    "test.value_replace": [
      {
        "className": "{anonymous}::TestValueReplace",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.value_replace"
        ]
      }
    ],
    "arm_sme.load_tile_slice": [
      {
        "className": "{anonymous}::TileLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.load_tile_slice"
        ]
      }
    ],
    "tosa.reciprocal": [
      {
        "className": "{anonymous}::TosaFoldConstantReciprocal",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.reciprocal"
        ]
      },
      {
        "className": "{anonymous}::TosaFoldConstantReciprocal",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.reciprocal"
        ]
      }
    ],
    "arm_sme.tile_load": [
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_load"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_load"
        ]
      },
      {
        "className": "{anonymous}::VectorLoadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_load"
        ]
      }
    ],
    "arm_sme.tile_store": [
      {
        "className": "{anonymous}::TransferReadToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "arm_sme.tile_store"
        ]
      },
      {
        "className": "{anonymous}::TransferWriteToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_store"
        ]
      },
      {
        "className": "{anonymous}::TransposeOpToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_store"
        ]
      },
      {
        "className": "{anonymous}::VectorStoreToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.tile_store"
        ]
      }
    ],
    "tosa.transpose_conv2d": [
      {
        "className": "{anonymous}::TransposeConvNonStridedConverter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.transpose_conv2d"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvNonStridedConverter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.transpose_conv2d"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "tosa.transpose_conv2d"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "tosa.transpose_conv2d"
        ]
      }
    ],
    "tosa.reverse": [
      {
        "className": "{anonymous}::TransposeConvNonStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.reverse"
        ]
      },
      {
        "className": "{anonymous}::TransposeConvStridedConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.reverse"
        ]
      }
    ],
    "rocdl.ds.read.tr16.b64": [
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds.read.tr16.b64"
        ]
      }
    ],
    "rocdl.ds.read.tr4.b64": [
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds.read.tr4.b64"
        ]
      }
    ],
    "rocdl.ds.read.tr6.b96": [
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds.read.tr6.b96"
        ]
      }
    ],
    "rocdl.ds.read.tr8.b64": [
      {
        "className": "{anonymous}::TransposeLoadOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.ds.read.tr8.b64"
        ]
      }
    ],
    "amdgpu.packed_trunc_2xfp8": [
      {
        "className": "{anonymous}::TruncFToFloat8RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "amdgpu.packed_trunc_2xfp8"
        ]
      }
    ],
    "rocdl.cvt.pkrtz": [
      {
        "className": "{anonymous}::TruncfToFloat16RewritePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.pkrtz"
        ]
      }
    ],
    "spirv.ConvertFToU": [
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::FPToUIOp, mlir::spirv::ConvertFToUOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertFToU"
        ]
      }
    ],
    "spirv.ConvertSToF": [
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::SIToFPOp, mlir::spirv::ConvertSToFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertSToF"
        ]
      }
    ],
    "spirv.ConvertUToF": [
      {
        "className": "{anonymous}::TypeCastingOpPattern<mlir::arith::UIToFPOp, mlir::spirv::ConvertUToFOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.ConvertUToF"
        ]
      }
    ],
    "xegpu.create_tdesc": [
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.create_tdesc"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.create_tdesc"
        ]
      },
      {
        "className": "{anonymous}::UnrollCreateDescOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.create_tdesc"
        ]
      }
    ],
    "xegpu.load_matrix": [
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.load_matrix"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_matrix"
        ]
      },
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.load_matrix"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.load_matrix"
        ]
      }
    ],
    "index.constant": [
      {
        "className": "{anonymous}::UnrollLoadMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.constant"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.constant"
        ]
      }
    ],
    "xegpu.prefetch": [
      {
        "className": "{anonymous}::UnrollPrefetchOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.prefetch"
        ]
      },
      {
        "className": "{anonymous}::UnrollPrefetchOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.prefetch"
        ]
      }
    ],
    "xegpu.store_matrix": [
      {
        "className": "{anonymous}::UnrollStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.store_matrix"
        ]
      },
      {
        "className": "{anonymous}::UnrollStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_matrix"
        ]
      },
      {
        "className": "{anonymous}::WgToSgStoreMatrixOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.store_matrix"
        ]
      }
    ],
    "xegpu.update_nd_offset": [
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.update_nd_offset"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.update_nd_offset"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.update_nd_offset"
        ]
      },
      {
        "className": "{anonymous}::WgToSgUpdateNdOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.update_nd_offset"
        ]
      }
    ],
    "xegpu.update_offset": [
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "xegpu.update_offset"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "xegpu.update_offset"
        ]
      },
      {
        "className": "{anonymous}::UnrollUpdateOffsetOp",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "xegpu.update_offset"
        ]
      }
    ],
    "emitc.bitwise_left_shift": [
      {
        "className": "{anonymous}::UnsignedShiftOpConversion<mlir::arith::ShLIOp, mlir::emitc::BitwiseLeftShiftOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "emitc.bitwise_left_shift"
        ]
      }
    ],
    "test.i32ElementsAttr": [
      {
        "className": "{anonymous}::UpdateAttr",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.i32ElementsAttr"
        ]
      },
      {
        "className": "{anonymous}::UpdateAttr",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.i32ElementsAttr"
        ]
      }
    ],
    "test.float_elements_attr": [
      {
        "className": "{anonymous}::UpdateFloatElementsAttr",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "test.float_elements_attr"
        ]
      },
      {
        "className": "{anonymous}::UpdateFloatElementsAttr",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.float_elements_attr"
        ]
      }
    ],
    "test.test1": [
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.test1"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.test1"
        ]
      }
    ],
    "test.test2": [
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.test2"
        ]
      },
      {
        "className": "{anonymous}::UpliftWhileOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "test.test2"
        ]
      }
    ],
    "ml_program.global": [
      {
        "className": "{anonymous}::VariableOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ml_program.global"
        ]
      }
    ],
    "ml_program.global_load": [
      {
        "className": "{anonymous}::VariableReadOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ml_program.global_load"
        ]
      }
    ],
    "ml_program.global_store": [
      {
        "className": "{anonymous}::VariableWriteOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "ml_program.global_store"
        ]
      }
    ],
    "math.acosh": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AcoshOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.acosh"
        ]
      }
    ],
    "math.asinh": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::AsinhOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.asinh"
        ]
      }
    ],
    "math.exp2": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Exp2Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp2"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "math.exp2"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.exp2"
        ]
      }
    ],
    "math.log10": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::Log10Op>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.log10"
        ]
      }
    ],
    "math.round": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::RoundOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.round"
        ]
      }
    ],
    "math.trunc": [
      {
        "className": "{anonymous}::VecOpToScalarOp<mlir::math::TruncOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "math.trunc"
        ]
      }
    ],
    "llvm.shufflevector": [
      {
        "className": "{anonymous}::VectorBroadcastScalarToLowRankLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      },
      {
        "className": "{anonymous}::VectorBroadcastScalarToNdLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      },
      {
        "className": "{anonymous}::VectorDeinterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      },
      {
        "className": "{anonymous}::VectorInterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      },
      {
        "className": "{anonymous}::VectorShufflePattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.shufflevector"
        ]
      }
    ],
    "llvm.intr.masked.compressstore": [
      {
        "className": "{anonymous}::VectorCompressStoreOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.compressstore"
        ]
      }
    ],
    "llvm.intr.stepvector": [
      {
        "className": "{anonymous}::VectorCreateMaskOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stepvector"
        ]
      },
      {
        "className": "{anonymous}::VectorScalableStepOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.stepvector"
        ]
      }
    ],
    "spirv.VectorShuffle": [
      {
        "className": "{anonymous}::VectorDeinterleaveOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorShuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorExtractStridedSliceOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorShuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertStridedSliceOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorShuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorInterleaveOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorShuffle"
        ]
      },
      {
        "className": "{anonymous}::VectorShuffleOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorShuffle"
        ]
      }
    ],
    "llvm.intr.vector.deinterleave2": [
      {
        "className": "{anonymous}::VectorDeinterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.deinterleave2"
        ]
      }
    ],
    "llvm.intr.masked.expandload": [
      {
        "className": "{anonymous}::VectorExpandLoadOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.expandload"
        ]
      }
    ],
    "spirv.VectorExtractDynamic": [
      {
        "className": "{anonymous}::VectorExtractOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorExtractDynamic"
        ]
      }
    ],
    "arm_sme.extract_tile_slice": [
      {
        "className": "{anonymous}::VectorExtractToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.extract_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorInsertToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.extract_tile_slice"
        ]
      },
      {
        "className": "{anonymous}::VectorPrintToArmSMELowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.extract_tile_slice"
        ]
      }
    ],
    "llvm.intr.fmuladd": [
      {
        "className": "{anonymous}::VectorFMAOp1DConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.fmuladd"
        ]
      }
    ],
    "llvm.intr.masked.gather": [
      {
        "className": "{anonymous}::VectorGatherOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.gather"
        ]
      }
    ],
    "spirv.VectorInsertDynamic": [
      {
        "className": "{anonymous}::VectorInsertOpConvert",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.VectorInsertDynamic"
        ]
      }
    ],
    "llvm.intr.vector.interleave2": [
      {
        "className": "{anonymous}::VectorInterleaveOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.interleave2"
        ]
      }
    ],
    "llvm.intr.masked.load": [
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedLoadOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.load"
        ]
      }
    ],
    "llvm.intr.masked.store": [
      {
        "className": "{anonymous}::VectorLoadStoreConversion<mlir::vector::MaskedStoreOp>",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.store"
        ]
      }
    ],
    "llvm.intr.vector.reduce.add": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.add"
        ]
      }
    ],
    "llvm.intr.vector.reduce.and": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.and"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fadd": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fadd"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fmax": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fmax"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fmin": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fmin"
        ]
      }
    ],
    "llvm.intr.vector.reduce.fmul": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.fmul"
        ]
      }
    ],
    "llvm.intr.vector.reduce.mul": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.mul"
        ]
      }
    ],
    "llvm.intr.vector.reduce.or": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.or"
        ]
      }
    ],
    "llvm.intr.vector.reduce.smax": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.smax"
        ]
      }
    ],
    "llvm.intr.vector.reduce.smin": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.smin"
        ]
      }
    ],
    "llvm.intr.vector.reduce.umax": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.umax"
        ]
      }
    ],
    "llvm.intr.vector.reduce.umin": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.umin"
        ]
      }
    ],
    "llvm.intr.vector.reduce.xor": [
      {
        "className": "{anonymous}::VectorReductionOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.reduce.xor"
        ]
      }
    ],
    "spirv.Dot": [
      {
        "className": "{anonymous}::VectorReductionToFPDotProd",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "spirv.Dot"
        ]
      }
    ],
    "llvm.intr.vector.extract": [
      {
        "className": "{anonymous}::VectorScalableExtractOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.extract"
        ]
      }
    ],
    "llvm.intr.vector.insert": [
      {
        "className": "{anonymous}::VectorScalableInsertOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.vector.insert"
        ]
      }
    ],
    "llvm.intr.masked.scatter": [
      {
        "className": "{anonymous}::VectorScatterOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "llvm.intr.masked.scatter"
        ]
      }
    ],
    "linalg.depthwise_conv_1d_nwc_wc": [
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.depthwise_conv_1d_nwc_wc"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.depthwise_conv_1d_nwc_wc"
        ]
      }
    ],
    "linalg.map": [
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.map"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.map"
        ]
      }
    ],
    "linalg.pooling_ncw_sum": [
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "erase op",
        "operations": [
          "linalg.pooling_ncw_sum"
        ]
      },
      {
        "className": "{anonymous}::VectorizationPattern",
        "namespace": "{anonymous}",
        "method": "replace op with values",
        "operations": [
          "linalg.pooling_ncw_sum"
        ]
      }
    ],
    "rocdl.wmma.bf16.16x16x16.bf16": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.bf16.16x16x16.bf16"
        ]
      }
    ],
    "rocdl.wmma.f16.16x16x16.f16": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f16.16x16x16.f16"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.bf16": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.bf16"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.bf8_bf8": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.bf8_bf8"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.bf8_fp8": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.bf8_fp8"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.f16": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.f16"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.fp8_bf8": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.fp8_bf8"
        ]
      }
    ],
    "rocdl.wmma.f32.16x16x16.fp8_fp8": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.f32.16x16x16.fp8_fp8"
        ]
      }
    ],
    "rocdl.wmma.i32.16x16x16.iu4": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.i32.16x16x16.iu4"
        ]
      }
    ],
    "rocdl.wmma.i32.16x16x16.iu8": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.i32.16x16x16.iu8"
        ]
      }
    ],
    "rocdl.wmma.i32.16x16x32.iu4": [
      {
        "className": "{anonymous}::WMMAOpLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.wmma.i32.16x16x32.iu4"
        ]
      }
    ],
    "some_def": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def"
        ]
      }
    ],
    "some_def_1": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_1"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def_1"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_1"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def_1"
        ]
      }
    ],
    "some_def_2": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_2"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def_2"
        ]
      }
    ],
    "some_def_3": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_3"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def_3"
        ]
      }
    ],
    "some_op": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_op"
        ]
      },
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_op"
        ]
      }
    ],
    "some_use_1": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_1"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_1"
        ]
      }
    ],
    "some_use_2": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_2"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_2"
        ]
      }
    ],
    "some_use_3": [
      {
        "className": "{anonymous}::WarpOpScfForOp",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_3"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_use_3"
        ]
      }
    ],
    "another_def": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "another_def"
        ]
      }
    ],
    "blocking_use": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "blocking_use"
        ]
      }
    ],
    "mask_def_0": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mask_def_0"
        ]
      }
    ],
    "mask_def_1": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "mask_def_1"
        ]
      }
    ],
    "some_def_0": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_0"
        ]
      },
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "modify op",
        "operations": [
          "some_def_0"
        ]
      }
    ],
    "some_def_above": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_def_above"
        ]
      }
    ],
    "some_other_def": [
      {
        "className": "{anonymous}::WarpOpToScfIfPattern",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "some_other_def"
        ]
      }
    ],
    "index.sub": [
      {
        "className": "{anonymous}::WgToSgCreateNdOp",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.sub"
        ]
      },
      {
        "className": "{anonymous}::WgToSgLoadNdOpWithOffset",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "index.sub"
        ]
      }
    ],
    "test.outer_after_post": [
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.outer_after_post"
        ]
      }
    ],
    "test.outer_before_post": [
      {
        "className": "{anonymous}::WhileLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.outer_before_post"
        ]
      }
    ],
    "tosa.greater_equal": [
      {
        "className": "{anonymous}::WhileOpConverter",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "tosa.greater_equal"
        ]
      }
    ],
    "test.val1": [
      {
        "className": "{anonymous}::WhileRemoveUnusedArgs",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "test.val1"
        ]
      }
    ],
    "nvvm.wmma.load": [
      {
        "className": "{anonymous}::WmmaLoadOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wmma.load"
        ]
      }
    ],
    "nvvm.wmma.mma": [
      {
        "className": "{anonymous}::WmmaMmaOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wmma.mma"
        ]
      }
    ],
    "nvvm.wmma.store": [
      {
        "className": "{anonymous}::WmmaStoreOpToNVVMLowering",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "nvvm.wmma.store"
        ]
      }
    ],
    "arm_sme.intr.zero": [
      {
        "className": "{anonymous}::ZeroOpConversion",
        "namespace": "{anonymous}",
        "method": "insert op",
        "operations": [
          "arm_sme.intr.zero"
        ]
      }
    ],
    "dummy_use": [
      {
        "className": "{anonymous}::lowering_1_d::TransferOp1dConversion<mlir::vector::TransferReadOp>",
        "namespace": "{anonymous}::lowering_1_d",
        "method": "modify op",
        "operations": [
          "dummy_use"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d::PrepareTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d",
        "method": "modify op",
        "operations": [
          "dummy_use"
        ]
      },
      {
        "className": "{anonymous}::lowering_n_d_unrolled::UnrollTransferReadConversion",
        "namespace": "{anonymous}::lowering_n_d_unrolled",
        "method": "modify op",
        "operations": [
          "dummy_use"
        ]
      }
    ],
    "rocdl.cvt.f32.bf8": [
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.f32.bf8"
        ]
      }
    ],
    "rocdl.cvt.f32.fp8": [
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.f32.fp8"
        ]
      }
    ],
    "rocdl.cvt.pk.f32.fp8": [
      {
        "className": "{anonymous}::{anonymous}::ExtPackedFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.pk.f32.fp8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf8.bf16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf8.bf16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf8.f16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf8.f16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf8.f32"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp4.bf16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp4.bf16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp4.f16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp4.f16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp4.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp4.f32"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp8.bf16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp8.bf16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp8.f16": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp8.f16"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.fp8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedScaledTruncOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.fp8.f32"
        ]
      }
    ],
    "rocdl.cvt.sr.bf8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedStochRoundFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.sr.bf8.f32"
        ]
      }
    ],
    "rocdl.cvt.sr.fp8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedStochRoundFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.sr.fp8.f32"
        ]
      }
    ],
    "rocdl.cvt.pk.bf8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedTrunc2xFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.pk.bf8.f32"
        ]
      }
    ],
    "rocdl.cvt.pk.fp8.f32": [
      {
        "className": "{anonymous}::{anonymous}::PackedTrunc2xFp8OpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.pk.fp8.f32"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf16.bf8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf16.bf8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf16.fp4": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf16.fp4"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.bf16.fp8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.bf16.fp8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f16.bf8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f16.bf8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f16.fp4": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f16.fp4"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f16.fp8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f16.fp8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f32.bf8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f32.bf8"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f32.fp4": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f32.fp4"
        ]
      }
    ],
    "rocdl.cvt.scalef32.pk.f32.fp8": [
      {
        "className": "{anonymous}::{anonymous}::ScaledExtPackedOpLowering",
        "namespace": "{anonymous}::{anonymous}",
        "method": "insert op",
        "operations": [
          "rocdl.cvt.scalef32.pk.f32.fp8"
        ]
      }
    ]
  },
  "metadata": {
    "namespaces": [
      "mlir",
      "mlir::amdgpu",
      "mlir::gpu::index_lowering",
      "mlir::khr::{anonymous}",
      "mlir::linalg",
      "mlir::linalg::{anonymous}",
      "mlir::math",
      "mlir::quant::{anonymous}",
      "mlir::scf",
      "mlir::shard::{anonymous}",
      "mlir::spirv",
      "mlir::spirv::{anonymous}",
      "mlir::tosa::{anonymous}",
      "mlir::xegpu::doSCFStructuralTypeConversionWithTensorType(mlir::Operation*, mlir::TypeConverter)",
      "mlir::{anonymous}",
      "{anonymous}",
      "{anonymous}::LoadStoreLikeOpRewriter, {anonymous}",
      "{anonymous}::TestStrictPatternDriver",
      "{anonymous}::lowering_1_d",
      "{anonymous}::lowering_n_d",
      "{anonymous}::lowering_n_d_unrolled",
      "{anonymous}::{anonymous}"
    ],
    "methods": [
      "erase op",
      "insert op",
      "modify op",
      "replace op with new op",
      "replace op with values"
    ]
  }
}