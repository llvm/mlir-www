<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on MLIR</title><link>https://mlir.llvm.org/getting_started/</link><description>Recent content in Getting Started on MLIR</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://mlir.llvm.org/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Reporting Issues</title><link>https://mlir.llvm.org/getting_started/ReportingIssues/</link><pubDate>Wed, 27 Apr 2022 10:30:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/ReportingIssues/</guid><description>Issues with MLIR can be reported through GitHub. Report the issue for the llvm-project repository at https://github.com/llvm/llvm-project/issues/new. If possible, attach the &amp;ldquo;mlir&amp;rdquo; label (label management may be limited to accounts that have a contribution history). Several other labels prefixed with &amp;ldquo;mlir:&amp;rdquo; are available if the issue can be classified further, for example, &amp;ldquo;mlir:core&amp;rdquo; can be used for issues with MLIR core libraries (mlir/lib/IR, mlir/lib/Interfaces, etc.) and &amp;ldquo;mlir:affine&amp;rdquo; can be used for issues with MLIR Affine dialect.</description></item><item><title>Debugging Tips</title><link>https://mlir.llvm.org/getting_started/Debugging/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/Debugging/</guid><description>Inspecting compilation There&amp;rsquo;s no silver bullet for debugging the compilation process. Standard debugging techniques (printf debugging, gdb/lldb, IDE graphical debuggers, etc.) are of course applicable, but below are MLIR-specific facilities that are quite useful before diving into a generic debug flow. These facilities assume that you have reduced your problem to a form that can be reproduced with mlir-opt or another program that hooks into MLIR&amp;rsquo;s option parsing, if this is not the case, see section &amp;ldquo;Isolating test case&amp;rdquo; below.</description></item><item><title>FAQ</title><link>https://mlir.llvm.org/getting_started/Faq/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/Faq/</guid><description>How to refer to MLIR in publications? Is there an accompanying paper? MLIR has been presented in the 2021 IEEE/ACM International Symposium on Code Generation and Optimization, the full text of the paper is available from IEEE. A pre-publication draft is available on arXiv but may be missing improvements and corrections. Please also note that MLIR keeps evolving and IR snippets presented in the paper may no longer use modern syntax, refer to the MLIR documentation for the new syntax.</description></item><item><title>How to Contribute</title><link>https://mlir.llvm.org/getting_started/Contributing/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/Contributing/</guid><description>Everyone is welcome to contribute to MLIR. There are several ways of getting involved and contributing including reporting bugs, improving documentation and tutorials.
Community Guidelines Please be mindful of the LLVM Code of Conduct, which pledges to foster an open and welcoming environment.
Contributing code Please send pull-request on GitHub. If you don&amp;rsquo;t have write access to the repo, just leave a comment asking the reviewer to hit the merge button it for you.</description></item><item><title>Developer Guide</title><link>https://mlir.llvm.org/getting_started/DeveloperGuide/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/DeveloperGuide/</guid><description>This document attempts to describe a few developer policies used in MLIR (such as coding standards used) as well as development approach (such as, testing methods).
Style guide MLIR follows the LLVM style guide. We also adhere to the following (which deviate from or are not specified in the LLVM style guide):
Adopts camelBack; Uses Doxygen-style (///) comments for top-level and class member definitions, regardless of them being visible as public APIs.</description></item><item><title>Open Projects</title><link>https://mlir.llvm.org/getting_started/openprojects/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/openprojects/</guid><description>Below is a list of projects that can be suitable for Google Summer of Code (GSOC) or just for someone to get started with contributing to MLIR. See also the &amp;ldquo;beginner&amp;rdquo; issues on the bugtracker. If you&amp;rsquo;re interested in one of these projects, feel free to discuss it on the MLIR section of the LLVM forums or on the MLIR channel of the LLVM discord server. The mentors are indicative and suggestion of first point of contact for starting on these projects.</description></item><item><title>Glossary</title><link>https://mlir.llvm.org/getting_started/Glossary/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/Glossary/</guid><description>This glossary contains definitions of MLIR-specific terminology. It is intended to be a quick reference document. For terms which are well-documented elsewhere, definitions are kept brief and the header links to the more in-depth documentation.
Block A sequential list of operations without control flow.
Also called a basic block.
Conversion The transformation of code represented in one dialect into a semantically equivalent representation in another dialect (i.e. inter-dialect conversion) or the same dialect (i.</description></item><item><title>Testing Guide</title><link>https://mlir.llvm.org/getting_started/TestingGuide/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://mlir.llvm.org/getting_started/TestingGuide/</guid><description>Quickstart commands Run all MLIR tests: Run integration tests (requires -DMLIR_INCLUDE_INTEGRATION_TESTS=ON): Run C++ unit tests: Run lit tests in a specific directory Run a specific lit test file Test categories lit and FileCheck tests Diagnostic tests Integration tests C++ Unit tests Contributor guidelines FileCheck best practices Test Formatting Best Practices Test Documentation Best Practices Quickstart commands These commands are explained below in more detail. All commands are run from the cmake build directory build/, after building the project.</description></item></channel></rss>